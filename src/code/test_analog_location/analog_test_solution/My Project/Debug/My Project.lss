
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  000106fc  2**0
                  CONTENTS
  2 .lpram        00000000  30000000  30000000  000106fc  2**0
                  CONTENTS
  3 .bss          00000030  20000000  20000000  00020000  2**2
                  ALLOC
  4 .stack        00002000  20000030  20000030  00020000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000106fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00010724  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008f09  00000000  00000000  0001077d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018ce  00000000  00000000  00019686  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001b74  00000000  00000000  0001af54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000290  00000000  00000000  0001cac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b8  00000000  00000000  0001cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019230  00000000  00000000  0001d010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009741  00000000  00000000  00036240  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088916  00000000  00000000  0003f981  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000464  00000000  00000000  000c8298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	30 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     0 . %...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	000006fc 	.word	0x000006fc

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000004 	.word	0x20000004
 108:	000006fc 	.word	0x000006fc
 10c:	000006fc 	.word	0x000006fc
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
 118:	4798      	blx	r3
}
 11a:	bd10      	pop	{r4, pc}
 11c:	000002a9 	.word	0x000002a9

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
 124:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 126:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0x6c>)
 128:	4b1a      	ldr	r3, [pc, #104]	; (194 <Reset_Handler+0x70>)
 12a:	429a      	cmp	r2, r3
 12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 12e:	001a      	movs	r2, r3
 130:	4b19      	ldr	r3, [pc, #100]	; (198 <Reset_Handler+0x74>)
 132:	429a      	cmp	r2, r3
 134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
 136:	4a19      	ldr	r2, [pc, #100]	; (19c <Reset_Handler+0x78>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4813      	ldr	r0, [pc, #76]	; (194 <Reset_Handler+0x70>)
 146:	4912      	ldr	r1, [pc, #72]	; (190 <Reset_Handler+0x6c>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 152:	4a13      	ldr	r2, [pc, #76]	; (1a0 <Reset_Handler+0x7c>)
 154:	4b13      	ldr	r3, [pc, #76]	; (1a4 <Reset_Handler+0x80>)
 156:	429a      	cmp	r2, r3
 158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
 15a:	43d3      	mvns	r3, r2
 15c:	4911      	ldr	r1, [pc, #68]	; (1a4 <Reset_Handler+0x80>)
 15e:	185b      	adds	r3, r3, r1
 160:	2103      	movs	r1, #3
 162:	438b      	bics	r3, r1
 164:	3304      	adds	r3, #4
 166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 168:	2100      	movs	r1, #0
 16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 16c:	4293      	cmp	r3, r2
 16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 170:	4a0d      	ldr	r2, [pc, #52]	; (1a8 <Reset_Handler+0x84>)
 172:	21ff      	movs	r1, #255	; 0xff
 174:	4b0d      	ldr	r3, [pc, #52]	; (1ac <Reset_Handler+0x88>)
 176:	438b      	bics	r3, r1
 178:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 17a:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x8c>)
 17c:	6853      	ldr	r3, [r2, #4]
 17e:	397f      	subs	r1, #127	; 0x7f
 180:	430b      	orrs	r3, r1
 182:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x90>)
 186:	4798      	blx	r3
        main();
 188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x94>)
 18a:	4798      	blx	r3
 18c:	e7fe      	b.n	18c <Reset_Handler+0x68>
 18e:	46c0      	nop			; (mov r8, r8)
 190:	000006fc 	.word	0x000006fc
 194:	20000000 	.word	0x20000000
 198:	20000000 	.word	0x20000000
 19c:	20000004 	.word	0x20000004
 1a0:	20000000 	.word	0x20000000
 1a4:	20000030 	.word	0x20000030
 1a8:	e000ed00 	.word	0xe000ed00
 1ac:	00000000 	.word	0x00000000
 1b0:	41004000 	.word	0x41004000
 1b4:	00000661 	.word	0x00000661
 1b8:	0000064d 	.word	0x0000064d

000001bc <DAC_0_PORT_init>:
#include <hal_init.h>

struct dac_sync_descriptor DAC_0;

void DAC_0_PORT_init(void)
{
 1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 1be:	46c6      	mov	lr, r8
 1c0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 1c2:	23c0      	movs	r3, #192	; 0xc0
 1c4:	05db      	lsls	r3, r3, #23
 1c6:	4698      	mov	r8, r3
 1c8:	2304      	movs	r3, #4
 1ca:	4642      	mov	r2, r8
 1cc:	6053      	str	r3, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 1ce:	4b20      	ldr	r3, [pc, #128]	; (250 <DAC_0_PORT_init+0x94>)
 1d0:	4a20      	ldr	r2, [pc, #128]	; (254 <DAC_0_PORT_init+0x98>)
 1d2:	629a      	str	r2, [r3, #40]	; 0x28
 1d4:	21c0      	movs	r1, #192	; 0xc0
 1d6:	0609      	lsls	r1, r1, #24
 1d8:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1da:	2042      	movs	r0, #66	; 0x42
 1dc:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1de:	2401      	movs	r4, #1
 1e0:	46a4      	mov	ip, r4
 1e2:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1e4:	2701      	movs	r7, #1
 1e6:	433a      	orrs	r2, r7
 1e8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1ea:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1ec:	3430      	adds	r4, #48	; 0x30
 1ee:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 1f0:	3833      	subs	r0, #51	; 0x33
 1f2:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
 1f4:	433a      	orrs	r2, r7
 1f6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1f8:	551a      	strb	r2, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 1fa:	2220      	movs	r2, #32
 1fc:	4640      	mov	r0, r8
 1fe:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 200:	4a15      	ldr	r2, [pc, #84]	; (258 <DAC_0_PORT_init+0x9c>)
 202:	629a      	str	r2, [r3, #40]	; 0x28
 204:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 206:	2045      	movs	r0, #69	; 0x45
 208:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 20a:	4665      	mov	r5, ip
 20c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 20e:	433a      	orrs	r2, r7
 210:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 212:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 214:	2232      	movs	r2, #50	; 0x32
 216:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 218:	260f      	movs	r6, #15
 21a:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
 21c:	2510      	movs	r5, #16
 21e:	4328      	orrs	r0, r5
 220:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 222:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 224:	3a2a      	subs	r2, #42	; 0x2a
 226:	4640      	mov	r0, r8
 228:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 22a:	4a0c      	ldr	r2, [pc, #48]	; (25c <DAC_0_PORT_init+0xa0>)
 22c:	629a      	str	r2, [r3, #40]	; 0x28
 22e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 230:	2243      	movs	r2, #67	; 0x43
 232:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
 234:	4660      	mov	r0, ip
 236:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 238:	4339      	orrs	r1, r7
 23a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 23c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 23e:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 240:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
 242:	432a      	orrs	r2, r5
 244:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 246:	551a      	strb	r2, [r3, r4]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA03, PINMUX_PA03B_DAC_VREFP);
}
 248:	bc04      	pop	{r2}
 24a:	4690      	mov	r8, r2
 24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 24e:	46c0      	nop			; (mov r8, r8)
 250:	40002800 	.word	0x40002800
 254:	40000004 	.word	0x40000004
 258:	40000020 	.word	0x40000020
 25c:	40000008 	.word	0x40000008

00000260 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_DAC;
 260:	4a05      	ldr	r2, [pc, #20]	; (278 <DAC_0_CLOCK_init+0x18>)
 262:	69d1      	ldr	r1, [r2, #28]
 264:	2380      	movs	r3, #128	; 0x80
 266:	015b      	lsls	r3, r3, #5
 268:	430b      	orrs	r3, r1
 26a:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
 26c:	2140      	movs	r1, #64	; 0x40
 26e:	2380      	movs	r3, #128	; 0x80
 270:	005b      	lsls	r3, r3, #1
 272:	4a02      	ldr	r2, [pc, #8]	; (27c <DAC_0_CLOCK_init+0x1c>)
 274:	50d1      	str	r1, [r2, r3]
void DAC_0_CLOCK_init(void)
{

	hri_mclk_set_APBCMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
 276:	4770      	bx	lr
 278:	40000400 	.word	0x40000400
 27c:	40001800 	.word	0x40001800

00000280 <DAC_0_init>:

void DAC_0_init(void)
{
 280:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
 282:	4b04      	ldr	r3, [pc, #16]	; (294 <DAC_0_init+0x14>)
 284:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
 286:	4904      	ldr	r1, [pc, #16]	; (298 <DAC_0_init+0x18>)
 288:	4804      	ldr	r0, [pc, #16]	; (29c <DAC_0_init+0x1c>)
 28a:	4b05      	ldr	r3, [pc, #20]	; (2a0 <DAC_0_init+0x20>)
 28c:	4798      	blx	r3
	DAC_0_PORT_init();
 28e:	4b05      	ldr	r3, [pc, #20]	; (2a4 <DAC_0_init+0x24>)
 290:	4798      	blx	r3
}
 292:	bd10      	pop	{r4, pc}
 294:	00000261 	.word	0x00000261
 298:	42003000 	.word	0x42003000
 29c:	2000001c 	.word	0x2000001c
 2a0:	000002f9 	.word	0x000002f9
 2a4:	000001bd 	.word	0x000001bd

000002a8 <system_init>:

void system_init(void)
{
 2a8:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 2aa:	4b02      	ldr	r3, [pc, #8]	; (2b4 <system_init+0xc>)
 2ac:	4798      	blx	r3
	init_mcu();

	DAC_0_init();
 2ae:	4b02      	ldr	r3, [pc, #8]	; (2b8 <system_init+0x10>)
 2b0:	4798      	blx	r3
}
 2b2:	bd10      	pop	{r4, pc}
 2b4:	00000415 	.word	0x00000415
 2b8:	00000281 	.word	0x00000281

000002bc <DAC_0_example>:

/**
 * Example of using DAC_0 to generate waveform.
 */
void DAC_0_example(void)
{
 2bc:	b570      	push	{r4, r5, r6, lr}
 2be:	b082      	sub	sp, #8
	uint16_t i = 0;
 2c0:	2200      	movs	r2, #0
 2c2:	466b      	mov	r3, sp
 2c4:	80da      	strh	r2, [r3, #6]

	dac_sync_enable_channel(&DAC_0, 0);
 2c6:	2100      	movs	r1, #0
 2c8:	4808      	ldr	r0, [pc, #32]	; (2ec <DAC_0_example+0x30>)
 2ca:	4b09      	ldr	r3, [pc, #36]	; (2f0 <DAC_0_example+0x34>)
 2cc:	4798      	blx	r3

	for (;;) {
		dac_sync_write(&DAC_0, 0, &i, 1);
 2ce:	466b      	mov	r3, sp
 2d0:	1d9c      	adds	r4, r3, #6
 2d2:	4d06      	ldr	r5, [pc, #24]	; (2ec <DAC_0_example+0x30>)
 2d4:	4e07      	ldr	r6, [pc, #28]	; (2f4 <DAC_0_example+0x38>)
 2d6:	2301      	movs	r3, #1
 2d8:	0022      	movs	r2, r4
 2da:	2100      	movs	r1, #0
 2dc:	0028      	movs	r0, r5
 2de:	47b0      	blx	r6
		i = (i + 1) % 1024;
 2e0:	8823      	ldrh	r3, [r4, #0]
 2e2:	3301      	adds	r3, #1
 2e4:	059b      	lsls	r3, r3, #22
 2e6:	0d9b      	lsrs	r3, r3, #22
 2e8:	8023      	strh	r3, [r4, #0]
 2ea:	e7f4      	b.n	2d6 <DAC_0_example+0x1a>
 2ec:	2000001c 	.word	0x2000001c
 2f0:	0000033d 	.word	0x0000033d
 2f4:	00000379 	.word	0x00000379

000002f8 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
 2f8:	b570      	push	{r4, r5, r6, lr}
 2fa:	0005      	movs	r5, r0
 2fc:	000c      	movs	r4, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
 2fe:	2800      	cmp	r0, #0
 300:	d013      	beq.n	32a <dac_sync_init+0x32>
 302:	0008      	movs	r0, r1
 304:	1e43      	subs	r3, r0, #1
 306:	4198      	sbcs	r0, r3
 308:	b2c0      	uxtb	r0, r0
 30a:	2232      	movs	r2, #50	; 0x32
 30c:	4908      	ldr	r1, [pc, #32]	; (330 <dac_sync_init+0x38>)
 30e:	4b09      	ldr	r3, [pc, #36]	; (334 <dac_sync_init+0x3c>)
 310:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
 312:	0021      	movs	r1, r4
 314:	0028      	movs	r0, r5
 316:	4b08      	ldr	r3, [pc, #32]	; (338 <dac_sync_init+0x40>)
 318:	4798      	blx	r3
	if (rc) {
 31a:	2800      	cmp	r0, #0
 31c:	d104      	bne.n	328 <dac_sync_init+0x30>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
 31e:	2300      	movs	r3, #0
 320:	606b      	str	r3, [r5, #4]
		descr->sel_ch[i].length = 0;
 322:	60ab      	str	r3, [r5, #8]
		descr->sel_ch[i].buffer = NULL;
 324:	60eb      	str	r3, [r5, #12]
		descr->sel_ch[i].length = 0;
 326:	612b      	str	r3, [r5, #16]
	}

	return ERR_NONE;
}
 328:	bd70      	pop	{r4, r5, r6, pc}
 32a:	2000      	movs	r0, #0
 32c:	e7ed      	b.n	30a <dac_sync_init+0x12>
 32e:	46c0      	nop			; (mov r8, r8)
 330:	000006a8 	.word	0x000006a8
 334:	0000040d 	.word	0x0000040d
 338:	000004e1 	.word	0x000004e1

0000033c <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
 33c:	b570      	push	{r4, r5, r6, lr}
 33e:	0004      	movs	r4, r0
 340:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
 342:	2800      	cmp	r0, #0
 344:	d010      	beq.n	368 <dac_sync_enable_channel+0x2c>
 346:	2000      	movs	r0, #0
 348:	2301      	movs	r3, #1
 34a:	428b      	cmp	r3, r1
 34c:	4140      	adcs	r0, r0
 34e:	b2c0      	uxtb	r0, r0
 350:	2301      	movs	r3, #1
 352:	4018      	ands	r0, r3
 354:	2252      	movs	r2, #82	; 0x52
 356:	4905      	ldr	r1, [pc, #20]	; (36c <dac_sync_enable_channel+0x30>)
 358:	4b05      	ldr	r3, [pc, #20]	; (370 <dac_sync_enable_channel+0x34>)
 35a:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
 35c:	0029      	movs	r1, r5
 35e:	0020      	movs	r0, r4
 360:	4b04      	ldr	r3, [pc, #16]	; (374 <dac_sync_enable_channel+0x38>)
 362:	4798      	blx	r3

	return ERR_NONE;
}
 364:	2000      	movs	r0, #0
 366:	bd70      	pop	{r4, r5, r6, pc}
 368:	2000      	movs	r0, #0
 36a:	e7f1      	b.n	350 <dac_sync_enable_channel+0x14>
 36c:	000006a8 	.word	0x000006a8
 370:	0000040d 	.word	0x0000040d
 374:	0000050d 	.word	0x0000050d

00000378 <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
 378:	b5f0      	push	{r4, r5, r6, r7, lr}
 37a:	46ce      	mov	lr, r9
 37c:	b500      	push	{lr}
 37e:	b082      	sub	sp, #8
 380:	0007      	movs	r7, r0
 382:	000d      	movs	r5, r1
 384:	4691      	mov	r9, r2
 386:	001e      	movs	r6, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
 388:	2800      	cmp	r0, #0
 38a:	d02d      	beq.n	3e8 <dac_sync_write+0x70>
 38c:	2000      	movs	r0, #0
 38e:	2901      	cmp	r1, #1
 390:	d924      	bls.n	3dc <dac_sync_write+0x64>
 392:	226a      	movs	r2, #106	; 0x6a
 394:	4919      	ldr	r1, [pc, #100]	; (3fc <dac_sync_write+0x84>)
 396:	4b1a      	ldr	r3, [pc, #104]	; (400 <dac_sync_write+0x88>)
 398:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
 39a:	9701      	str	r7, [sp, #4]
 39c:	0029      	movs	r1, r5
 39e:	0038      	movs	r0, r7
 3a0:	4b18      	ldr	r3, [pc, #96]	; (404 <dac_sync_write+0x8c>)
 3a2:	4798      	blx	r3
 3a4:	2800      	cmp	r0, #0
 3a6:	d023      	beq.n	3f0 <dac_sync_write+0x78>
 3a8:	00ec      	lsls	r4, r5, #3
 3aa:	193c      	adds	r4, r7, r4
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
 3ac:	464b      	mov	r3, r9
 3ae:	6063      	str	r3, [r4, #4]
	descr->sel_ch[ch].length = length;
 3b0:	60a6      	str	r6, [r4, #8]

	while (descr->sel_ch[ch].length) {
 3b2:	2e00      	cmp	r6, #0
 3b4:	d01f      	beq.n	3f6 <dac_sync_write+0x7e>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
 3b6:	4f14      	ldr	r7, [pc, #80]	; (408 <dac_sync_write+0x90>)
 3b8:	6863      	ldr	r3, [r4, #4]
 3ba:	8819      	ldrh	r1, [r3, #0]
 3bc:	002a      	movs	r2, r5
 3be:	9801      	ldr	r0, [sp, #4]
 3c0:	47b8      	blx	r7
		descr->sel_ch[ch].buffer++;
 3c2:	6863      	ldr	r3, [r4, #4]
 3c4:	3302      	adds	r3, #2
 3c6:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
 3c8:	68a3      	ldr	r3, [r4, #8]
 3ca:	3b01      	subs	r3, #1
 3cc:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
 3ce:	2b00      	cmp	r3, #0
 3d0:	d1f2      	bne.n	3b8 <dac_sync_write+0x40>
	}

	return ERR_NONE;
 3d2:	2000      	movs	r0, #0
}
 3d4:	b002      	add	sp, #8
 3d6:	bc04      	pop	{r2}
 3d8:	4691      	mov	r9, r2
 3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
 3dc:	2a00      	cmp	r2, #0
 3de:	d005      	beq.n	3ec <dac_sync_write+0x74>
 3e0:	0030      	movs	r0, r6
 3e2:	1e43      	subs	r3, r0, #1
 3e4:	4198      	sbcs	r0, r3
 3e6:	e7d4      	b.n	392 <dac_sync_write+0x1a>
 3e8:	2000      	movs	r0, #0
 3ea:	e7d2      	b.n	392 <dac_sync_write+0x1a>
 3ec:	2000      	movs	r0, #0
 3ee:	e7d0      	b.n	392 <dac_sync_write+0x1a>
		return ERR_NOT_READY;
 3f0:	201d      	movs	r0, #29
 3f2:	4240      	negs	r0, r0
 3f4:	e7ee      	b.n	3d4 <dac_sync_write+0x5c>
	return ERR_NONE;
 3f6:	2000      	movs	r0, #0
 3f8:	e7ec      	b.n	3d4 <dac_sync_write+0x5c>
 3fa:	46c0      	nop			; (mov r8, r8)
 3fc:	000006a8 	.word	0x000006a8
 400:	0000040d 	.word	0x0000040d
 404:	00000563 	.word	0x00000563
 408:	00000585 	.word	0x00000585

0000040c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 40c:	2800      	cmp	r0, #0
 40e:	d100      	bne.n	412 <assert+0x6>
		__asm("BKPT #0");
 410:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 412:	4770      	bx	lr

00000414 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 414:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 416:	4b09      	ldr	r3, [pc, #36]	; (43c <_init_chip+0x28>)
 418:	685a      	ldr	r2, [r3, #4]
 41a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
 41c:	2002      	movs	r0, #2
 41e:	4b08      	ldr	r3, [pc, #32]	; (440 <_init_chip+0x2c>)
 420:	4798      	blx	r3

	_osc32kctrl_init_sources();
 422:	4b08      	ldr	r3, [pc, #32]	; (444 <_init_chip+0x30>)
 424:	4798      	blx	r3
	_oscctrl_init_sources();
 426:	4b08      	ldr	r3, [pc, #32]	; (448 <_init_chip+0x34>)
 428:	4798      	blx	r3
	_mclk_init();
 42a:	4b08      	ldr	r3, [pc, #32]	; (44c <_init_chip+0x38>)
 42c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 42e:	4b08      	ldr	r3, [pc, #32]	; (450 <_init_chip+0x3c>)
 430:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 432:	20ff      	movs	r0, #255	; 0xff
 434:	4b07      	ldr	r3, [pc, #28]	; (454 <_init_chip+0x40>)
 436:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 438:	bd10      	pop	{r4, pc}
 43a:	46c0      	nop			; (mov r8, r8)
 43c:	41004000 	.word	0x41004000
 440:	00000623 	.word	0x00000623
 444:	000005d1 	.word	0x000005d1
 448:	000005e9 	.word	0x000005e9
 44c:	000005bd 	.word	0x000005bd
 450:	00000621 	.word	0x00000621
 454:	00000599 	.word	0x00000599

00000458 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
 458:	b510      	push	{r4, lr}
 45a:	0004      	movs	r4, r0
	ASSERT(hw == DAC);
 45c:	4b1d      	ldr	r3, [pc, #116]	; (4d4 <_dac_init+0x7c>)
 45e:	18c0      	adds	r0, r0, r3
 460:	4243      	negs	r3, r0
 462:	4158      	adcs	r0, r3
 464:	b2c0      	uxtb	r0, r0
 466:	22dc      	movs	r2, #220	; 0xdc
 468:	491b      	ldr	r1, [pc, #108]	; (4d8 <_dac_init+0x80>)
 46a:	4b1c      	ldr	r3, [pc, #112]	; (4dc <_dac_init+0x84>)
 46c:	4798      	blx	r3
	};
}

static inline bool hri_dac_is_syncing(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	return ((Dac *)hw)->SYNCBUSY.reg & reg;
 46e:	68a3      	ldr	r3, [r4, #8]

	if (!hri_dac_is_syncing(hw, DAC_SYNCBUSY_SWRST)) {
 470:	07db      	lsls	r3, r3, #31
 472:	d418      	bmi.n	4a6 <_dac_init+0x4e>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 474:	2203      	movs	r2, #3
 476:	68a3      	ldr	r3, [r4, #8]
 478:	421a      	tst	r2, r3
 47a:	d1fc      	bne.n	476 <_dac_init+0x1e>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
 47c:	7823      	ldrb	r3, [r4, #0]
		if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
 47e:	079b      	lsls	r3, r3, #30
 480:	d50b      	bpl.n	49a <_dac_init+0x42>
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
 482:	7823      	ldrb	r3, [r4, #0]
 484:	2202      	movs	r2, #2
 486:	4393      	bics	r3, r2
 488:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 48a:	3201      	adds	r2, #1
 48c:	68a3      	ldr	r3, [r4, #8]
 48e:	421a      	tst	r2, r3
 490:	d1fc      	bne.n	48c <_dac_init+0x34>
 492:	2202      	movs	r2, #2
 494:	68a3      	ldr	r3, [r4, #8]
 496:	421a      	tst	r2, r3
 498:	d1fc      	bne.n	494 <_dac_init+0x3c>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
 49a:	2301      	movs	r3, #1
 49c:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 49e:	2203      	movs	r2, #3
 4a0:	68a3      	ldr	r3, [r4, #8]
 4a2:	421a      	tst	r2, r3
 4a4:	d1fc      	bne.n	4a0 <_dac_init+0x48>
 4a6:	2201      	movs	r2, #1
 4a8:	68a3      	ldr	r3, [r4, #8]
 4aa:	421a      	tst	r2, r3
 4ac:	d1fc      	bne.n	4a8 <_dac_init+0x50>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
 4ae:	2300      	movs	r3, #0
 4b0:	7063      	strb	r3, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
 4b2:	70a3      	strb	r3, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
 4b4:	81a3      	strh	r3, [r4, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4b6:	2202      	movs	r2, #2
 4b8:	68a3      	ldr	r3, [r4, #8]
 4ba:	421a      	tst	r2, r3
 4bc:	d1fc      	bne.n	4b8 <_dac_init+0x60>
	((Dac *)hw)->DACCTRL[index].reg = data;
 4be:	2300      	movs	r3, #0
 4c0:	81e3      	strh	r3, [r4, #14]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4c2:	2202      	movs	r2, #2
 4c4:	68a3      	ldr	r3, [r4, #8]
 4c6:	421a      	tst	r2, r3
 4c8:	d1fc      	bne.n	4c4 <_dac_init+0x6c>
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
 4ca:	2301      	movs	r3, #1
 4cc:	7623      	strb	r3, [r4, #24]
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
}
 4ce:	2000      	movs	r0, #0
 4d0:	bd10      	pop	{r4, pc}
 4d2:	46c0      	nop			; (mov r8, r8)
 4d4:	bdffd000 	.word	0xbdffd000
 4d8:	000006c4 	.word	0x000006c4
 4dc:	0000040d 	.word	0x0000040d

000004e0 <_dac_sync_init>:
{
 4e0:	b570      	push	{r4, r5, r6, lr}
 4e2:	0005      	movs	r5, r0
 4e4:	000c      	movs	r4, r1
	ASSERT(device);
 4e6:	1e43      	subs	r3, r0, #1
 4e8:	4198      	sbcs	r0, r3
 4ea:	b2c0      	uxtb	r0, r0
 4ec:	2252      	movs	r2, #82	; 0x52
 4ee:	4904      	ldr	r1, [pc, #16]	; (500 <_dac_sync_init+0x20>)
 4f0:	4b04      	ldr	r3, [pc, #16]	; (504 <_dac_sync_init+0x24>)
 4f2:	4798      	blx	r3
	device->hw = hw;
 4f4:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
 4f6:	0020      	movs	r0, r4
 4f8:	4b03      	ldr	r3, [pc, #12]	; (508 <_dac_sync_init+0x28>)
 4fa:	4798      	blx	r3
}
 4fc:	bd70      	pop	{r4, r5, r6, pc}
 4fe:	46c0      	nop			; (mov r8, r8)
 500:	000006c4 	.word	0x000006c4
 504:	0000040d 	.word	0x0000040d
 508:	00000459 	.word	0x00000459

0000050c <_dac_sync_enable_channel>:
{
 50c:	b510      	push	{r4, lr}
 * \param[in] hw The pointer to hardware instance
 * \param[in] ch The channel to enable
 */
static inline void _dac_enable_channel(void *const hw, const uint8_t ch)
{
	if (ch <= 1) {
 50e:	2901      	cmp	r1, #1
 510:	d900      	bls.n	514 <_dac_sync_enable_channel+0x8>
}
 512:	bd10      	pop	{r4, pc}
	_dac_enable_channel(device->hw, ch);
 514:	6803      	ldr	r3, [r0, #0]
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
 516:	781a      	ldrb	r2, [r3, #0]
 518:	2002      	movs	r0, #2
 51a:	4382      	bics	r2, r0
 51c:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 51e:	3001      	adds	r0, #1
 520:	689a      	ldr	r2, [r3, #8]
 522:	4210      	tst	r0, r2
 524:	d1fc      	bne.n	520 <_dac_sync_enable_channel+0x14>
 526:	004a      	lsls	r2, r1, #1
 528:	189a      	adds	r2, r3, r2
	((Dac *)hw)->DACCTRL[index].reg |= DAC_DACCTRL_ENABLE;
 52a:	8990      	ldrh	r0, [r2, #12]
 52c:	2402      	movs	r4, #2
 52e:	4320      	orrs	r0, r4
 530:	8190      	strh	r0, [r2, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 532:	2002      	movs	r0, #2
 534:	689a      	ldr	r2, [r3, #8]
 536:	4210      	tst	r0, r2
 538:	d1fc      	bne.n	534 <_dac_sync_enable_channel+0x28>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
 53a:	781a      	ldrb	r2, [r3, #0]
 53c:	2002      	movs	r0, #2
 53e:	4302      	orrs	r2, r0
 540:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 542:	3001      	adds	r0, #1
 544:	689a      	ldr	r2, [r3, #8]
 546:	4210      	tst	r0, r2
 548:	d1fc      	bne.n	544 <_dac_sync_enable_channel+0x38>
		hri_dac_clear_CTRLA_ENABLE_bit(hw);
		hri_dac_set_DACCTRL_ENABLE_bit(hw, ch);
		hri_dac_set_CTRLA_ENABLE_bit(hw);

		if (0 == ch) {
 54a:	2900      	cmp	r1, #0
 54c:	d104      	bne.n	558 <_dac_sync_enable_channel+0x4c>
			while (!hri_dac_get_STATUS_READY0_bit(hw))
 54e:	3101      	adds	r1, #1
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY0) >> DAC_STATUS_READY0_Pos;
 550:	79da      	ldrb	r2, [r3, #7]
 552:	420a      	tst	r2, r1
 554:	d0fc      	beq.n	550 <_dac_sync_enable_channel+0x44>
 556:	e7dc      	b.n	512 <_dac_sync_enable_channel+0x6>
				;
		} else {
			while (!hri_dac_get_STATUS_READY1_bit(hw))
 558:	2102      	movs	r1, #2
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY1) >> DAC_STATUS_READY1_Pos;
 55a:	79da      	ldrb	r2, [r3, #7]
 55c:	420a      	tst	r2, r1
 55e:	d0fc      	beq.n	55a <_dac_sync_enable_channel+0x4e>
 560:	e7d7      	b.n	512 <_dac_sync_enable_channel+0x6>

00000562 <_dac_sync_is_channel_enable>:
{
	if (ch <= 1) {
		return hri_dac_get_DACCTRL_ENABLE_bit(hw, ch);
	}

	return false;
 562:	2300      	movs	r3, #0
	if (ch <= 1) {
 564:	2901      	cmp	r1, #1
 566:	d901      	bls.n	56c <_dac_sync_is_channel_enable+0xa>
}
 568:	0018      	movs	r0, r3
 56a:	4770      	bx	lr
	return _dac_is_channel_enabled(device->hw, ch);
 56c:	6802      	ldr	r2, [r0, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 56e:	2002      	movs	r0, #2
 570:	6893      	ldr	r3, [r2, #8]
 572:	4218      	tst	r0, r3
 574:	d1fc      	bne.n	570 <_dac_sync_is_channel_enable+0xe>
	tmp = ((Dac *)hw)->DACCTRL[index].reg;
 576:	3104      	adds	r1, #4
 578:	0049      	lsls	r1, r1, #1
 57a:	1852      	adds	r2, r2, r1
 57c:	8893      	ldrh	r3, [r2, #4]
	return (bool)tmp;
 57e:	079b      	lsls	r3, r3, #30
 580:	0fdb      	lsrs	r3, r3, #31
 582:	e7f1      	b.n	568 <_dac_sync_is_channel_enable+0x6>

00000584 <_dac_sync_write_data>:
	hri_dac_write_DATA_reg(device->hw, ch, data);
 584:	6800      	ldr	r0, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, uint8_t index, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA[index].reg = data;
 586:	3208      	adds	r2, #8
 588:	0052      	lsls	r2, r2, #1
 58a:	5211      	strh	r1, [r2, r0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 58c:	220c      	movs	r2, #12
 58e:	6883      	ldr	r3, [r0, #8]
 590:	421a      	tst	r2, r3
 592:	d1fc      	bne.n	58e <_dac_sync_write_data+0xa>
}
 594:	4770      	bx	lr
	...

00000598 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 598:	07c3      	lsls	r3, r0, #31
 59a:	d507      	bpl.n	5ac <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 59c:	4a04      	ldr	r2, [pc, #16]	; (5b0 <_gclk_init_generators_by_fref+0x18>)
 59e:	4b05      	ldr	r3, [pc, #20]	; (5b4 <_gclk_init_generators_by_fref+0x1c>)
 5a0:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 5a2:	0019      	movs	r1, r3
 5a4:	4a04      	ldr	r2, [pc, #16]	; (5b8 <_gclk_init_generators_by_fref+0x20>)
 5a6:	684b      	ldr	r3, [r1, #4]
 5a8:	4213      	tst	r3, r2
 5aa:	d1fc      	bne.n	5a6 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 5ac:	4770      	bx	lr
 5ae:	46c0      	nop			; (mov r8, r8)
 5b0:	00010106 	.word	0x00010106
 5b4:	40001800 	.word	0x40001800
 5b8:	000007fd 	.word	0x000007fd

000005bc <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
 5bc:	4b03      	ldr	r3, [pc, #12]	; (5cc <_mclk_init+0x10>)
 5be:	2208      	movs	r2, #8
 5c0:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
 5c2:	3a04      	subs	r2, #4
 5c4:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
 5c6:	3a03      	subs	r2, #3
 5c8:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 5ca:	4770      	bx	lr
 5cc:	40000400 	.word	0x40000400

000005d0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 5d0:	4b04      	ldr	r3, [pc, #16]	; (5e4 <_osc32kctrl_init_sources+0x14>)
 5d2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 5d4:	21f8      	movs	r1, #248	; 0xf8
 5d6:	0149      	lsls	r1, r1, #5
 5d8:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 5da:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 5dc:	2201      	movs	r2, #1
 5de:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 5e0:	4770      	bx	lr
 5e2:	46c0      	nop			; (mov r8, r8)
 5e4:	40001000 	.word	0x40001000

000005e8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 5e8:	2282      	movs	r2, #130	; 0x82
 5ea:	4b0c      	ldr	r3, [pc, #48]	; (61c <_oscctrl_init_sources+0x34>)
 5ec:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 5ee:	0018      	movs	r0, r3
 5f0:	2138      	movs	r1, #56	; 0x38
 5f2:	3a80      	subs	r2, #128	; 0x80
 5f4:	5c43      	ldrb	r3, [r0, r1]
 5f6:	4213      	tst	r3, r2
 5f8:	d1fc      	bne.n	5f4 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 5fa:	4908      	ldr	r1, [pc, #32]	; (61c <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 5fc:	2210      	movs	r2, #16
 5fe:	68cb      	ldr	r3, [r1, #12]
 600:	421a      	tst	r2, r3
 602:	d0fc      	beq.n	5fe <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
 604:	4a05      	ldr	r2, [pc, #20]	; (61c <_oscctrl_init_sources+0x34>)
 606:	7d13      	ldrb	r3, [r2, #20]
 608:	2180      	movs	r1, #128	; 0x80
 60a:	430b      	orrs	r3, r1
 60c:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 60e:	0010      	movs	r0, r2
 610:	3948      	subs	r1, #72	; 0x48
 612:	220e      	movs	r2, #14
 614:	5c43      	ldrb	r3, [r0, r1]
 616:	4213      	tst	r3, r2
 618:	d1fc      	bne.n	614 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 61a:	4770      	bx	lr
 61c:	40000c00 	.word	0x40000c00

00000620 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 620:	4770      	bx	lr

00000622 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 622:	2380      	movs	r3, #128	; 0x80
 624:	05db      	lsls	r3, r3, #23
 626:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 628:	2203      	movs	r2, #3
 62a:	4013      	ands	r3, r2
 62c:	4298      	cmp	r0, r3
 62e:	d00c      	beq.n	64a <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
 630:	2280      	movs	r2, #128	; 0x80
 632:	05d2      	lsls	r2, r2, #23
 634:	23ff      	movs	r3, #255	; 0xff
 636:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 638:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 63a:	2103      	movs	r1, #3
 63c:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
 63e:	4008      	ands	r0, r1
 640:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
 642:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 644:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 646:	2b00      	cmp	r3, #0
 648:	d0fc      	beq.n	644 <_set_performance_level+0x22>
			;
	}
}
 64a:	4770      	bx	lr

0000064c <main>:
#include <atmel_start.h>

int main(void)
{
 64c:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 64e:	4b02      	ldr	r3, [pc, #8]	; (658 <main+0xc>)
 650:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		DAC_0_example();
 652:	4c02      	ldr	r4, [pc, #8]	; (65c <main+0x10>)
 654:	47a0      	blx	r4
 656:	e7fd      	b.n	654 <main+0x8>
 658:	00000115 	.word	0x00000115
 65c:	000002bd 	.word	0x000002bd

00000660 <__libc_init_array>:
 660:	b570      	push	{r4, r5, r6, lr}
 662:	2600      	movs	r6, #0
 664:	4d0c      	ldr	r5, [pc, #48]	; (698 <__libc_init_array+0x38>)
 666:	4c0d      	ldr	r4, [pc, #52]	; (69c <__libc_init_array+0x3c>)
 668:	1b64      	subs	r4, r4, r5
 66a:	10a4      	asrs	r4, r4, #2
 66c:	42a6      	cmp	r6, r4
 66e:	d109      	bne.n	684 <__libc_init_array+0x24>
 670:	2600      	movs	r6, #0
 672:	f000 f833 	bl	6dc <_init>
 676:	4d0a      	ldr	r5, [pc, #40]	; (6a0 <__libc_init_array+0x40>)
 678:	4c0a      	ldr	r4, [pc, #40]	; (6a4 <__libc_init_array+0x44>)
 67a:	1b64      	subs	r4, r4, r5
 67c:	10a4      	asrs	r4, r4, #2
 67e:	42a6      	cmp	r6, r4
 680:	d105      	bne.n	68e <__libc_init_array+0x2e>
 682:	bd70      	pop	{r4, r5, r6, pc}
 684:	00b3      	lsls	r3, r6, #2
 686:	58eb      	ldr	r3, [r5, r3]
 688:	4798      	blx	r3
 68a:	3601      	adds	r6, #1
 68c:	e7ee      	b.n	66c <__libc_init_array+0xc>
 68e:	00b3      	lsls	r3, r6, #2
 690:	58eb      	ldr	r3, [r5, r3]
 692:	4798      	blx	r3
 694:	3601      	adds	r6, #1
 696:	e7f2      	b.n	67e <__libc_init_array+0x1e>
 698:	000006e8 	.word	0x000006e8
 69c:	000006e8 	.word	0x000006e8
 6a0:	000006e8 	.word	0x000006e8
 6a4:	000006ec 	.word	0x000006ec
 6a8:	682f2e2e 	.word	0x682f2e2e
 6ac:	732f6c61 	.word	0x732f6c61
 6b0:	682f6372 	.word	0x682f6372
 6b4:	645f6c61 	.word	0x645f6c61
 6b8:	735f6361 	.word	0x735f6361
 6bc:	2e636e79 	.word	0x2e636e79
 6c0:	00000063 	.word	0x00000063
 6c4:	682f2e2e 	.word	0x682f2e2e
 6c8:	642f6c70 	.word	0x642f6c70
 6cc:	682f6361 	.word	0x682f6361
 6d0:	645f6c70 	.word	0x645f6c70
 6d4:	632e6361 	.word	0x632e6361
 6d8:	00000000 	.word	0x00000000

000006dc <_init>:
 6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 6de:	46c0      	nop			; (mov r8, r8)
 6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 6e2:	bc08      	pop	{r3}
 6e4:	469e      	mov	lr, r3
 6e6:	4770      	bx	lr

000006e8 <__init_array_start>:
 6e8:	000000dd 	.word	0x000000dd

000006ec <_fini>:
 6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 6ee:	46c0      	nop			; (mov r8, r8)
 6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 6f2:	bc08      	pop	{r3}
 6f4:	469e      	mov	lr, r3
 6f6:	4770      	bx	lr

000006f8 <__fini_array_start>:
 6f8:	000000b5 	.word	0x000000b5
