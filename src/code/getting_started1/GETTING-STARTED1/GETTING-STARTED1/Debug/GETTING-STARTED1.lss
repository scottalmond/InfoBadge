
GETTING-STARTED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d2c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00003d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000201dc  2**0
                  CONTENTS
  3 .bss          00000118  200001dc  00003f08  000201dc  2**2
                  ALLOC
  4 .stack        00002004  200002f4  00004020  000201dc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002807e  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004170  00000000  00000000  000482db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004a91  00000000  00000000  0004c44b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000588  00000000  00000000  00050edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000670  00000000  00000000  00051464  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f925  00000000  00000000  00051ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e758  00000000  00000000  000713f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009db6a  00000000  00000000  0007fb51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000019f8  00000000  00000000  0011d6bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 22 00 20 09 14 00 00 05 14 00 00 05 14 00 00     .". ............
	...
      2c:	05 14 00 00 00 00 00 00 00 00 00 00 05 14 00 00     ................
      3c:	05 14 00 00 05 14 00 00 05 14 00 00 05 14 00 00     ................
      4c:	91 03 00 00 05 14 00 00 05 14 00 00 05 14 00 00     ................
      5c:	05 14 00 00 89 08 00 00 99 08 00 00 a9 08 00 00     ................
      6c:	b9 08 00 00 c9 08 00 00 d9 08 00 00 05 14 00 00     ................
      7c:	05 14 00 00 05 14 00 00 b5 13 00 00 c5 13 00 00     ................
      8c:	d5 13 00 00 e5 13 00 00 f5 13 00 00 05 14 00 00     ................
      9c:	05 14 00 00 05 14 00 00 05 14 00 00 05 14 00 00     ................
      ac:	05 14 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00003d2c 	.word	0x00003d2c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00003d2c 	.word	0x00003d2c
     10c:	00003d2c 	.word	0x00003d2c
     110:	00000000 	.word	0x00000000

00000114 <print_home>:
	printf(buff);
	printf("DONE\r\n");*/
}

void print_home(void)
{
     114:	b510      	push	{r4, lr}
	printf("-- Help Menu --\r\n");
     116:	4807      	ldr	r0, [pc, #28]	; (134 <print_home+0x20>)
     118:	4c07      	ldr	r4, [pc, #28]	; (138 <print_home+0x24>)
     11a:	47a0      	blx	r4
	printf("Note: Terminate user commands with new line character\r\n");
     11c:	4807      	ldr	r0, [pc, #28]	; (13c <print_home+0x28>)
     11e:	47a0      	blx	r4
	printf("q - Return to main menu at any time\r\n");
     120:	4807      	ldr	r0, [pc, #28]	; (140 <print_home+0x2c>)
     122:	47a0      	blx	r4
	printf("h - Print this menu\r\n");
     124:	4807      	ldr	r0, [pc, #28]	; (144 <print_home+0x30>)
     126:	47a0      	blx	r4
	//what is this device, where more info can be found
	printf("i - I2C command\r\n"); //followup on read/write, [SERCOM], address, value
     128:	4807      	ldr	r0, [pc, #28]	; (148 <print_home+0x34>)
     12a:	47a0      	blx	r4
	printf("\r\n");
     12c:	4807      	ldr	r0, [pc, #28]	; (14c <print_home+0x38>)
     12e:	47a0      	blx	r4
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	000039e4 	.word	0x000039e4
     138:	000019e5 	.word	0x000019e5
     13c:	000039f8 	.word	0x000039f8
     140:	00003a30 	.word	0x00003a30
     144:	00003a58 	.word	0x00003a58
     148:	00003a70 	.word	0x00003a70
     14c:	00003a84 	.word	0x00003a84

00000150 <prompt_response>:

//return true if user input is 'q'
bool prompt_response(char* prompt,char* response,int response_length)
{
     150:	b570      	push	{r4, r5, r6, lr}
     152:	b082      	sub	sp, #8
     154:	000c      	movs	r4, r1
     156:	0015      	movs	r5, r2
	char temp[8];
	printf(prompt);
     158:	4e0b      	ldr	r6, [pc, #44]	; (188 <prompt_response+0x38>)
     15a:	47b0      	blx	r6
	sprintf(temp,"%%%is",response_length-1); // parameterized "%63s"
     15c:	1e6a      	subs	r2, r5, #1
     15e:	490b      	ldr	r1, [pc, #44]	; (18c <prompt_response+0x3c>)
     160:	4668      	mov	r0, sp
     162:	4b0b      	ldr	r3, [pc, #44]	; (190 <prompt_response+0x40>)
     164:	4798      	blx	r3
	scanf(temp,response);
     166:	0021      	movs	r1, r4
     168:	4668      	mov	r0, sp
     16a:	4b0a      	ldr	r3, [pc, #40]	; (194 <prompt_response+0x44>)
     16c:	4798      	blx	r3
	printf("%s\r\n",response);
     16e:	0021      	movs	r1, r4
     170:	4809      	ldr	r0, [pc, #36]	; (198 <prompt_response+0x48>)
     172:	47b0      	blx	r6
	return response[0]=='q' || response[0]=='\0';
     174:	7820      	ldrb	r0, [r4, #0]
     176:	2871      	cmp	r0, #113	; 0x71
     178:	d004      	beq.n	184 <prompt_response+0x34>
     17a:	4243      	negs	r3, r0
     17c:	4158      	adcs	r0, r3
     17e:	b2c0      	uxtb	r0, r0
}
     180:	b002      	add	sp, #8
     182:	bd70      	pop	{r4, r5, r6, pc}
     184:	2001      	movs	r0, #1
     186:	e7fb      	b.n	180 <prompt_response+0x30>
     188:	000018f1 	.word	0x000018f1
     18c:	00003af4 	.word	0x00003af4
     190:	00001b99 	.word	0x00001b99
     194:	000019f9 	.word	0x000019f9
     198:	00003afc 	.word	0x00003afc

0000019c <prompt_menu>:

void prompt_menu(void)
{//pass in user prompt
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	b095      	sub	sp, #84	; 0x54
     1a0:	af00      	add	r7, sp, #0
     1a2:	466b      	mov	r3, sp
     1a4:	603b      	str	r3, [r7, #0]
	//no user input: print help menu
	//max characters to read (buffer overflow), timeout
	const int buff_length=64;
	char buff[buff_length];
	bool is_error=false;
     1a6:	2600      	movs	r6, #0
     1a8:	e039      	b.n	21e <prompt_menu+0x82>
	do{
		if(prompt_response("Main menu >> user input [h/.../q]: ",buff,buff_length)) return;
		switch(buff[0])
		{
			case 'h': print_home(); break;
     1aa:	4b29      	ldr	r3, [pc, #164]	; (250 <prompt_menu+0xb4>)
     1ac:	4798      	blx	r3
			} break;
			default:
				is_error=true;
			break;
		}
		if(is_error) printf("Invalid user input\r\n");
     1ae:	2e00      	cmp	r6, #0
     1b0:	d132      	bne.n	218 <prompt_menu+0x7c>
     1b2:	683b      	ldr	r3, [r7, #0]
     1b4:	469d      	mov	sp, r3
	/*switch(buff[0])
	{
		case 'h': print_home(); break;
		
	}*/
}
     1b6:	46bd      	mov	sp, r7
     1b8:	b015      	add	sp, #84	; 0x54
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if(prompt_response("I2C >> Is read or write? [r/w/q]: ",buff,buff_length)) break;
     1bc:	4d25      	ldr	r5, [pc, #148]	; (254 <prompt_menu+0xb8>)
     1be:	e00d      	b.n	1dc <prompt_menu+0x40>
					if(is_read) strncpy(write_str, "read", sizeof(write_str));
     1c0:	3a02      	subs	r2, #2
     1c2:	4925      	ldr	r1, [pc, #148]	; (258 <prompt_menu+0xbc>)
     1c4:	4660      	mov	r0, ip
     1c6:	4b25      	ldr	r3, [pc, #148]	; (25c <prompt_menu+0xc0>)
     1c8:	4798      	blx	r3
						printf("%s\r\n",write_str);
     1ca:	2308      	movs	r3, #8
     1cc:	18f9      	adds	r1, r7, r3
     1ce:	4824      	ldr	r0, [pc, #144]	; (260 <prompt_menu+0xc4>)
     1d0:	4b24      	ldr	r3, [pc, #144]	; (264 <prompt_menu+0xc8>)
     1d2:	4798      	blx	r3
				}while(!is_write&&!is_read);
     1d4:	2c77      	cmp	r4, #119	; 0x77
     1d6:	d0ea      	beq.n	1ae <prompt_menu+0x12>
     1d8:	2c72      	cmp	r4, #114	; 0x72
     1da:	d0e8      	beq.n	1ae <prompt_menu+0x12>
					if(prompt_response("I2C >> Is read or write? [r/w/q]: ",buff,buff_length)) break;
     1dc:	2240      	movs	r2, #64	; 0x40
     1de:	2308      	movs	r3, #8
     1e0:	2108      	movs	r1, #8
     1e2:	1879      	adds	r1, r7, r1
     1e4:	18c9      	adds	r1, r1, r3
     1e6:	4820      	ldr	r0, [pc, #128]	; (268 <prompt_menu+0xcc>)
     1e8:	47a8      	blx	r5
     1ea:	2800      	cmp	r0, #0
     1ec:	d1df      	bne.n	1ae <prompt_menu+0x12>
					is_write=buff[0]=='w';
     1ee:	2308      	movs	r3, #8
     1f0:	2208      	movs	r2, #8
     1f2:	4694      	mov	ip, r2
     1f4:	44bc      	add	ip, r7
     1f6:	4463      	add	r3, ip
     1f8:	781c      	ldrb	r4, [r3, #0]
					unsigned char write_str[]="write";
     1fa:	4b1c      	ldr	r3, [pc, #112]	; (26c <prompt_menu+0xd0>)
     1fc:	681b      	ldr	r3, [r3, #0]
     1fe:	607b      	str	r3, [r7, #4]
     200:	60bb      	str	r3, [r7, #8]
     202:	4b1a      	ldr	r3, [pc, #104]	; (26c <prompt_menu+0xd0>)
     204:	889b      	ldrh	r3, [r3, #4]
     206:	81bb      	strh	r3, [r7, #12]
					if(is_read) strncpy(write_str, "read", sizeof(write_str));
     208:	2c72      	cmp	r4, #114	; 0x72
     20a:	d0d9      	beq.n	1c0 <prompt_menu+0x24>
					if(is_write||is_read)
     20c:	2c77      	cmp	r4, #119	; 0x77
     20e:	d0dc      	beq.n	1ca <prompt_menu+0x2e>
					}else printf("Invalid user input\r\n");
     210:	4817      	ldr	r0, [pc, #92]	; (270 <prompt_menu+0xd4>)
     212:	4b18      	ldr	r3, [pc, #96]	; (274 <prompt_menu+0xd8>)
     214:	4798      	blx	r3
     216:	e7dd      	b.n	1d4 <prompt_menu+0x38>
		if(is_error) printf("Invalid user input\r\n");
     218:	4815      	ldr	r0, [pc, #84]	; (270 <prompt_menu+0xd4>)
     21a:	4b16      	ldr	r3, [pc, #88]	; (274 <prompt_menu+0xd8>)
     21c:	4798      	blx	r3
		if(prompt_response("Main menu >> user input [h/.../q]: ",buff,buff_length)) return;
     21e:	2240      	movs	r2, #64	; 0x40
     220:	2308      	movs	r3, #8
     222:	2108      	movs	r1, #8
     224:	1879      	adds	r1, r7, r1
     226:	18c9      	adds	r1, r1, r3
     228:	4813      	ldr	r0, [pc, #76]	; (278 <prompt_menu+0xdc>)
     22a:	4b0a      	ldr	r3, [pc, #40]	; (254 <prompt_menu+0xb8>)
     22c:	4798      	blx	r3
     22e:	2800      	cmp	r0, #0
     230:	d10b      	bne.n	24a <prompt_menu+0xae>
		switch(buff[0])
     232:	2308      	movs	r3, #8
     234:	2208      	movs	r2, #8
     236:	4694      	mov	ip, r2
     238:	44bc      	add	ip, r7
     23a:	4463      	add	r3, ip
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	2b68      	cmp	r3, #104	; 0x68
     240:	d0b3      	beq.n	1aa <prompt_menu+0xe>
     242:	2b69      	cmp	r3, #105	; 0x69
     244:	d0ba      	beq.n	1bc <prompt_menu+0x20>
				is_error=true;
     246:	2601      	movs	r6, #1
     248:	e7b1      	b.n	1ae <prompt_menu+0x12>
     24a:	683b      	ldr	r3, [r7, #0]
     24c:	469d      	mov	sp, r3
     24e:	e7b2      	b.n	1b6 <prompt_menu+0x1a>
     250:	00000115 	.word	0x00000115
     254:	00000151 	.word	0x00000151
     258:	00003ad0 	.word	0x00003ad0
     25c:	00001bdd 	.word	0x00001bdd
     260:	00003afc 	.word	0x00003afc
     264:	000018f1 	.word	0x000018f1
     268:	00003aac 	.word	0x00003aac
     26c:	00003aec 	.word	0x00003aec
     270:	00003ad8 	.word	0x00003ad8
     274:	000019e5 	.word	0x000019e5
     278:	00003a88 	.word	0x00003a88

0000027c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     27c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     27e:	2000      	movs	r0, #0
     280:	4b08      	ldr	r3, [pc, #32]	; (2a4 <delay_init+0x28>)
     282:	4798      	blx	r3
     284:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     286:	4c08      	ldr	r4, [pc, #32]	; (2a8 <delay_init+0x2c>)
     288:	21fa      	movs	r1, #250	; 0xfa
     28a:	0089      	lsls	r1, r1, #2
     28c:	47a0      	blx	r4
     28e:	4b07      	ldr	r3, [pc, #28]	; (2ac <delay_init+0x30>)
     290:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     292:	4907      	ldr	r1, [pc, #28]	; (2b0 <delay_init+0x34>)
     294:	0028      	movs	r0, r5
     296:	47a0      	blx	r4
     298:	4b06      	ldr	r3, [pc, #24]	; (2b4 <delay_init+0x38>)
     29a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     29c:	2205      	movs	r2, #5
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <delay_init+0x3c>)
     2a0:	601a      	str	r2, [r3, #0]
}
     2a2:	bd70      	pop	{r4, r5, r6, pc}
     2a4:	00001119 	.word	0x00001119
     2a8:	0000172d 	.word	0x0000172d
     2ac:	20000000 	.word	0x20000000
     2b0:	000f4240 	.word	0x000f4240
     2b4:	20000004 	.word	0x20000004
     2b8:	e000e010 	.word	0xe000e010

000002bc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     2bc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     2be:	4b08      	ldr	r3, [pc, #32]	; (2e0 <delay_cycles_ms+0x24>)
     2c0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     2c2:	4a08      	ldr	r2, [pc, #32]	; (2e4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     2c4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2c6:	2180      	movs	r1, #128	; 0x80
     2c8:	0249      	lsls	r1, r1, #9
	while (n--) {
     2ca:	3801      	subs	r0, #1
     2cc:	d307      	bcc.n	2de <delay_cycles_ms+0x22>
	if (n > 0) {
     2ce:	2c00      	cmp	r4, #0
     2d0:	d0fb      	beq.n	2ca <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     2d2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     2d4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2d6:	6813      	ldr	r3, [r2, #0]
     2d8:	420b      	tst	r3, r1
     2da:	d0fc      	beq.n	2d6 <delay_cycles_ms+0x1a>
     2dc:	e7f5      	b.n	2ca <delay_cycles_ms+0xe>
	}
}
     2de:	bd30      	pop	{r4, r5, pc}
     2e0:	20000000 	.word	0x20000000
     2e4:	e000e010 	.word	0xe000e010

000002e8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     2e8:	4b0c      	ldr	r3, [pc, #48]	; (31c <cpu_irq_enter_critical+0x34>)
     2ea:	681b      	ldr	r3, [r3, #0]
     2ec:	2b00      	cmp	r3, #0
     2ee:	d106      	bne.n	2fe <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     2f0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     2f4:	2b00      	cmp	r3, #0
     2f6:	d007      	beq.n	308 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     2f8:	2200      	movs	r2, #0
     2fa:	4b09      	ldr	r3, [pc, #36]	; (320 <cpu_irq_enter_critical+0x38>)
     2fc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     2fe:	4a07      	ldr	r2, [pc, #28]	; (31c <cpu_irq_enter_critical+0x34>)
     300:	6813      	ldr	r3, [r2, #0]
     302:	3301      	adds	r3, #1
     304:	6013      	str	r3, [r2, #0]
}
     306:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     308:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     30a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     30e:	2200      	movs	r2, #0
     310:	4b04      	ldr	r3, [pc, #16]	; (324 <cpu_irq_enter_critical+0x3c>)
     312:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     314:	3201      	adds	r2, #1
     316:	4b02      	ldr	r3, [pc, #8]	; (320 <cpu_irq_enter_critical+0x38>)
     318:	701a      	strb	r2, [r3, #0]
     31a:	e7f0      	b.n	2fe <cpu_irq_enter_critical+0x16>
     31c:	200001f8 	.word	0x200001f8
     320:	200001fc 	.word	0x200001fc
     324:	20000008 	.word	0x20000008

00000328 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     328:	4b08      	ldr	r3, [pc, #32]	; (34c <cpu_irq_leave_critical+0x24>)
     32a:	681a      	ldr	r2, [r3, #0]
     32c:	3a01      	subs	r2, #1
     32e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     330:	681b      	ldr	r3, [r3, #0]
     332:	2b00      	cmp	r3, #0
     334:	d109      	bne.n	34a <cpu_irq_leave_critical+0x22>
     336:	4b06      	ldr	r3, [pc, #24]	; (350 <cpu_irq_leave_critical+0x28>)
     338:	781b      	ldrb	r3, [r3, #0]
     33a:	2b00      	cmp	r3, #0
     33c:	d005      	beq.n	34a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     33e:	2201      	movs	r2, #1
     340:	4b04      	ldr	r3, [pc, #16]	; (354 <cpu_irq_leave_critical+0x2c>)
     342:	701a      	strb	r2, [r3, #0]
     344:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     348:	b662      	cpsie	i
	}
}
     34a:	4770      	bx	lr
     34c:	200001f8 	.word	0x200001f8
     350:	200001fc 	.word	0x200001fc
     354:	20000008 	.word	0x20000008

00000358 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     358:	b5f0      	push	{r4, r5, r6, r7, lr}
     35a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     35c:	ac01      	add	r4, sp, #4
     35e:	2501      	movs	r5, #1
     360:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     362:	2700      	movs	r7, #0
     364:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     366:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     368:	0021      	movs	r1, r4
     36a:	202a      	movs	r0, #42	; 0x2a
     36c:	4e06      	ldr	r6, [pc, #24]	; (388 <system_board_init+0x30>)
     36e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     370:	2280      	movs	r2, #128	; 0x80
     372:	00d2      	lsls	r2, r2, #3
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <system_board_init+0x34>)
     376:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

 	/* Set buttons as inputs */
	 pin_conf.direction  = PORT_PIN_DIR_INPUT;
     378:	7027      	strb	r7, [r4, #0]
     pin_conf.input_pull = PORT_PIN_PULL_UP;
     37a:	7065      	strb	r5, [r4, #1]
     port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     37c:	0021      	movs	r1, r4
     37e:	2002      	movs	r0, #2
     380:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     382:	b003      	add	sp, #12
     384:	bdf0      	pop	{r4, r5, r6, r7, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	00000485 	.word	0x00000485
     38c:	40002880 	.word	0x40002880

00000390 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     390:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     392:	2200      	movs	r2, #0
     394:	4b10      	ldr	r3, [pc, #64]	; (3d8 <EIC_Handler+0x48>)
     396:	701a      	strb	r2, [r3, #0]
     398:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     39a:	4910      	ldr	r1, [pc, #64]	; (3dc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     39c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     39e:	4e10      	ldr	r6, [pc, #64]	; (3e0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     3a0:	4c0d      	ldr	r4, [pc, #52]	; (3d8 <EIC_Handler+0x48>)
     3a2:	e00a      	b.n	3ba <EIC_Handler+0x2a>
		return eics[eic_index];
     3a4:	490d      	ldr	r1, [pc, #52]	; (3dc <EIC_Handler+0x4c>)
     3a6:	e008      	b.n	3ba <EIC_Handler+0x2a>
     3a8:	7823      	ldrb	r3, [r4, #0]
     3aa:	3301      	adds	r3, #1
     3ac:	b2db      	uxtb	r3, r3
     3ae:	7023      	strb	r3, [r4, #0]
     3b0:	2b0f      	cmp	r3, #15
     3b2:	d810      	bhi.n	3d6 <EIC_Handler+0x46>
		return NULL;
     3b4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     3b6:	2b1f      	cmp	r3, #31
     3b8:	d9f4      	bls.n	3a4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     3ba:	0028      	movs	r0, r5
     3bc:	4018      	ands	r0, r3
     3be:	2201      	movs	r2, #1
     3c0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     3c2:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     3c4:	4210      	tst	r0, r2
     3c6:	d0ef      	beq.n	3a8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     3c8:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     3ca:	009b      	lsls	r3, r3, #2
     3cc:	599b      	ldr	r3, [r3, r6]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d0ea      	beq.n	3a8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     3d2:	4798      	blx	r3
     3d4:	e7e8      	b.n	3a8 <EIC_Handler+0x18>
			}
		}
	}
}
     3d6:	bd70      	pop	{r4, r5, r6, pc}
     3d8:	20000274 	.word	0x20000274
     3dc:	40002400 	.word	0x40002400
     3e0:	20000278 	.word	0x20000278

000003e4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     3e4:	4a06      	ldr	r2, [pc, #24]	; (400 <_extint_enable+0x1c>)
     3e6:	7813      	ldrb	r3, [r2, #0]
     3e8:	2102      	movs	r1, #2
     3ea:	430b      	orrs	r3, r1
     3ec:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     3ee:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     3f0:	6853      	ldr	r3, [r2, #4]
     3f2:	4219      	tst	r1, r3
     3f4:	d1fc      	bne.n	3f0 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     3f6:	6853      	ldr	r3, [r2, #4]
     3f8:	4218      	tst	r0, r3
     3fa:	d1f9      	bne.n	3f0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3fc:	4770      	bx	lr
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	40002400 	.word	0x40002400

00000404 <_system_extint_init>:
{
     404:	b500      	push	{lr}
     406:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     408:	4a17      	ldr	r2, [pc, #92]	; (468 <_system_extint_init+0x64>)
     40a:	6951      	ldr	r1, [r2, #20]
     40c:	2380      	movs	r3, #128	; 0x80
     40e:	009b      	lsls	r3, r3, #2
     410:	430b      	orrs	r3, r1
     412:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     414:	a901      	add	r1, sp, #4
     416:	2300      	movs	r3, #0
     418:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     41a:	2003      	movs	r0, #3
     41c:	4b13      	ldr	r3, [pc, #76]	; (46c <_system_extint_init+0x68>)
     41e:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     420:	2003      	movs	r0, #3
     422:	4b13      	ldr	r3, [pc, #76]	; (470 <_system_extint_init+0x6c>)
     424:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     426:	4a13      	ldr	r2, [pc, #76]	; (474 <_system_extint_init+0x70>)
     428:	7813      	ldrb	r3, [r2, #0]
     42a:	2101      	movs	r1, #1
     42c:	430b      	orrs	r3, r1
     42e:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     430:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     432:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     434:	6853      	ldr	r3, [r2, #4]
     436:	4219      	tst	r1, r3
     438:	d1fc      	bne.n	434 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     43a:	6853      	ldr	r3, [r2, #4]
     43c:	4218      	tst	r0, r3
     43e:	d1f9      	bne.n	434 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     440:	4a0c      	ldr	r2, [pc, #48]	; (474 <_system_extint_init+0x70>)
     442:	7813      	ldrb	r3, [r2, #0]
     444:	2110      	movs	r1, #16
     446:	438b      	bics	r3, r1
     448:	7013      	strb	r3, [r2, #0]
     44a:	4b0b      	ldr	r3, [pc, #44]	; (478 <_system_extint_init+0x74>)
     44c:	0019      	movs	r1, r3
     44e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     450:	2200      	movs	r2, #0
     452:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     454:	428b      	cmp	r3, r1
     456:	d1fc      	bne.n	452 <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     458:	2208      	movs	r2, #8
     45a:	4b08      	ldr	r3, [pc, #32]	; (47c <_system_extint_init+0x78>)
     45c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     45e:	4b08      	ldr	r3, [pc, #32]	; (480 <_system_extint_init+0x7c>)
     460:	4798      	blx	r3
}
     462:	b003      	add	sp, #12
     464:	bd00      	pop	{pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	40000400 	.word	0x40000400
     46c:	000011f5 	.word	0x000011f5
     470:	00001185 	.word	0x00001185
     474:	40002400 	.word	0x40002400
     478:	20000278 	.word	0x20000278
     47c:	e000e100 	.word	0xe000e100
     480:	000003e5 	.word	0x000003e5

00000484 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     484:	b500      	push	{lr}
     486:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     488:	ab01      	add	r3, sp, #4
     48a:	2280      	movs	r2, #128	; 0x80
     48c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     48e:	780a      	ldrb	r2, [r1, #0]
     490:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     492:	784a      	ldrb	r2, [r1, #1]
     494:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     496:	788a      	ldrb	r2, [r1, #2]
     498:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     49a:	0019      	movs	r1, r3
     49c:	4b01      	ldr	r3, [pc, #4]	; (4a4 <port_pin_set_config+0x20>)
     49e:	4798      	blx	r3
}
     4a0:	b003      	add	sp, #12
     4a2:	bd00      	pop	{pc}
     4a4:	000012f1 	.word	0x000012f1

000004a8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4aa:	46de      	mov	lr, fp
     4ac:	4657      	mov	r7, sl
     4ae:	464e      	mov	r6, r9
     4b0:	4645      	mov	r5, r8
     4b2:	b5e0      	push	{r5, r6, r7, lr}
     4b4:	b087      	sub	sp, #28
     4b6:	4680      	mov	r8, r0
     4b8:	9104      	str	r1, [sp, #16]
     4ba:	0016      	movs	r6, r2
     4bc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4be:	2200      	movs	r2, #0
     4c0:	2300      	movs	r3, #0
     4c2:	2100      	movs	r1, #0
     4c4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     4c6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     4c8:	2001      	movs	r0, #1
     4ca:	0021      	movs	r1, r4
     4cc:	9600      	str	r6, [sp, #0]
     4ce:	9701      	str	r7, [sp, #4]
     4d0:	465c      	mov	r4, fp
     4d2:	9403      	str	r4, [sp, #12]
     4d4:	4644      	mov	r4, r8
     4d6:	9405      	str	r4, [sp, #20]
     4d8:	e013      	b.n	502 <long_division+0x5a>
     4da:	2420      	movs	r4, #32
     4dc:	1a64      	subs	r4, r4, r1
     4de:	0005      	movs	r5, r0
     4e0:	40e5      	lsrs	r5, r4
     4e2:	46a8      	mov	r8, r5
     4e4:	e014      	b.n	510 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     4e6:	9c00      	ldr	r4, [sp, #0]
     4e8:	9d01      	ldr	r5, [sp, #4]
     4ea:	1b12      	subs	r2, r2, r4
     4ec:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     4ee:	465c      	mov	r4, fp
     4f0:	464d      	mov	r5, r9
     4f2:	432c      	orrs	r4, r5
     4f4:	46a3      	mov	fp, r4
     4f6:	9c03      	ldr	r4, [sp, #12]
     4f8:	4645      	mov	r5, r8
     4fa:	432c      	orrs	r4, r5
     4fc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     4fe:	3901      	subs	r1, #1
     500:	d325      	bcc.n	54e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     502:	2420      	movs	r4, #32
     504:	4264      	negs	r4, r4
     506:	190c      	adds	r4, r1, r4
     508:	d4e7      	bmi.n	4da <long_division+0x32>
     50a:	0005      	movs	r5, r0
     50c:	40a5      	lsls	r5, r4
     50e:	46a8      	mov	r8, r5
     510:	0004      	movs	r4, r0
     512:	408c      	lsls	r4, r1
     514:	46a1      	mov	r9, r4
		r = r << 1;
     516:	1892      	adds	r2, r2, r2
     518:	415b      	adcs	r3, r3
     51a:	0014      	movs	r4, r2
     51c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     51e:	9e05      	ldr	r6, [sp, #20]
     520:	464f      	mov	r7, r9
     522:	403e      	ands	r6, r7
     524:	46b4      	mov	ip, r6
     526:	9e04      	ldr	r6, [sp, #16]
     528:	4647      	mov	r7, r8
     52a:	403e      	ands	r6, r7
     52c:	46b2      	mov	sl, r6
     52e:	4666      	mov	r6, ip
     530:	4657      	mov	r7, sl
     532:	433e      	orrs	r6, r7
     534:	d003      	beq.n	53e <long_division+0x96>
			r |= 0x01;
     536:	0006      	movs	r6, r0
     538:	4326      	orrs	r6, r4
     53a:	0032      	movs	r2, r6
     53c:	002b      	movs	r3, r5
		if (r >= d) {
     53e:	9c00      	ldr	r4, [sp, #0]
     540:	9d01      	ldr	r5, [sp, #4]
     542:	429d      	cmp	r5, r3
     544:	d8db      	bhi.n	4fe <long_division+0x56>
     546:	d1ce      	bne.n	4e6 <long_division+0x3e>
     548:	4294      	cmp	r4, r2
     54a:	d8d8      	bhi.n	4fe <long_division+0x56>
     54c:	e7cb      	b.n	4e6 <long_division+0x3e>
     54e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     550:	4658      	mov	r0, fp
     552:	0019      	movs	r1, r3
     554:	b007      	add	sp, #28
     556:	bc3c      	pop	{r2, r3, r4, r5}
     558:	4690      	mov	r8, r2
     55a:	4699      	mov	r9, r3
     55c:	46a2      	mov	sl, r4
     55e:	46ab      	mov	fp, r5
     560:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000562 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     562:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     564:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     566:	2340      	movs	r3, #64	; 0x40
     568:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     56a:	4281      	cmp	r1, r0
     56c:	d202      	bcs.n	574 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     56e:	0018      	movs	r0, r3
     570:	bd10      	pop	{r4, pc}
		baud_calculated++;
     572:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     574:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     576:	1c63      	adds	r3, r4, #1
     578:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     57a:	4288      	cmp	r0, r1
     57c:	d9f9      	bls.n	572 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     57e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     580:	2cff      	cmp	r4, #255	; 0xff
     582:	d8f4      	bhi.n	56e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     584:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     586:	2300      	movs	r3, #0
     588:	e7f1      	b.n	56e <_sercom_get_sync_baud_val+0xc>
	...

0000058c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     58c:	b5f0      	push	{r4, r5, r6, r7, lr}
     58e:	b083      	sub	sp, #12
     590:	000f      	movs	r7, r1
     592:	0016      	movs	r6, r2
     594:	aa08      	add	r2, sp, #32
     596:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     598:	0004      	movs	r4, r0
     59a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     59c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     59e:	42bc      	cmp	r4, r7
     5a0:	d902      	bls.n	5a8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     5a2:	0010      	movs	r0, r2
     5a4:	b003      	add	sp, #12
     5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     5a8:	2b00      	cmp	r3, #0
     5aa:	d114      	bne.n	5d6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     5ac:	0002      	movs	r2, r0
     5ae:	0008      	movs	r0, r1
     5b0:	2100      	movs	r1, #0
     5b2:	4c19      	ldr	r4, [pc, #100]	; (618 <_sercom_get_async_baud_val+0x8c>)
     5b4:	47a0      	blx	r4
     5b6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     5b8:	003a      	movs	r2, r7
     5ba:	2300      	movs	r3, #0
     5bc:	2000      	movs	r0, #0
     5be:	4c17      	ldr	r4, [pc, #92]	; (61c <_sercom_get_async_baud_val+0x90>)
     5c0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5c2:	2200      	movs	r2, #0
     5c4:	2301      	movs	r3, #1
     5c6:	1a12      	subs	r2, r2, r0
     5c8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     5ca:	0c12      	lsrs	r2, r2, #16
     5cc:	041b      	lsls	r3, r3, #16
     5ce:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     5d0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     5d2:	2200      	movs	r2, #0
     5d4:	e7e5      	b.n	5a2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     5d6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5d8:	2b01      	cmp	r3, #1
     5da:	d1f9      	bne.n	5d0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     5dc:	000a      	movs	r2, r1
     5de:	2300      	movs	r3, #0
     5e0:	2100      	movs	r1, #0
     5e2:	4c0d      	ldr	r4, [pc, #52]	; (618 <_sercom_get_async_baud_val+0x8c>)
     5e4:	47a0      	blx	r4
     5e6:	0002      	movs	r2, r0
     5e8:	000b      	movs	r3, r1
     5ea:	9200      	str	r2, [sp, #0]
     5ec:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     5ee:	0038      	movs	r0, r7
     5f0:	2100      	movs	r1, #0
     5f2:	4c0a      	ldr	r4, [pc, #40]	; (61c <_sercom_get_async_baud_val+0x90>)
     5f4:	47a0      	blx	r4
     5f6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     5f8:	2380      	movs	r3, #128	; 0x80
     5fa:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5fc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     5fe:	4298      	cmp	r0, r3
     600:	d8cf      	bhi.n	5a2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     602:	0f79      	lsrs	r1, r7, #29
     604:	00f8      	lsls	r0, r7, #3
     606:	9a00      	ldr	r2, [sp, #0]
     608:	9b01      	ldr	r3, [sp, #4]
     60a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     60c:	00ea      	lsls	r2, r5, #3
     60e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     610:	b2d2      	uxtb	r2, r2
     612:	0352      	lsls	r2, r2, #13
     614:	432a      	orrs	r2, r5
     616:	e7db      	b.n	5d0 <_sercom_get_async_baud_val+0x44>
     618:	00001845 	.word	0x00001845
     61c:	000004a9 	.word	0x000004a9

00000620 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     620:	b510      	push	{r4, lr}
     622:	b082      	sub	sp, #8
     624:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     626:	4b0e      	ldr	r3, [pc, #56]	; (660 <sercom_set_gclk_generator+0x40>)
     628:	781b      	ldrb	r3, [r3, #0]
     62a:	2b00      	cmp	r3, #0
     62c:	d007      	beq.n	63e <sercom_set_gclk_generator+0x1e>
     62e:	2900      	cmp	r1, #0
     630:	d105      	bne.n	63e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     632:	4b0b      	ldr	r3, [pc, #44]	; (660 <sercom_set_gclk_generator+0x40>)
     634:	785b      	ldrb	r3, [r3, #1]
     636:	4283      	cmp	r3, r0
     638:	d010      	beq.n	65c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     63a:	201d      	movs	r0, #29
     63c:	e00c      	b.n	658 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     63e:	a901      	add	r1, sp, #4
     640:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     642:	2011      	movs	r0, #17
     644:	4b07      	ldr	r3, [pc, #28]	; (664 <sercom_set_gclk_generator+0x44>)
     646:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     648:	2011      	movs	r0, #17
     64a:	4b07      	ldr	r3, [pc, #28]	; (668 <sercom_set_gclk_generator+0x48>)
     64c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     64e:	4b04      	ldr	r3, [pc, #16]	; (660 <sercom_set_gclk_generator+0x40>)
     650:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     652:	2201      	movs	r2, #1
     654:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     656:	2000      	movs	r0, #0
}
     658:	b002      	add	sp, #8
     65a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     65c:	2000      	movs	r0, #0
     65e:	e7fb      	b.n	658 <sercom_set_gclk_generator+0x38>
     660:	20000200 	.word	0x20000200
     664:	000011f5 	.word	0x000011f5
     668:	00001185 	.word	0x00001185

0000066c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     66c:	4b40      	ldr	r3, [pc, #256]	; (770 <_sercom_get_default_pad+0x104>)
     66e:	4298      	cmp	r0, r3
     670:	d032      	beq.n	6d8 <_sercom_get_default_pad+0x6c>
     672:	d90a      	bls.n	68a <_sercom_get_default_pad+0x1e>
     674:	4b3f      	ldr	r3, [pc, #252]	; (774 <_sercom_get_default_pad+0x108>)
     676:	4298      	cmp	r0, r3
     678:	d04e      	beq.n	718 <_sercom_get_default_pad+0xac>
     67a:	4b3f      	ldr	r3, [pc, #252]	; (778 <_sercom_get_default_pad+0x10c>)
     67c:	4298      	cmp	r0, r3
     67e:	d05b      	beq.n	738 <_sercom_get_default_pad+0xcc>
     680:	4b3e      	ldr	r3, [pc, #248]	; (77c <_sercom_get_default_pad+0x110>)
     682:	4298      	cmp	r0, r3
     684:	d038      	beq.n	6f8 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     686:	2000      	movs	r0, #0
}
     688:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     68a:	2384      	movs	r3, #132	; 0x84
     68c:	05db      	lsls	r3, r3, #23
     68e:	4298      	cmp	r0, r3
     690:	d00c      	beq.n	6ac <_sercom_get_default_pad+0x40>
     692:	4b3b      	ldr	r3, [pc, #236]	; (780 <_sercom_get_default_pad+0x114>)
     694:	4298      	cmp	r0, r3
     696:	d1f6      	bne.n	686 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     698:	2901      	cmp	r1, #1
     69a:	d017      	beq.n	6cc <_sercom_get_default_pad+0x60>
     69c:	2900      	cmp	r1, #0
     69e:	d05d      	beq.n	75c <_sercom_get_default_pad+0xf0>
     6a0:	2902      	cmp	r1, #2
     6a2:	d015      	beq.n	6d0 <_sercom_get_default_pad+0x64>
     6a4:	2903      	cmp	r1, #3
     6a6:	d015      	beq.n	6d4 <_sercom_get_default_pad+0x68>
	return 0;
     6a8:	2000      	movs	r0, #0
     6aa:	e7ed      	b.n	688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6ac:	2901      	cmp	r1, #1
     6ae:	d007      	beq.n	6c0 <_sercom_get_default_pad+0x54>
     6b0:	2900      	cmp	r1, #0
     6b2:	d051      	beq.n	758 <_sercom_get_default_pad+0xec>
     6b4:	2902      	cmp	r1, #2
     6b6:	d005      	beq.n	6c4 <_sercom_get_default_pad+0x58>
     6b8:	2903      	cmp	r1, #3
     6ba:	d005      	beq.n	6c8 <_sercom_get_default_pad+0x5c>
	return 0;
     6bc:	2000      	movs	r0, #0
     6be:	e7e3      	b.n	688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6c0:	4830      	ldr	r0, [pc, #192]	; (784 <_sercom_get_default_pad+0x118>)
     6c2:	e7e1      	b.n	688 <_sercom_get_default_pad+0x1c>
     6c4:	4830      	ldr	r0, [pc, #192]	; (788 <_sercom_get_default_pad+0x11c>)
     6c6:	e7df      	b.n	688 <_sercom_get_default_pad+0x1c>
     6c8:	4830      	ldr	r0, [pc, #192]	; (78c <_sercom_get_default_pad+0x120>)
     6ca:	e7dd      	b.n	688 <_sercom_get_default_pad+0x1c>
     6cc:	4830      	ldr	r0, [pc, #192]	; (790 <_sercom_get_default_pad+0x124>)
     6ce:	e7db      	b.n	688 <_sercom_get_default_pad+0x1c>
     6d0:	4830      	ldr	r0, [pc, #192]	; (794 <_sercom_get_default_pad+0x128>)
     6d2:	e7d9      	b.n	688 <_sercom_get_default_pad+0x1c>
     6d4:	4830      	ldr	r0, [pc, #192]	; (798 <_sercom_get_default_pad+0x12c>)
     6d6:	e7d7      	b.n	688 <_sercom_get_default_pad+0x1c>
     6d8:	2901      	cmp	r1, #1
     6da:	d007      	beq.n	6ec <_sercom_get_default_pad+0x80>
     6dc:	2900      	cmp	r1, #0
     6de:	d03f      	beq.n	760 <_sercom_get_default_pad+0xf4>
     6e0:	2902      	cmp	r1, #2
     6e2:	d005      	beq.n	6f0 <_sercom_get_default_pad+0x84>
     6e4:	2903      	cmp	r1, #3
     6e6:	d005      	beq.n	6f4 <_sercom_get_default_pad+0x88>
	return 0;
     6e8:	2000      	movs	r0, #0
     6ea:	e7cd      	b.n	688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6ec:	482b      	ldr	r0, [pc, #172]	; (79c <_sercom_get_default_pad+0x130>)
     6ee:	e7cb      	b.n	688 <_sercom_get_default_pad+0x1c>
     6f0:	482b      	ldr	r0, [pc, #172]	; (7a0 <_sercom_get_default_pad+0x134>)
     6f2:	e7c9      	b.n	688 <_sercom_get_default_pad+0x1c>
     6f4:	482b      	ldr	r0, [pc, #172]	; (7a4 <_sercom_get_default_pad+0x138>)
     6f6:	e7c7      	b.n	688 <_sercom_get_default_pad+0x1c>
     6f8:	2901      	cmp	r1, #1
     6fa:	d007      	beq.n	70c <_sercom_get_default_pad+0xa0>
     6fc:	2900      	cmp	r1, #0
     6fe:	d031      	beq.n	764 <_sercom_get_default_pad+0xf8>
     700:	2902      	cmp	r1, #2
     702:	d005      	beq.n	710 <_sercom_get_default_pad+0xa4>
     704:	2903      	cmp	r1, #3
     706:	d005      	beq.n	714 <_sercom_get_default_pad+0xa8>
	return 0;
     708:	2000      	movs	r0, #0
     70a:	e7bd      	b.n	688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     70c:	4826      	ldr	r0, [pc, #152]	; (7a8 <_sercom_get_default_pad+0x13c>)
     70e:	e7bb      	b.n	688 <_sercom_get_default_pad+0x1c>
     710:	4826      	ldr	r0, [pc, #152]	; (7ac <_sercom_get_default_pad+0x140>)
     712:	e7b9      	b.n	688 <_sercom_get_default_pad+0x1c>
     714:	4826      	ldr	r0, [pc, #152]	; (7b0 <_sercom_get_default_pad+0x144>)
     716:	e7b7      	b.n	688 <_sercom_get_default_pad+0x1c>
     718:	2901      	cmp	r1, #1
     71a:	d007      	beq.n	72c <_sercom_get_default_pad+0xc0>
     71c:	2900      	cmp	r1, #0
     71e:	d023      	beq.n	768 <_sercom_get_default_pad+0xfc>
     720:	2902      	cmp	r1, #2
     722:	d005      	beq.n	730 <_sercom_get_default_pad+0xc4>
     724:	2903      	cmp	r1, #3
     726:	d005      	beq.n	734 <_sercom_get_default_pad+0xc8>
	return 0;
     728:	2000      	movs	r0, #0
     72a:	e7ad      	b.n	688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     72c:	4821      	ldr	r0, [pc, #132]	; (7b4 <_sercom_get_default_pad+0x148>)
     72e:	e7ab      	b.n	688 <_sercom_get_default_pad+0x1c>
     730:	4821      	ldr	r0, [pc, #132]	; (7b8 <_sercom_get_default_pad+0x14c>)
     732:	e7a9      	b.n	688 <_sercom_get_default_pad+0x1c>
     734:	4821      	ldr	r0, [pc, #132]	; (7bc <_sercom_get_default_pad+0x150>)
     736:	e7a7      	b.n	688 <_sercom_get_default_pad+0x1c>
     738:	2901      	cmp	r1, #1
     73a:	d007      	beq.n	74c <_sercom_get_default_pad+0xe0>
     73c:	2900      	cmp	r1, #0
     73e:	d015      	beq.n	76c <_sercom_get_default_pad+0x100>
     740:	2902      	cmp	r1, #2
     742:	d005      	beq.n	750 <_sercom_get_default_pad+0xe4>
     744:	2903      	cmp	r1, #3
     746:	d005      	beq.n	754 <_sercom_get_default_pad+0xe8>
	return 0;
     748:	2000      	movs	r0, #0
     74a:	e79d      	b.n	688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     74c:	481c      	ldr	r0, [pc, #112]	; (7c0 <_sercom_get_default_pad+0x154>)
     74e:	e79b      	b.n	688 <_sercom_get_default_pad+0x1c>
     750:	481c      	ldr	r0, [pc, #112]	; (7c4 <_sercom_get_default_pad+0x158>)
     752:	e799      	b.n	688 <_sercom_get_default_pad+0x1c>
     754:	481c      	ldr	r0, [pc, #112]	; (7c8 <_sercom_get_default_pad+0x15c>)
     756:	e797      	b.n	688 <_sercom_get_default_pad+0x1c>
     758:	481c      	ldr	r0, [pc, #112]	; (7cc <_sercom_get_default_pad+0x160>)
     75a:	e795      	b.n	688 <_sercom_get_default_pad+0x1c>
     75c:	2003      	movs	r0, #3
     75e:	e793      	b.n	688 <_sercom_get_default_pad+0x1c>
     760:	481b      	ldr	r0, [pc, #108]	; (7d0 <_sercom_get_default_pad+0x164>)
     762:	e791      	b.n	688 <_sercom_get_default_pad+0x1c>
     764:	481b      	ldr	r0, [pc, #108]	; (7d4 <_sercom_get_default_pad+0x168>)
     766:	e78f      	b.n	688 <_sercom_get_default_pad+0x1c>
     768:	481b      	ldr	r0, [pc, #108]	; (7d8 <_sercom_get_default_pad+0x16c>)
     76a:	e78d      	b.n	688 <_sercom_get_default_pad+0x1c>
     76c:	481b      	ldr	r0, [pc, #108]	; (7dc <_sercom_get_default_pad+0x170>)
     76e:	e78b      	b.n	688 <_sercom_get_default_pad+0x1c>
     770:	42000800 	.word	0x42000800
     774:	42001000 	.word	0x42001000
     778:	43000400 	.word	0x43000400
     77c:	42000c00 	.word	0x42000c00
     780:	42000400 	.word	0x42000400
     784:	00050003 	.word	0x00050003
     788:	00060003 	.word	0x00060003
     78c:	00070003 	.word	0x00070003
     790:	00010003 	.word	0x00010003
     794:	001e0003 	.word	0x001e0003
     798:	001f0003 	.word	0x001f0003
     79c:	00090003 	.word	0x00090003
     7a0:	000a0003 	.word	0x000a0003
     7a4:	000b0003 	.word	0x000b0003
     7a8:	00110003 	.word	0x00110003
     7ac:	00120003 	.word	0x00120003
     7b0:	00130003 	.word	0x00130003
     7b4:	000d0003 	.word	0x000d0003
     7b8:	000e0003 	.word	0x000e0003
     7bc:	000f0003 	.word	0x000f0003
     7c0:	00170003 	.word	0x00170003
     7c4:	00180003 	.word	0x00180003
     7c8:	00190003 	.word	0x00190003
     7cc:	00040003 	.word	0x00040003
     7d0:	00080003 	.word	0x00080003
     7d4:	00100003 	.word	0x00100003
     7d8:	000c0003 	.word	0x000c0003
     7dc:	00160003 	.word	0x00160003

000007e0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     7e0:	b530      	push	{r4, r5, lr}
     7e2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     7e4:	4b0b      	ldr	r3, [pc, #44]	; (814 <_sercom_get_sercom_inst_index+0x34>)
     7e6:	466a      	mov	r2, sp
     7e8:	cb32      	ldmia	r3!, {r1, r4, r5}
     7ea:	c232      	stmia	r2!, {r1, r4, r5}
     7ec:	cb32      	ldmia	r3!, {r1, r4, r5}
     7ee:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     7f0:	9b00      	ldr	r3, [sp, #0]
     7f2:	4283      	cmp	r3, r0
     7f4:	d00b      	beq.n	80e <_sercom_get_sercom_inst_index+0x2e>
     7f6:	2301      	movs	r3, #1
     7f8:	009a      	lsls	r2, r3, #2
     7fa:	4669      	mov	r1, sp
     7fc:	5852      	ldr	r2, [r2, r1]
     7fe:	4282      	cmp	r2, r0
     800:	d006      	beq.n	810 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     802:	3301      	adds	r3, #1
     804:	2b06      	cmp	r3, #6
     806:	d1f7      	bne.n	7f8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     808:	2000      	movs	r0, #0
}
     80a:	b007      	add	sp, #28
     80c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     80e:	2300      	movs	r3, #0
			return i;
     810:	b2d8      	uxtb	r0, r3
     812:	e7fa      	b.n	80a <_sercom_get_sercom_inst_index+0x2a>
     814:	00003b04 	.word	0x00003b04

00000818 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     818:	4770      	bx	lr
	...

0000081c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     81c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     81e:	4b0a      	ldr	r3, [pc, #40]	; (848 <_sercom_set_handler+0x2c>)
     820:	781b      	ldrb	r3, [r3, #0]
     822:	2b00      	cmp	r3, #0
     824:	d10c      	bne.n	840 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     826:	4f09      	ldr	r7, [pc, #36]	; (84c <_sercom_set_handler+0x30>)
     828:	4e09      	ldr	r6, [pc, #36]	; (850 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     82a:	4d0a      	ldr	r5, [pc, #40]	; (854 <_sercom_set_handler+0x38>)
     82c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     82e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     830:	195a      	adds	r2, r3, r5
     832:	6014      	str	r4, [r2, #0]
     834:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     836:	2b18      	cmp	r3, #24
     838:	d1f9      	bne.n	82e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     83a:	2201      	movs	r2, #1
     83c:	4b02      	ldr	r3, [pc, #8]	; (848 <_sercom_set_handler+0x2c>)
     83e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     840:	0080      	lsls	r0, r0, #2
     842:	4b02      	ldr	r3, [pc, #8]	; (84c <_sercom_set_handler+0x30>)
     844:	50c1      	str	r1, [r0, r3]
}
     846:	bdf0      	pop	{r4, r5, r6, r7, pc}
     848:	20000202 	.word	0x20000202
     84c:	20000204 	.word	0x20000204
     850:	00000819 	.word	0x00000819
     854:	200002b8 	.word	0x200002b8

00000858 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     858:	b500      	push	{lr}
     85a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     85c:	2308      	movs	r3, #8
     85e:	466a      	mov	r2, sp
     860:	7013      	strb	r3, [r2, #0]
     862:	3301      	adds	r3, #1
     864:	7053      	strb	r3, [r2, #1]
     866:	3301      	adds	r3, #1
     868:	7093      	strb	r3, [r2, #2]
     86a:	3301      	adds	r3, #1
     86c:	70d3      	strb	r3, [r2, #3]
     86e:	3301      	adds	r3, #1
     870:	7113      	strb	r3, [r2, #4]
     872:	3301      	adds	r3, #1
     874:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     876:	4b03      	ldr	r3, [pc, #12]	; (884 <_sercom_get_interrupt_vector+0x2c>)
     878:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     87a:	466b      	mov	r3, sp
     87c:	5618      	ldrsb	r0, [r3, r0]
}
     87e:	b003      	add	sp, #12
     880:	bd00      	pop	{pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	000007e1 	.word	0x000007e1

00000888 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     888:	b510      	push	{r4, lr}
     88a:	4b02      	ldr	r3, [pc, #8]	; (894 <SERCOM0_Handler+0xc>)
     88c:	681b      	ldr	r3, [r3, #0]
     88e:	2000      	movs	r0, #0
     890:	4798      	blx	r3
     892:	bd10      	pop	{r4, pc}
     894:	20000204 	.word	0x20000204

00000898 <SERCOM1_Handler>:
     898:	b510      	push	{r4, lr}
     89a:	4b02      	ldr	r3, [pc, #8]	; (8a4 <SERCOM1_Handler+0xc>)
     89c:	685b      	ldr	r3, [r3, #4]
     89e:	2001      	movs	r0, #1
     8a0:	4798      	blx	r3
     8a2:	bd10      	pop	{r4, pc}
     8a4:	20000204 	.word	0x20000204

000008a8 <SERCOM2_Handler>:
     8a8:	b510      	push	{r4, lr}
     8aa:	4b02      	ldr	r3, [pc, #8]	; (8b4 <SERCOM2_Handler+0xc>)
     8ac:	689b      	ldr	r3, [r3, #8]
     8ae:	2002      	movs	r0, #2
     8b0:	4798      	blx	r3
     8b2:	bd10      	pop	{r4, pc}
     8b4:	20000204 	.word	0x20000204

000008b8 <SERCOM3_Handler>:
     8b8:	b510      	push	{r4, lr}
     8ba:	4b02      	ldr	r3, [pc, #8]	; (8c4 <SERCOM3_Handler+0xc>)
     8bc:	68db      	ldr	r3, [r3, #12]
     8be:	2003      	movs	r0, #3
     8c0:	4798      	blx	r3
     8c2:	bd10      	pop	{r4, pc}
     8c4:	20000204 	.word	0x20000204

000008c8 <SERCOM4_Handler>:
     8c8:	b510      	push	{r4, lr}
     8ca:	4b02      	ldr	r3, [pc, #8]	; (8d4 <SERCOM4_Handler+0xc>)
     8cc:	691b      	ldr	r3, [r3, #16]
     8ce:	2004      	movs	r0, #4
     8d0:	4798      	blx	r3
     8d2:	bd10      	pop	{r4, pc}
     8d4:	20000204 	.word	0x20000204

000008d8 <SERCOM5_Handler>:
     8d8:	b510      	push	{r4, lr}
     8da:	4b02      	ldr	r3, [pc, #8]	; (8e4 <SERCOM5_Handler+0xc>)
     8dc:	695b      	ldr	r3, [r3, #20]
     8de:	2005      	movs	r0, #5
     8e0:	4798      	blx	r3
     8e2:	bd10      	pop	{r4, pc}
     8e4:	20000204 	.word	0x20000204

000008e8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ea:	46de      	mov	lr, fp
     8ec:	4657      	mov	r7, sl
     8ee:	464e      	mov	r6, r9
     8f0:	4645      	mov	r5, r8
     8f2:	b5e0      	push	{r5, r6, r7, lr}
     8f4:	b091      	sub	sp, #68	; 0x44
     8f6:	0005      	movs	r5, r0
     8f8:	000c      	movs	r4, r1
     8fa:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     8fc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8fe:	0008      	movs	r0, r1
     900:	4bc4      	ldr	r3, [pc, #784]	; (c14 <usart_init+0x32c>)
     902:	4798      	blx	r3
     904:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
     906:	2805      	cmp	r0, #5
     908:	d00d      	beq.n	926 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     90a:	0007      	movs	r7, r0
     90c:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     90e:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     910:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     912:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     914:	07c9      	lsls	r1, r1, #31
     916:	d509      	bpl.n	92c <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     918:	b011      	add	sp, #68	; 0x44
     91a:	bc3c      	pop	{r2, r3, r4, r5}
     91c:	4690      	mov	r8, r2
     91e:	4699      	mov	r9, r3
     920:	46a2      	mov	sl, r4
     922:	46ab      	mov	fp, r5
     924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     926:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     928:	2301      	movs	r3, #1
     92a:	e7f1      	b.n	910 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     92c:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
     92e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     930:	0789      	lsls	r1, r1, #30
     932:	d4f1      	bmi.n	918 <usart_init+0x30>
	if (sercom_index == 5) {
     934:	2a05      	cmp	r2, #5
     936:	d049      	beq.n	9cc <usart_init+0xe4>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     938:	49b7      	ldr	r1, [pc, #732]	; (c18 <usart_init+0x330>)
     93a:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
     93c:	2201      	movs	r2, #1
     93e:	409a      	lsls	r2, r3
     940:	0013      	movs	r3, r2
     942:	4303      	orrs	r3, r0
     944:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     946:	a90f      	add	r1, sp, #60	; 0x3c
     948:	232d      	movs	r3, #45	; 0x2d
     94a:	4698      	mov	r8, r3
     94c:	5cf3      	ldrb	r3, [r6, r3]
     94e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     950:	b2ff      	uxtb	r7, r7
     952:	0038      	movs	r0, r7
     954:	4bb1      	ldr	r3, [pc, #708]	; (c1c <usart_init+0x334>)
     956:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     958:	0038      	movs	r0, r7
     95a:	4bb1      	ldr	r3, [pc, #708]	; (c20 <usart_init+0x338>)
     95c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     95e:	4643      	mov	r3, r8
     960:	5cf0      	ldrb	r0, [r6, r3]
     962:	2100      	movs	r1, #0
     964:	4baf      	ldr	r3, [pc, #700]	; (c24 <usart_init+0x33c>)
     966:	4798      	blx	r3
	module->character_size = config->character_size;
     968:	7af3      	ldrb	r3, [r6, #11]
     96a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     96c:	2324      	movs	r3, #36	; 0x24
     96e:	5cf3      	ldrb	r3, [r6, r3]
     970:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     972:	2325      	movs	r3, #37	; 0x25
     974:	5cf3      	ldrb	r3, [r6, r3]
     976:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     978:	7ef3      	ldrb	r3, [r6, #27]
     97a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     97c:	7f33      	ldrb	r3, [r6, #28]
     97e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     980:	682b      	ldr	r3, [r5, #0]
     982:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     984:	0018      	movs	r0, r3
     986:	4ba3      	ldr	r3, [pc, #652]	; (c14 <usart_init+0x32c>)
     988:	4798      	blx	r3
	if (sercom_index == 5) {
     98a:	2805      	cmp	r0, #5
     98c:	d026      	beq.n	9dc <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     98e:	3012      	adds	r0, #18
	uint16_t baud  = 0;
     990:	2200      	movs	r2, #0
     992:	230e      	movs	r3, #14
     994:	a906      	add	r1, sp, #24
     996:	468c      	mov	ip, r1
     998:	4463      	add	r3, ip
     99a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     99c:	8a32      	ldrh	r2, [r6, #16]
     99e:	9202      	str	r2, [sp, #8]
     9a0:	2380      	movs	r3, #128	; 0x80
     9a2:	01db      	lsls	r3, r3, #7
     9a4:	429a      	cmp	r2, r3
     9a6:	d100      	bne.n	9aa <usart_init+0xc2>
     9a8:	e0a7      	b.n	afa <usart_init+0x212>
     9aa:	d919      	bls.n	9e0 <usart_init+0xf8>
     9ac:	23c0      	movs	r3, #192	; 0xc0
     9ae:	01db      	lsls	r3, r3, #7
     9b0:	9a02      	ldr	r2, [sp, #8]
     9b2:	429a      	cmp	r2, r3
     9b4:	d100      	bne.n	9b8 <usart_init+0xd0>
     9b6:	e09b      	b.n	af0 <usart_init+0x208>
     9b8:	2380      	movs	r3, #128	; 0x80
     9ba:	021b      	lsls	r3, r3, #8
     9bc:	429a      	cmp	r2, r3
     9be:	d000      	beq.n	9c2 <usart_init+0xda>
     9c0:	e123      	b.n	c0a <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     9c2:	2303      	movs	r3, #3
     9c4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9c6:	2300      	movs	r3, #0
     9c8:	9307      	str	r3, [sp, #28]
     9ca:	e012      	b.n	9f2 <usart_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     9cc:	4992      	ldr	r1, [pc, #584]	; (c18 <usart_init+0x330>)
     9ce:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
     9d0:	3a04      	subs	r2, #4
     9d2:	409a      	lsls	r2, r3
     9d4:	0013      	movs	r3, r2
     9d6:	4303      	orrs	r3, r0
     9d8:	620b      	str	r3, [r1, #32]
     9da:	e7b4      	b.n	946 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     9dc:	2018      	movs	r0, #24
     9de:	e7d7      	b.n	990 <usart_init+0xa8>
	switch (config->sample_rate) {
     9e0:	2380      	movs	r3, #128	; 0x80
     9e2:	019b      	lsls	r3, r3, #6
     9e4:	429a      	cmp	r2, r3
     9e6:	d000      	beq.n	9ea <usart_init+0x102>
     9e8:	e10f      	b.n	c0a <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     9ea:	2310      	movs	r3, #16
     9ec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     9ee:	3b0f      	subs	r3, #15
     9f0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     9f2:	6833      	ldr	r3, [r6, #0]
     9f4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     9f6:	68f3      	ldr	r3, [r6, #12]
     9f8:	469b      	mov	fp, r3
		config->sample_adjustment |
     9fa:	6973      	ldr	r3, [r6, #20]
     9fc:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9fe:	7e33      	ldrb	r3, [r6, #24]
     a00:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a02:	2326      	movs	r3, #38	; 0x26
     a04:	5cf3      	ldrb	r3, [r6, r3]
     a06:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a08:	6873      	ldr	r3, [r6, #4]
     a0a:	4699      	mov	r9, r3
	switch (transfer_mode)
     a0c:	2b00      	cmp	r3, #0
     a0e:	d100      	bne.n	a12 <usart_init+0x12a>
     a10:	e09b      	b.n	b4a <usart_init+0x262>
     a12:	2380      	movs	r3, #128	; 0x80
     a14:	055b      	lsls	r3, r3, #21
     a16:	4599      	cmp	r9, r3
     a18:	d104      	bne.n	a24 <usart_init+0x13c>
			if (!config->use_external_clock) {
     a1a:	2327      	movs	r3, #39	; 0x27
     a1c:	5cf3      	ldrb	r3, [r6, r3]
     a1e:	2b00      	cmp	r3, #0
     a20:	d100      	bne.n	a24 <usart_init+0x13c>
     a22:	e080      	b.n	b26 <usart_init+0x23e>
	if(config->encoding_format_enable) {
     a24:	7e73      	ldrb	r3, [r6, #25]
     a26:	2b00      	cmp	r3, #0
     a28:	d002      	beq.n	a30 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     a2a:	7eb3      	ldrb	r3, [r6, #26]
     a2c:	4642      	mov	r2, r8
     a2e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     a30:	230e      	movs	r3, #14
     a32:	aa06      	add	r2, sp, #24
     a34:	4694      	mov	ip, r2
     a36:	4463      	add	r3, ip
     a38:	881b      	ldrh	r3, [r3, #0]
     a3a:	4642      	mov	r2, r8
     a3c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     a3e:	9b05      	ldr	r3, [sp, #20]
     a40:	465a      	mov	r2, fp
     a42:	4313      	orrs	r3, r2
     a44:	9a03      	ldr	r2, [sp, #12]
     a46:	4313      	orrs	r3, r2
     a48:	464a      	mov	r2, r9
     a4a:	4313      	orrs	r3, r2
     a4c:	9f02      	ldr	r7, [sp, #8]
     a4e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a50:	9b04      	ldr	r3, [sp, #16]
     a52:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     a54:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a56:	4653      	mov	r3, sl
     a58:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     a5a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     a5c:	2327      	movs	r3, #39	; 0x27
     a5e:	5cf3      	ldrb	r3, [r6, r3]
     a60:	2b00      	cmp	r3, #0
     a62:	d101      	bne.n	a68 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     a64:	3304      	adds	r3, #4
     a66:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     a68:	7e73      	ldrb	r3, [r6, #25]
     a6a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     a6c:	7f32      	ldrb	r2, [r6, #28]
     a6e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     a70:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     a72:	7f72      	ldrb	r2, [r6, #29]
     a74:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     a76:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a78:	2224      	movs	r2, #36	; 0x24
     a7a:	5cb2      	ldrb	r2, [r6, r2]
     a7c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     a7e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     a80:	2225      	movs	r2, #37	; 0x25
     a82:	5cb2      	ldrb	r2, [r6, r2]
     a84:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a86:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     a88:	7ab1      	ldrb	r1, [r6, #10]
     a8a:	7af2      	ldrb	r2, [r6, #11]
     a8c:	4311      	orrs	r1, r2
     a8e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     a90:	8933      	ldrh	r3, [r6, #8]
     a92:	2bff      	cmp	r3, #255	; 0xff
     a94:	d07d      	beq.n	b92 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     a96:	2280      	movs	r2, #128	; 0x80
     a98:	0452      	lsls	r2, r2, #17
     a9a:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     a9c:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     a9e:	232c      	movs	r3, #44	; 0x2c
     aa0:	5cf3      	ldrb	r3, [r6, r3]
     aa2:	2b00      	cmp	r3, #0
     aa4:	d103      	bne.n	aae <usart_init+0x1c6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     aa6:	4b60      	ldr	r3, [pc, #384]	; (c28 <usart_init+0x340>)
     aa8:	789b      	ldrb	r3, [r3, #2]
     aaa:	079b      	lsls	r3, r3, #30
     aac:	d501      	bpl.n	ab2 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     aae:	2380      	movs	r3, #128	; 0x80
     ab0:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ab2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ab4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ab6:	2b00      	cmp	r3, #0
     ab8:	d1fc      	bne.n	ab4 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
     aba:	4643      	mov	r3, r8
     abc:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     abe:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ac0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     ac2:	2b00      	cmp	r3, #0
     ac4:	d1fc      	bne.n	ac0 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
     ac6:	4643      	mov	r3, r8
     ac8:	601f      	str	r7, [r3, #0]
     aca:	ab0e      	add	r3, sp, #56	; 0x38
     acc:	2280      	movs	r2, #128	; 0x80
     ace:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ad0:	2200      	movs	r2, #0
     ad2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     ad4:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ad6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     ad8:	6b33      	ldr	r3, [r6, #48]	; 0x30
     ada:	930a      	str	r3, [sp, #40]	; 0x28
     adc:	6b73      	ldr	r3, [r6, #52]	; 0x34
     ade:	930b      	str	r3, [sp, #44]	; 0x2c
     ae0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     ae2:	930c      	str	r3, [sp, #48]	; 0x30
     ae4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     ae6:	9302      	str	r3, [sp, #8]
     ae8:	930d      	str	r3, [sp, #52]	; 0x34
     aea:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aec:	ae0a      	add	r6, sp, #40	; 0x28
     aee:	e05e      	b.n	bae <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     af0:	2308      	movs	r3, #8
     af2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     af4:	3b07      	subs	r3, #7
     af6:	9307      	str	r3, [sp, #28]
     af8:	e77b      	b.n	9f2 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
     afa:	6833      	ldr	r3, [r6, #0]
     afc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     afe:	68f3      	ldr	r3, [r6, #12]
     b00:	469b      	mov	fp, r3
		config->sample_adjustment |
     b02:	6973      	ldr	r3, [r6, #20]
     b04:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b06:	7e33      	ldrb	r3, [r6, #24]
     b08:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b0a:	2326      	movs	r3, #38	; 0x26
     b0c:	5cf3      	ldrb	r3, [r6, r3]
     b0e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     b10:	6873      	ldr	r3, [r6, #4]
     b12:	4699      	mov	r9, r3
	switch (transfer_mode)
     b14:	2b00      	cmp	r3, #0
     b16:	d014      	beq.n	b42 <usart_init+0x25a>
     b18:	2380      	movs	r3, #128	; 0x80
     b1a:	055b      	lsls	r3, r3, #21
     b1c:	4599      	cmp	r9, r3
     b1e:	d100      	bne.n	b22 <usart_init+0x23a>
     b20:	e77b      	b.n	a1a <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
     b22:	2000      	movs	r0, #0
     b24:	e020      	b.n	b68 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     b26:	6a33      	ldr	r3, [r6, #32]
     b28:	001f      	movs	r7, r3
     b2a:	b2c0      	uxtb	r0, r0
     b2c:	4b3f      	ldr	r3, [pc, #252]	; (c2c <usart_init+0x344>)
     b2e:	4798      	blx	r3
     b30:	0001      	movs	r1, r0
     b32:	220e      	movs	r2, #14
     b34:	ab06      	add	r3, sp, #24
     b36:	469c      	mov	ip, r3
     b38:	4462      	add	r2, ip
     b3a:	0038      	movs	r0, r7
     b3c:	4b3c      	ldr	r3, [pc, #240]	; (c30 <usart_init+0x348>)
     b3e:	4798      	blx	r3
     b40:	e012      	b.n	b68 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b42:	2308      	movs	r3, #8
     b44:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b46:	2300      	movs	r3, #0
     b48:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     b4a:	2327      	movs	r3, #39	; 0x27
     b4c:	5cf3      	ldrb	r3, [r6, r3]
     b4e:	2b00      	cmp	r3, #0
     b50:	d00e      	beq.n	b70 <usart_init+0x288>
				status_code =
     b52:	9b06      	ldr	r3, [sp, #24]
     b54:	9300      	str	r3, [sp, #0]
     b56:	9b07      	ldr	r3, [sp, #28]
     b58:	220e      	movs	r2, #14
     b5a:	a906      	add	r1, sp, #24
     b5c:	468c      	mov	ip, r1
     b5e:	4462      	add	r2, ip
     b60:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     b62:	6a30      	ldr	r0, [r6, #32]
     b64:	4f33      	ldr	r7, [pc, #204]	; (c34 <usart_init+0x34c>)
     b66:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     b68:	2800      	cmp	r0, #0
     b6a:	d000      	beq.n	b6e <usart_init+0x286>
     b6c:	e6d4      	b.n	918 <usart_init+0x30>
     b6e:	e759      	b.n	a24 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
     b70:	6a33      	ldr	r3, [r6, #32]
     b72:	001f      	movs	r7, r3
     b74:	b2c0      	uxtb	r0, r0
     b76:	4b2d      	ldr	r3, [pc, #180]	; (c2c <usart_init+0x344>)
     b78:	4798      	blx	r3
     b7a:	0001      	movs	r1, r0
				status_code =
     b7c:	9b06      	ldr	r3, [sp, #24]
     b7e:	9300      	str	r3, [sp, #0]
     b80:	9b07      	ldr	r3, [sp, #28]
     b82:	220e      	movs	r2, #14
     b84:	a806      	add	r0, sp, #24
     b86:	4684      	mov	ip, r0
     b88:	4462      	add	r2, ip
     b8a:	0038      	movs	r0, r7
     b8c:	4f29      	ldr	r7, [pc, #164]	; (c34 <usart_init+0x34c>)
     b8e:	47b8      	blx	r7
     b90:	e7ea      	b.n	b68 <usart_init+0x280>
		if(config->lin_slave_enable) {
     b92:	7ef3      	ldrb	r3, [r6, #27]
     b94:	2b00      	cmp	r3, #0
     b96:	d082      	beq.n	a9e <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     b98:	2380      	movs	r3, #128	; 0x80
     b9a:	04db      	lsls	r3, r3, #19
     b9c:	431f      	orrs	r7, r3
     b9e:	e77e      	b.n	a9e <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ba0:	0020      	movs	r0, r4
     ba2:	4b25      	ldr	r3, [pc, #148]	; (c38 <usart_init+0x350>)
     ba4:	4798      	blx	r3
     ba6:	e007      	b.n	bb8 <usart_init+0x2d0>
     ba8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     baa:	2f04      	cmp	r7, #4
     bac:	d00d      	beq.n	bca <usart_init+0x2e2>
     bae:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     bb0:	00bb      	lsls	r3, r7, #2
     bb2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     bb4:	2800      	cmp	r0, #0
     bb6:	d0f3      	beq.n	ba0 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
     bb8:	1c43      	adds	r3, r0, #1
     bba:	d0f5      	beq.n	ba8 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bbc:	a90e      	add	r1, sp, #56	; 0x38
     bbe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     bc0:	0c00      	lsrs	r0, r0, #16
     bc2:	b2c0      	uxtb	r0, r0
     bc4:	4b1d      	ldr	r3, [pc, #116]	; (c3c <usart_init+0x354>)
     bc6:	4798      	blx	r3
     bc8:	e7ee      	b.n	ba8 <usart_init+0x2c0>
		module->callback[i]            = NULL;
     bca:	2300      	movs	r3, #0
     bcc:	60eb      	str	r3, [r5, #12]
     bce:	612b      	str	r3, [r5, #16]
     bd0:	616b      	str	r3, [r5, #20]
     bd2:	61ab      	str	r3, [r5, #24]
     bd4:	61eb      	str	r3, [r5, #28]
     bd6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     bd8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     bda:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     bdc:	2200      	movs	r2, #0
     bde:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     be0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     be2:	3330      	adds	r3, #48	; 0x30
     be4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     be6:	3301      	adds	r3, #1
     be8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     bea:	3301      	adds	r3, #1
     bec:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     bee:	3301      	adds	r3, #1
     bf0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     bf2:	6828      	ldr	r0, [r5, #0]
     bf4:	4b07      	ldr	r3, [pc, #28]	; (c14 <usart_init+0x32c>)
     bf6:	4798      	blx	r3
     bf8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     bfa:	4911      	ldr	r1, [pc, #68]	; (c40 <usart_init+0x358>)
     bfc:	4b11      	ldr	r3, [pc, #68]	; (c44 <usart_init+0x35c>)
     bfe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c00:	00a4      	lsls	r4, r4, #2
     c02:	4b11      	ldr	r3, [pc, #68]	; (c48 <usart_init+0x360>)
     c04:	50e5      	str	r5, [r4, r3]
	return status_code;
     c06:	2000      	movs	r0, #0
     c08:	e686      	b.n	918 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c0a:	2310      	movs	r3, #16
     c0c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c0e:	2300      	movs	r3, #0
     c10:	9307      	str	r3, [sp, #28]
     c12:	e6ee      	b.n	9f2 <usart_init+0x10a>
     c14:	000007e1 	.word	0x000007e1
     c18:	40000400 	.word	0x40000400
     c1c:	000011f5 	.word	0x000011f5
     c20:	00001185 	.word	0x00001185
     c24:	00000621 	.word	0x00000621
     c28:	41002000 	.word	0x41002000
     c2c:	00001219 	.word	0x00001219
     c30:	00000563 	.word	0x00000563
     c34:	0000058d 	.word	0x0000058d
     c38:	0000066d 	.word	0x0000066d
     c3c:	000012f1 	.word	0x000012f1
     c40:	00000cdd 	.word	0x00000cdd
     c44:	0000081d 	.word	0x0000081d
     c48:	200002b8 	.word	0x200002b8

00000c4c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     c4c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     c4e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     c50:	2a00      	cmp	r2, #0
     c52:	d101      	bne.n	c58 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     c54:	0018      	movs	r0, r3
     c56:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     c58:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     c5a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     c5c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     c5e:	2a00      	cmp	r2, #0
     c60:	d1f8      	bne.n	c54 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     c62:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     c64:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     c66:	2102      	movs	r1, #2
     c68:	7e13      	ldrb	r3, [r2, #24]
     c6a:	420b      	tst	r3, r1
     c6c:	d0fc      	beq.n	c68 <usart_write_wait+0x1c>
	return STATUS_OK;
     c6e:	2300      	movs	r3, #0
     c70:	e7f0      	b.n	c54 <usart_write_wait+0x8>

00000c72 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     c72:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     c74:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     c76:	2a00      	cmp	r2, #0
     c78:	d101      	bne.n	c7e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     c7a:	0018      	movs	r0, r3
     c7c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     c7e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     c80:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     c82:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     c84:	2a00      	cmp	r2, #0
     c86:	d1f8      	bne.n	c7a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     c88:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     c8a:	7e10      	ldrb	r0, [r2, #24]
     c8c:	0740      	lsls	r0, r0, #29
     c8e:	d5f4      	bpl.n	c7a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c90:	8b53      	ldrh	r3, [r2, #26]
     c92:	b2db      	uxtb	r3, r3
	if (error_code) {
     c94:	0698      	lsls	r0, r3, #26
     c96:	d01d      	beq.n	cd4 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     c98:	0798      	lsls	r0, r3, #30
     c9a:	d503      	bpl.n	ca4 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     c9c:	2302      	movs	r3, #2
     c9e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     ca0:	3318      	adds	r3, #24
     ca2:	e7ea      	b.n	c7a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ca4:	0758      	lsls	r0, r3, #29
     ca6:	d503      	bpl.n	cb0 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ca8:	2304      	movs	r3, #4
     caa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     cac:	331a      	adds	r3, #26
     cae:	e7e4      	b.n	c7a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     cb0:	07d8      	lsls	r0, r3, #31
     cb2:	d503      	bpl.n	cbc <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     cb4:	2301      	movs	r3, #1
     cb6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     cb8:	3312      	adds	r3, #18
     cba:	e7de      	b.n	c7a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     cbc:	06d8      	lsls	r0, r3, #27
     cbe:	d503      	bpl.n	cc8 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     cc0:	2310      	movs	r3, #16
     cc2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     cc4:	3332      	adds	r3, #50	; 0x32
     cc6:	e7d8      	b.n	c7a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     cc8:	069b      	lsls	r3, r3, #26
     cca:	d503      	bpl.n	cd4 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ccc:	2320      	movs	r3, #32
     cce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     cd0:	3321      	adds	r3, #33	; 0x21
     cd2:	e7d2      	b.n	c7a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     cd4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     cd6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     cd8:	2300      	movs	r3, #0
     cda:	e7ce      	b.n	c7a <usart_read_wait+0x8>

00000cdc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     cde:	0080      	lsls	r0, r0, #2
     ce0:	4b62      	ldr	r3, [pc, #392]	; (e6c <_usart_interrupt_handler+0x190>)
     ce2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     ce4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ce6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     ce8:	2b00      	cmp	r3, #0
     cea:	d1fc      	bne.n	ce6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     cec:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     cee:	7da6      	ldrb	r6, [r4, #22]
     cf0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     cf2:	2330      	movs	r3, #48	; 0x30
     cf4:	5ceb      	ldrb	r3, [r5, r3]
     cf6:	2231      	movs	r2, #49	; 0x31
     cf8:	5caf      	ldrb	r7, [r5, r2]
     cfa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     cfc:	07f3      	lsls	r3, r6, #31
     cfe:	d522      	bpl.n	d46 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     d00:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d02:	b29b      	uxth	r3, r3
     d04:	2b00      	cmp	r3, #0
     d06:	d01c      	beq.n	d42 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     d08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     d0a:	7813      	ldrb	r3, [r2, #0]
     d0c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     d0e:	1c51      	adds	r1, r2, #1
     d10:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d12:	7969      	ldrb	r1, [r5, #5]
     d14:	2901      	cmp	r1, #1
     d16:	d00e      	beq.n	d36 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     d18:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     d1a:	05db      	lsls	r3, r3, #23
     d1c:	0ddb      	lsrs	r3, r3, #23
     d1e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     d20:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d22:	3b01      	subs	r3, #1
     d24:	b29b      	uxth	r3, r3
     d26:	85eb      	strh	r3, [r5, #46]	; 0x2e
     d28:	2b00      	cmp	r3, #0
     d2a:	d10c      	bne.n	d46 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d2c:	3301      	adds	r3, #1
     d2e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     d30:	3301      	adds	r3, #1
     d32:	75a3      	strb	r3, [r4, #22]
     d34:	e007      	b.n	d46 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     d36:	7851      	ldrb	r1, [r2, #1]
     d38:	0209      	lsls	r1, r1, #8
     d3a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     d3c:	3202      	adds	r2, #2
     d3e:	62aa      	str	r2, [r5, #40]	; 0x28
     d40:	e7eb      	b.n	d1a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d42:	2301      	movs	r3, #1
     d44:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     d46:	07b3      	lsls	r3, r6, #30
     d48:	d506      	bpl.n	d58 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     d4a:	2302      	movs	r3, #2
     d4c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     d4e:	2200      	movs	r2, #0
     d50:	3331      	adds	r3, #49	; 0x31
     d52:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     d54:	07fb      	lsls	r3, r7, #31
     d56:	d41a      	bmi.n	d8e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     d58:	0773      	lsls	r3, r6, #29
     d5a:	d565      	bpl.n	e28 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     d5c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d5e:	b29b      	uxth	r3, r3
     d60:	2b00      	cmp	r3, #0
     d62:	d05f      	beq.n	e24 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d64:	8b63      	ldrh	r3, [r4, #26]
     d66:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     d68:	071a      	lsls	r2, r3, #28
     d6a:	d414      	bmi.n	d96 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d6c:	223f      	movs	r2, #63	; 0x3f
     d6e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d70:	2b00      	cmp	r3, #0
     d72:	d034      	beq.n	dde <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d74:	079a      	lsls	r2, r3, #30
     d76:	d511      	bpl.n	d9c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d78:	221a      	movs	r2, #26
     d7a:	2332      	movs	r3, #50	; 0x32
     d7c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d7e:	3b30      	subs	r3, #48	; 0x30
     d80:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d82:	077b      	lsls	r3, r7, #29
     d84:	d550      	bpl.n	e28 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d86:	0028      	movs	r0, r5
     d88:	696b      	ldr	r3, [r5, #20]
     d8a:	4798      	blx	r3
     d8c:	e04c      	b.n	e28 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d8e:	0028      	movs	r0, r5
     d90:	68eb      	ldr	r3, [r5, #12]
     d92:	4798      	blx	r3
     d94:	e7e0      	b.n	d58 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     d96:	2237      	movs	r2, #55	; 0x37
     d98:	4013      	ands	r3, r2
     d9a:	e7e9      	b.n	d70 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d9c:	075a      	lsls	r2, r3, #29
     d9e:	d505      	bpl.n	dac <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     da0:	221e      	movs	r2, #30
     da2:	2332      	movs	r3, #50	; 0x32
     da4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     da6:	3b2e      	subs	r3, #46	; 0x2e
     da8:	8363      	strh	r3, [r4, #26]
     daa:	e7ea      	b.n	d82 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     dac:	07da      	lsls	r2, r3, #31
     dae:	d505      	bpl.n	dbc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     db0:	2213      	movs	r2, #19
     db2:	2332      	movs	r3, #50	; 0x32
     db4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     db6:	3b31      	subs	r3, #49	; 0x31
     db8:	8363      	strh	r3, [r4, #26]
     dba:	e7e2      	b.n	d82 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     dbc:	06da      	lsls	r2, r3, #27
     dbe:	d505      	bpl.n	dcc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     dc0:	2242      	movs	r2, #66	; 0x42
     dc2:	2332      	movs	r3, #50	; 0x32
     dc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     dc6:	3b22      	subs	r3, #34	; 0x22
     dc8:	8363      	strh	r3, [r4, #26]
     dca:	e7da      	b.n	d82 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     dcc:	2220      	movs	r2, #32
     dce:	421a      	tst	r2, r3
     dd0:	d0d7      	beq.n	d82 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     dd2:	3221      	adds	r2, #33	; 0x21
     dd4:	2332      	movs	r3, #50	; 0x32
     dd6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     dd8:	3b12      	subs	r3, #18
     dda:	8363      	strh	r3, [r4, #26]
     ddc:	e7d1      	b.n	d82 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     dde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     de0:	05db      	lsls	r3, r3, #23
     de2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     de4:	b2da      	uxtb	r2, r3
     de6:	6a69      	ldr	r1, [r5, #36]	; 0x24
     de8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     dea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     dec:	1c51      	adds	r1, r2, #1
     dee:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     df0:	7969      	ldrb	r1, [r5, #5]
     df2:	2901      	cmp	r1, #1
     df4:	d010      	beq.n	e18 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     df6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     df8:	3b01      	subs	r3, #1
     dfa:	b29b      	uxth	r3, r3
     dfc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     dfe:	2b00      	cmp	r3, #0
     e00:	d112      	bne.n	e28 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e02:	3304      	adds	r3, #4
     e04:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     e06:	2200      	movs	r2, #0
     e08:	332e      	adds	r3, #46	; 0x2e
     e0a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     e0c:	07bb      	lsls	r3, r7, #30
     e0e:	d50b      	bpl.n	e28 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     e10:	0028      	movs	r0, r5
     e12:	692b      	ldr	r3, [r5, #16]
     e14:	4798      	blx	r3
     e16:	e007      	b.n	e28 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     e18:	0a1b      	lsrs	r3, r3, #8
     e1a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     e1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     e1e:	3301      	adds	r3, #1
     e20:	626b      	str	r3, [r5, #36]	; 0x24
     e22:	e7e8      	b.n	df6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e24:	2304      	movs	r3, #4
     e26:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     e28:	06f3      	lsls	r3, r6, #27
     e2a:	d504      	bpl.n	e36 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     e2c:	2310      	movs	r3, #16
     e2e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     e30:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     e32:	06fb      	lsls	r3, r7, #27
     e34:	d40e      	bmi.n	e54 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     e36:	06b3      	lsls	r3, r6, #26
     e38:	d504      	bpl.n	e44 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     e3a:	2320      	movs	r3, #32
     e3c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     e3e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     e40:	073b      	lsls	r3, r7, #28
     e42:	d40b      	bmi.n	e5c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     e44:	0733      	lsls	r3, r6, #28
     e46:	d504      	bpl.n	e52 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     e48:	2308      	movs	r3, #8
     e4a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     e4c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     e4e:	06bb      	lsls	r3, r7, #26
     e50:	d408      	bmi.n	e64 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     e54:	0028      	movs	r0, r5
     e56:	69eb      	ldr	r3, [r5, #28]
     e58:	4798      	blx	r3
     e5a:	e7ec      	b.n	e36 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     e5c:	0028      	movs	r0, r5
     e5e:	69ab      	ldr	r3, [r5, #24]
     e60:	4798      	blx	r3
     e62:	e7ef      	b.n	e44 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     e64:	6a2b      	ldr	r3, [r5, #32]
     e66:	0028      	movs	r0, r5
     e68:	4798      	blx	r3
}
     e6a:	e7f2      	b.n	e52 <_usart_interrupt_handler+0x176>
     e6c:	200002b8 	.word	0x200002b8

00000e70 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e70:	b510      	push	{r4, lr}
	switch (clock_source) {
     e72:	2808      	cmp	r0, #8
     e74:	d803      	bhi.n	e7e <system_clock_source_get_hz+0xe>
     e76:	0080      	lsls	r0, r0, #2
     e78:	4b1d      	ldr	r3, [pc, #116]	; (ef0 <system_clock_source_get_hz+0x80>)
     e7a:	581b      	ldr	r3, [r3, r0]
     e7c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     e7e:	2000      	movs	r0, #0
     e80:	e034      	b.n	eec <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
     e82:	4b1c      	ldr	r3, [pc, #112]	; (ef4 <system_clock_source_get_hz+0x84>)
     e84:	6918      	ldr	r0, [r3, #16]
     e86:	e031      	b.n	eec <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     e88:	4b1b      	ldr	r3, [pc, #108]	; (ef8 <system_clock_source_get_hz+0x88>)
     e8a:	7d18      	ldrb	r0, [r3, #20]
     e8c:	0700      	lsls	r0, r0, #28
     e8e:	0f80      	lsrs	r0, r0, #30
     e90:	1c43      	adds	r3, r0, #1
     e92:	481a      	ldr	r0, [pc, #104]	; (efc <system_clock_source_get_hz+0x8c>)
     e94:	4358      	muls	r0, r3
     e96:	e029      	b.n	eec <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
     e98:	4b16      	ldr	r3, [pc, #88]	; (ef4 <system_clock_source_get_hz+0x84>)
     e9a:	6958      	ldr	r0, [r3, #20]
     e9c:	e026      	b.n	eec <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     e9e:	4b15      	ldr	r3, [pc, #84]	; (ef4 <system_clock_source_get_hz+0x84>)
     ea0:	681b      	ldr	r3, [r3, #0]
			return 0;
     ea2:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     ea4:	079b      	lsls	r3, r3, #30
     ea6:	d521      	bpl.n	eec <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     ea8:	4913      	ldr	r1, [pc, #76]	; (ef8 <system_clock_source_get_hz+0x88>)
     eaa:	2280      	movs	r2, #128	; 0x80
     eac:	0052      	lsls	r2, r2, #1
     eae:	68cb      	ldr	r3, [r1, #12]
     eb0:	4213      	tst	r3, r2
     eb2:	d0fc      	beq.n	eae <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
     eb4:	4b0f      	ldr	r3, [pc, #60]	; (ef4 <system_clock_source_get_hz+0x84>)
     eb6:	681a      	ldr	r2, [r3, #0]
     eb8:	2324      	movs	r3, #36	; 0x24
     eba:	4013      	ands	r3, r2
     ebc:	2b04      	cmp	r3, #4
     ebe:	d001      	beq.n	ec4 <system_clock_source_get_hz+0x54>
			return 48000000UL;
     ec0:	480f      	ldr	r0, [pc, #60]	; (f00 <system_clock_source_get_hz+0x90>)
     ec2:	e013      	b.n	eec <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     ec4:	2000      	movs	r0, #0
     ec6:	4b0f      	ldr	r3, [pc, #60]	; (f04 <system_clock_source_get_hz+0x94>)
     ec8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     eca:	4b0a      	ldr	r3, [pc, #40]	; (ef4 <system_clock_source_get_hz+0x84>)
     ecc:	689b      	ldr	r3, [r3, #8]
     ece:	041b      	lsls	r3, r3, #16
     ed0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     ed2:	4358      	muls	r0, r3
     ed4:	e00a      	b.n	eec <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     ed6:	2328      	movs	r3, #40	; 0x28
     ed8:	4a07      	ldr	r2, [pc, #28]	; (ef8 <system_clock_source_get_hz+0x88>)
     eda:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     edc:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     ede:	079b      	lsls	r3, r3, #30
     ee0:	d504      	bpl.n	eec <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
     ee2:	4b04      	ldr	r3, [pc, #16]	; (ef4 <system_clock_source_get_hz+0x84>)
     ee4:	68d8      	ldr	r0, [r3, #12]
     ee6:	e001      	b.n	eec <system_clock_source_get_hz+0x7c>
		return 32768UL;
     ee8:	2080      	movs	r0, #128	; 0x80
     eea:	0200      	lsls	r0, r0, #8
	}
}
     eec:	bd10      	pop	{r4, pc}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	00003b1c 	.word	0x00003b1c
     ef4:	2000021c 	.word	0x2000021c
     ef8:	40000c00 	.word	0x40000c00
     efc:	003d0900 	.word	0x003d0900
     f00:	02dc6c00 	.word	0x02dc6c00
     f04:	00001219 	.word	0x00001219

00000f08 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     f08:	b510      	push	{r4, lr}
     f0a:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     f0c:	2280      	movs	r2, #128	; 0x80
     f0e:	0052      	lsls	r2, r2, #1
     f10:	4b32      	ldr	r3, [pc, #200]	; (fdc <system_clock_init+0xd4>)
     f12:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     f14:	3afd      	subs	r2, #253	; 0xfd
     f16:	4b32      	ldr	r3, [pc, #200]	; (fe0 <system_clock_init+0xd8>)
     f18:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     f1a:	4a32      	ldr	r2, [pc, #200]	; (fe4 <system_clock_init+0xdc>)
     f1c:	6853      	ldr	r3, [r2, #4]
     f1e:	211e      	movs	r1, #30
     f20:	438b      	bics	r3, r1
     f22:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     f24:	2380      	movs	r3, #128	; 0x80
     f26:	05db      	lsls	r3, r3, #23
     f28:	789b      	ldrb	r3, [r3, #2]
     f2a:	2b02      	cmp	r3, #2
     f2c:	d00f      	beq.n	f4e <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     f2e:	2380      	movs	r3, #128	; 0x80
     f30:	05db      	lsls	r3, r3, #23
     f32:	789b      	ldrb	r3, [r3, #2]
     f34:	b25b      	sxtb	r3, r3
     f36:	2b00      	cmp	r3, #0
     f38:	db09      	blt.n	f4e <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     f3a:	2380      	movs	r3, #128	; 0x80
     f3c:	05db      	lsls	r3, r3, #23
     f3e:	2201      	movs	r2, #1
     f40:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     f42:	3201      	adds	r2, #1
     f44:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     f46:	001a      	movs	r2, r3
     f48:	7993      	ldrb	r3, [r2, #6]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d0fc      	beq.n	f48 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     f4e:	4b23      	ldr	r3, [pc, #140]	; (fdc <system_clock_init+0xd4>)
     f50:	7d19      	ldrb	r1, [r3, #20]
     f52:	2280      	movs	r2, #128	; 0x80
     f54:	4252      	negs	r2, r2
     f56:	430a      	orrs	r2, r1
     f58:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     f5a:	7d1a      	ldrb	r2, [r3, #20]
     f5c:	2140      	movs	r1, #64	; 0x40
     f5e:	438a      	bics	r2, r1
     f60:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     f62:	4b21      	ldr	r3, [pc, #132]	; (fe8 <system_clock_init+0xe0>)
     f64:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     f66:	4c21      	ldr	r4, [pc, #132]	; (fec <system_clock_init+0xe4>)
     f68:	2301      	movs	r3, #1
     f6a:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     f6c:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     f6e:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
     f70:	a901      	add	r1, sp, #4
     f72:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     f74:	2300      	movs	r3, #0
     f76:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
     f78:	2206      	movs	r2, #6
     f7a:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
     f7c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     f7e:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f80:	2000      	movs	r0, #0
     f82:	4b1b      	ldr	r3, [pc, #108]	; (ff0 <system_clock_init+0xe8>)
     f84:	4798      	blx	r3
     f86:	2000      	movs	r0, #0
     f88:	4b1a      	ldr	r3, [pc, #104]	; (ff4 <system_clock_init+0xec>)
     f8a:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
     f8c:	2000      	movs	r0, #0
     f8e:	4b1a      	ldr	r3, [pc, #104]	; (ff8 <system_clock_init+0xf0>)
     f90:	4798      	blx	r3
     f92:	7921      	ldrb	r1, [r4, #4]
     f94:	b2c9      	uxtb	r1, r1
     f96:	4b19      	ldr	r3, [pc, #100]	; (ffc <system_clock_init+0xf4>)
     f98:	4798      	blx	r3
	uint32_t cpu_freq = system_cpu_clock_get_hz();

	/* Set the BUPDIV & LPDIV value such that backup & low power domain clock 
	 * does not exceed their max clock freq even if CPU is configured to it's 
	 * maximum frequency */
	if ((cpu_freq > 6000000) && ((CONF_CLOCK_BACKUP_DIVIDER == SYSTEM_MAIN_CLOCK_DIV_1) \
     f9a:	4b19      	ldr	r3, [pc, #100]	; (1000 <system_clock_init+0xf8>)
     f9c:	4298      	cmp	r0, r3
     f9e:	d902      	bls.n	fa6 <system_clock_init+0x9e>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     fa0:	2208      	movs	r2, #8
     fa2:	71a2      	strb	r2, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     fa4:	7162      	strb	r2, [r4, #5]
		system_backup_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
		system_low_power_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
	}

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */	
	if (cpu_freq <= 12000000) {
     fa6:	4b17      	ldr	r3, [pc, #92]	; (1004 <system_clock_init+0xfc>)
     fa8:	4298      	cmp	r0, r3
     faa:	d814      	bhi.n	fd6 <system_clock_init+0xce>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     fac:	2380      	movs	r3, #128	; 0x80
     fae:	05db      	lsls	r3, r3, #23
     fb0:	789b      	ldrb	r3, [r3, #2]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d00f      	beq.n	fd6 <system_clock_init+0xce>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     fb6:	2380      	movs	r3, #128	; 0x80
     fb8:	05db      	lsls	r3, r3, #23
     fba:	789b      	ldrb	r3, [r3, #2]
     fbc:	b25b      	sxtb	r3, r3
     fbe:	2b00      	cmp	r3, #0
     fc0:	db09      	blt.n	fd6 <system_clock_init+0xce>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     fc2:	2380      	movs	r3, #128	; 0x80
     fc4:	05db      	lsls	r3, r3, #23
     fc6:	2201      	movs	r2, #1
     fc8:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
     fca:	2200      	movs	r2, #0
     fcc:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
     fce:	001a      	movs	r2, r3
     fd0:	7993      	ldrb	r3, [r2, #6]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d0fc      	beq.n	fd0 <system_clock_init+0xc8>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     fd6:	b004      	add	sp, #16
     fd8:	bd10      	pop	{r4, pc}
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	40000c00 	.word	0x40000c00
     fe0:	40001400 	.word	0x40001400
     fe4:	41004000 	.word	0x41004000
     fe8:	00001009 	.word	0x00001009
     fec:	40000400 	.word	0x40000400
     ff0:	0000102d 	.word	0x0000102d
     ff4:	000010d9 	.word	0x000010d9
     ff8:	00001119 	.word	0x00001119
     ffc:	0000172d 	.word	0x0000172d
    1000:	005b8d80 	.word	0x005b8d80
    1004:	00b71b00 	.word	0x00b71b00

00001008 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    1008:	4a06      	ldr	r2, [pc, #24]	; (1024 <system_gclk_init+0x1c>)
    100a:	6953      	ldr	r3, [r2, #20]
    100c:	2140      	movs	r1, #64	; 0x40
    100e:	430b      	orrs	r3, r1
    1010:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1012:	2201      	movs	r2, #1
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <system_gclk_init+0x20>)
    1016:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1018:	0019      	movs	r1, r3
    101a:	780b      	ldrb	r3, [r1, #0]
    101c:	4213      	tst	r3, r2
    101e:	d1fc      	bne.n	101a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1020:	4770      	bx	lr
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	40000400 	.word	0x40000400
    1028:	40001800 	.word	0x40001800

0000102c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    102c:	b570      	push	{r4, r5, r6, lr}
    102e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1030:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1032:	784b      	ldrb	r3, [r1, #1]
    1034:	2b00      	cmp	r3, #0
    1036:	d002      	beq.n	103e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1038:	2380      	movs	r3, #128	; 0x80
    103a:	00db      	lsls	r3, r3, #3
    103c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    103e:	7a4b      	ldrb	r3, [r1, #9]
    1040:	2b00      	cmp	r3, #0
    1042:	d002      	beq.n	104a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1044:	2380      	movs	r3, #128	; 0x80
    1046:	011b      	lsls	r3, r3, #4
    1048:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    104a:	6848      	ldr	r0, [r1, #4]
    104c:	2801      	cmp	r0, #1
    104e:	d90f      	bls.n	1070 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1050:	1e43      	subs	r3, r0, #1
    1052:	4218      	tst	r0, r3
    1054:	d131      	bne.n	10ba <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1056:	2802      	cmp	r0, #2
    1058:	d92d      	bls.n	10b6 <system_gclk_gen_set_config+0x8a>
    105a:	2302      	movs	r3, #2
    105c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    105e:	3201      	adds	r2, #1
						mask <<= 1) {
    1060:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1062:	4298      	cmp	r0, r3
    1064:	d8fb      	bhi.n	105e <system_gclk_gen_set_config+0x32>
    1066:	2380      	movs	r3, #128	; 0x80
    1068:	015b      	lsls	r3, r3, #5
    106a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    106c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    106e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1070:	7a0b      	ldrb	r3, [r1, #8]
    1072:	2b00      	cmp	r3, #0
    1074:	d002      	beq.n	107c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1076:	2380      	movs	r3, #128	; 0x80
    1078:	019b      	lsls	r3, r3, #6
    107a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    107c:	2604      	movs	r6, #4
    107e:	40a6      	lsls	r6, r4
    1080:	4911      	ldr	r1, [pc, #68]	; (10c8 <system_gclk_gen_set_config+0x9c>)
    1082:	4a12      	ldr	r2, [pc, #72]	; (10cc <system_gclk_gen_set_config+0xa0>)
    1084:	684b      	ldr	r3, [r1, #4]
    1086:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    1088:	421e      	tst	r6, r3
    108a:	d1fb      	bne.n	1084 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    108c:	4b10      	ldr	r3, [pc, #64]	; (10d0 <system_gclk_gen_set_config+0xa4>)
    108e:	4798      	blx	r3
    1090:	00a4      	lsls	r4, r4, #2
    1092:	4b0d      	ldr	r3, [pc, #52]	; (10c8 <system_gclk_gen_set_config+0x9c>)
    1094:	469c      	mov	ip, r3
    1096:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1098:	6a22      	ldr	r2, [r4, #32]
    109a:	2380      	movs	r3, #128	; 0x80
    109c:	005b      	lsls	r3, r3, #1
    109e:	401a      	ands	r2, r3
    10a0:	432a      	orrs	r2, r5
    10a2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    10a4:	4661      	mov	r1, ip
    10a6:	4a09      	ldr	r2, [pc, #36]	; (10cc <system_gclk_gen_set_config+0xa0>)
    10a8:	684b      	ldr	r3, [r1, #4]
    10aa:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    10ac:	421e      	tst	r6, r3
    10ae:	d1fb      	bne.n	10a8 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    10b0:	4b08      	ldr	r3, [pc, #32]	; (10d4 <system_gclk_gen_set_config+0xa8>)
    10b2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    10b4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    10b6:	2200      	movs	r2, #0
    10b8:	e7d5      	b.n	1066 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    10ba:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    10bc:	2380      	movs	r3, #128	; 0x80
    10be:	009b      	lsls	r3, r3, #2
    10c0:	4318      	orrs	r0, r3
    10c2:	4305      	orrs	r5, r0
    10c4:	e7d4      	b.n	1070 <system_gclk_gen_set_config+0x44>
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	40001800 	.word	0x40001800
    10cc:	000007fc 	.word	0x000007fc
    10d0:	000002e9 	.word	0x000002e9
    10d4:	00000329 	.word	0x00000329

000010d8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    10d8:	b510      	push	{r4, lr}
    10da:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    10dc:	2204      	movs	r2, #4
    10de:	4082      	lsls	r2, r0
    10e0:	4809      	ldr	r0, [pc, #36]	; (1108 <system_gclk_gen_enable+0x30>)
    10e2:	490a      	ldr	r1, [pc, #40]	; (110c <system_gclk_gen_enable+0x34>)
    10e4:	6843      	ldr	r3, [r0, #4]
    10e6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    10e8:	421a      	tst	r2, r3
    10ea:	d1fb      	bne.n	10e4 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    10ec:	4b08      	ldr	r3, [pc, #32]	; (1110 <system_gclk_gen_enable+0x38>)
    10ee:	4798      	blx	r3
    10f0:	00a4      	lsls	r4, r4, #2
    10f2:	4b05      	ldr	r3, [pc, #20]	; (1108 <system_gclk_gen_enable+0x30>)
    10f4:	469c      	mov	ip, r3
    10f6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    10f8:	6a22      	ldr	r2, [r4, #32]
    10fa:	2380      	movs	r3, #128	; 0x80
    10fc:	005b      	lsls	r3, r3, #1
    10fe:	4313      	orrs	r3, r2
    1100:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    1102:	4b04      	ldr	r3, [pc, #16]	; (1114 <system_gclk_gen_enable+0x3c>)
    1104:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1106:	bd10      	pop	{r4, pc}
    1108:	40001800 	.word	0x40001800
    110c:	000007fc 	.word	0x000007fc
    1110:	000002e9 	.word	0x000002e9
    1114:	00000329 	.word	0x00000329

00001118 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    111a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    111c:	2204      	movs	r2, #4
    111e:	4082      	lsls	r2, r0
    1120:	4812      	ldr	r0, [pc, #72]	; (116c <system_gclk_gen_get_hz+0x54>)
    1122:	4913      	ldr	r1, [pc, #76]	; (1170 <system_gclk_gen_get_hz+0x58>)
    1124:	6843      	ldr	r3, [r0, #4]
    1126:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1128:	421a      	tst	r2, r3
    112a:	d1fb      	bne.n	1124 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    112c:	4b11      	ldr	r3, [pc, #68]	; (1174 <system_gclk_gen_get_hz+0x5c>)
    112e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1130:	4f0e      	ldr	r7, [pc, #56]	; (116c <system_gclk_gen_get_hz+0x54>)
    1132:	3408      	adds	r4, #8
    1134:	00a4      	lsls	r4, r4, #2
    1136:	59e0      	ldr	r0, [r4, r7]
    1138:	0700      	lsls	r0, r0, #28
    113a:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    113c:	4b0e      	ldr	r3, [pc, #56]	; (1178 <system_gclk_gen_get_hz+0x60>)
    113e:	4798      	blx	r3
    1140:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1142:	59e5      	ldr	r5, [r4, r7]
    1144:	04ed      	lsls	r5, r5, #19
    1146:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1148:	59e4      	ldr	r4, [r4, r7]
    114a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    114c:	4b0b      	ldr	r3, [pc, #44]	; (117c <system_gclk_gen_get_hz+0x64>)
    114e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1150:	2d00      	cmp	r5, #0
    1152:	d107      	bne.n	1164 <system_gclk_gen_get_hz+0x4c>
    1154:	2c01      	cmp	r4, #1
    1156:	d907      	bls.n	1168 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1158:	0021      	movs	r1, r4
    115a:	0030      	movs	r0, r6
    115c:	4b08      	ldr	r3, [pc, #32]	; (1180 <system_gclk_gen_get_hz+0x68>)
    115e:	4798      	blx	r3
    1160:	0006      	movs	r6, r0
    1162:	e001      	b.n	1168 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1164:	3401      	adds	r4, #1
    1166:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1168:	0030      	movs	r0, r6
    116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    116c:	40001800 	.word	0x40001800
    1170:	000007fc 	.word	0x000007fc
    1174:	000002e9 	.word	0x000002e9
    1178:	00000e71 	.word	0x00000e71
    117c:	00000329 	.word	0x00000329
    1180:	0000172d 	.word	0x0000172d

00001184 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1184:	b510      	push	{r4, lr}
    1186:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1188:	4b09      	ldr	r3, [pc, #36]	; (11b0 <system_gclk_chan_enable+0x2c>)
    118a:	4798      	blx	r3
    118c:	00a0      	lsls	r0, r4, #2
    118e:	4b09      	ldr	r3, [pc, #36]	; (11b4 <system_gclk_chan_enable+0x30>)
    1190:	469c      	mov	ip, r3
    1192:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1194:	2280      	movs	r2, #128	; 0x80
    1196:	5883      	ldr	r3, [r0, r2]
    1198:	2140      	movs	r1, #64	; 0x40
    119a:	430b      	orrs	r3, r1
    119c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    119e:	3140      	adds	r1, #64	; 0x40
    11a0:	3a40      	subs	r2, #64	; 0x40
    11a2:	5843      	ldr	r3, [r0, r1]
    11a4:	421a      	tst	r2, r3
    11a6:	d0fc      	beq.n	11a2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    11a8:	4b03      	ldr	r3, [pc, #12]	; (11b8 <system_gclk_chan_enable+0x34>)
    11aa:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    11ac:	bd10      	pop	{r4, pc}
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	000002e9 	.word	0x000002e9
    11b4:	40001800 	.word	0x40001800
    11b8:	00000329 	.word	0x00000329

000011bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    11bc:	b510      	push	{r4, lr}
    11be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11c0:	4b09      	ldr	r3, [pc, #36]	; (11e8 <system_gclk_chan_disable+0x2c>)
    11c2:	4798      	blx	r3
    11c4:	00a0      	lsls	r0, r4, #2
    11c6:	4b09      	ldr	r3, [pc, #36]	; (11ec <system_gclk_chan_disable+0x30>)
    11c8:	469c      	mov	ip, r3
    11ca:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    11cc:	2280      	movs	r2, #128	; 0x80
    11ce:	5883      	ldr	r3, [r0, r2]
    11d0:	2140      	movs	r1, #64	; 0x40
    11d2:	438b      	bics	r3, r1
    11d4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    11d6:	3140      	adds	r1, #64	; 0x40
    11d8:	3a40      	subs	r2, #64	; 0x40
    11da:	5843      	ldr	r3, [r0, r1]
    11dc:	421a      	tst	r2, r3
    11de:	d1fc      	bne.n	11da <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    11e0:	4b03      	ldr	r3, [pc, #12]	; (11f0 <system_gclk_chan_disable+0x34>)
    11e2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    11e4:	bd10      	pop	{r4, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	000002e9 	.word	0x000002e9
    11ec:	40001800 	.word	0x40001800
    11f0:	00000329 	.word	0x00000329

000011f4 <system_gclk_chan_set_config>:
{
    11f4:	b570      	push	{r4, r5, r6, lr}
    11f6:	0004      	movs	r4, r0
    11f8:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    11fa:	4b05      	ldr	r3, [pc, #20]	; (1210 <system_gclk_chan_set_config+0x1c>)
    11fc:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    11fe:	782a      	ldrb	r2, [r5, #0]
    1200:	230f      	movs	r3, #15
    1202:	4013      	ands	r3, r2
    1204:	3420      	adds	r4, #32
    1206:	00a4      	lsls	r4, r4, #2
    1208:	4a02      	ldr	r2, [pc, #8]	; (1214 <system_gclk_chan_set_config+0x20>)
    120a:	50a3      	str	r3, [r4, r2]
}
    120c:	bd70      	pop	{r4, r5, r6, pc}
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	000011bd 	.word	0x000011bd
    1214:	40001800 	.word	0x40001800

00001218 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1218:	b510      	push	{r4, lr}
    121a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    121c:	4b06      	ldr	r3, [pc, #24]	; (1238 <system_gclk_chan_get_hz+0x20>)
    121e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1220:	3420      	adds	r4, #32
    1222:	00a4      	lsls	r4, r4, #2
    1224:	4b05      	ldr	r3, [pc, #20]	; (123c <system_gclk_chan_get_hz+0x24>)
    1226:	58e4      	ldr	r4, [r4, r3]
    1228:	0724      	lsls	r4, r4, #28
    122a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    122c:	4b04      	ldr	r3, [pc, #16]	; (1240 <system_gclk_chan_get_hz+0x28>)
    122e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1230:	0020      	movs	r0, r4
    1232:	4b04      	ldr	r3, [pc, #16]	; (1244 <system_gclk_chan_get_hz+0x2c>)
    1234:	4798      	blx	r3
}
    1236:	bd10      	pop	{r4, pc}
    1238:	000002e9 	.word	0x000002e9
    123c:	40001800 	.word	0x40001800
    1240:	00000329 	.word	0x00000329
    1244:	00001119 	.word	0x00001119

00001248 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1248:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    124a:	78d3      	ldrb	r3, [r2, #3]
    124c:	2b00      	cmp	r3, #0
    124e:	d135      	bne.n	12bc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1250:	7813      	ldrb	r3, [r2, #0]
    1252:	2b80      	cmp	r3, #128	; 0x80
    1254:	d029      	beq.n	12aa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1256:	061b      	lsls	r3, r3, #24
    1258:	2480      	movs	r4, #128	; 0x80
    125a:	0264      	lsls	r4, r4, #9
    125c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    125e:	7854      	ldrb	r4, [r2, #1]
    1260:	2502      	movs	r5, #2
    1262:	43ac      	bics	r4, r5
    1264:	d106      	bne.n	1274 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1266:	7894      	ldrb	r4, [r2, #2]
    1268:	2c00      	cmp	r4, #0
    126a:	d120      	bne.n	12ae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    126c:	2480      	movs	r4, #128	; 0x80
    126e:	02a4      	lsls	r4, r4, #10
    1270:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1272:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1274:	7854      	ldrb	r4, [r2, #1]
    1276:	3c01      	subs	r4, #1
    1278:	2c01      	cmp	r4, #1
    127a:	d91c      	bls.n	12b6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    127c:	040d      	lsls	r5, r1, #16
    127e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1280:	24a0      	movs	r4, #160	; 0xa0
    1282:	05e4      	lsls	r4, r4, #23
    1284:	432c      	orrs	r4, r5
    1286:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1288:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    128a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    128c:	24d0      	movs	r4, #208	; 0xd0
    128e:	0624      	lsls	r4, r4, #24
    1290:	432c      	orrs	r4, r5
    1292:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1294:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1296:	78d4      	ldrb	r4, [r2, #3]
    1298:	2c00      	cmp	r4, #0
    129a:	d122      	bne.n	12e2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    129c:	035b      	lsls	r3, r3, #13
    129e:	d51c      	bpl.n	12da <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    12a0:	7893      	ldrb	r3, [r2, #2]
    12a2:	2b01      	cmp	r3, #1
    12a4:	d01e      	beq.n	12e4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    12a6:	6141      	str	r1, [r0, #20]
    12a8:	e017      	b.n	12da <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    12aa:	2300      	movs	r3, #0
    12ac:	e7d7      	b.n	125e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    12ae:	24c0      	movs	r4, #192	; 0xc0
    12b0:	02e4      	lsls	r4, r4, #11
    12b2:	4323      	orrs	r3, r4
    12b4:	e7dd      	b.n	1272 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    12b6:	4c0d      	ldr	r4, [pc, #52]	; (12ec <_system_pinmux_config+0xa4>)
    12b8:	4023      	ands	r3, r4
    12ba:	e7df      	b.n	127c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    12bc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12be:	040c      	lsls	r4, r1, #16
    12c0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12c2:	23a0      	movs	r3, #160	; 0xa0
    12c4:	05db      	lsls	r3, r3, #23
    12c6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12c8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    12ca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    12cc:	23d0      	movs	r3, #208	; 0xd0
    12ce:	061b      	lsls	r3, r3, #24
    12d0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12d2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    12d4:	78d3      	ldrb	r3, [r2, #3]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d103      	bne.n	12e2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    12da:	7853      	ldrb	r3, [r2, #1]
    12dc:	3b01      	subs	r3, #1
    12de:	2b01      	cmp	r3, #1
    12e0:	d902      	bls.n	12e8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    12e2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    12e4:	6181      	str	r1, [r0, #24]
    12e6:	e7f8      	b.n	12da <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    12e8:	6081      	str	r1, [r0, #8]
}
    12ea:	e7fa      	b.n	12e2 <_system_pinmux_config+0x9a>
    12ec:	fffbffff 	.word	0xfffbffff

000012f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    12f0:	b510      	push	{r4, lr}
    12f2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12f4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12f8:	2900      	cmp	r1, #0
    12fa:	d104      	bne.n	1306 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    12fc:	0943      	lsrs	r3, r0, #5
    12fe:	01db      	lsls	r3, r3, #7
    1300:	4905      	ldr	r1, [pc, #20]	; (1318 <system_pinmux_pin_set_config+0x28>)
    1302:	468c      	mov	ip, r1
    1304:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1306:	241f      	movs	r4, #31
    1308:	4020      	ands	r0, r4
    130a:	2101      	movs	r1, #1
    130c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    130e:	0018      	movs	r0, r3
    1310:	4b02      	ldr	r3, [pc, #8]	; (131c <system_pinmux_pin_set_config+0x2c>)
    1312:	4798      	blx	r3
}
    1314:	bd10      	pop	{r4, pc}
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	40002800 	.word	0x40002800
    131c:	00001249 	.word	0x00001249

00001320 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1320:	4770      	bx	lr
	...

00001324 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1324:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <system_init+0x18>)
    1328:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    132a:	4b05      	ldr	r3, [pc, #20]	; (1340 <system_init+0x1c>)
    132c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    132e:	4b05      	ldr	r3, [pc, #20]	; (1344 <system_init+0x20>)
    1330:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1332:	4b05      	ldr	r3, [pc, #20]	; (1348 <system_init+0x24>)
    1334:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1336:	4b05      	ldr	r3, [pc, #20]	; (134c <system_init+0x28>)
    1338:	4798      	blx	r3
}
    133a:	bd10      	pop	{r4, pc}
    133c:	00000f09 	.word	0x00000f09
    1340:	00000359 	.word	0x00000359
    1344:	00001321 	.word	0x00001321
    1348:	00000405 	.word	0x00000405
    134c:	00001321 	.word	0x00001321

00001350 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1350:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1352:	0080      	lsls	r0, r0, #2
    1354:	4b16      	ldr	r3, [pc, #88]	; (13b0 <_tc_interrupt_handler+0x60>)
    1356:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1358:	6823      	ldr	r3, [r4, #0]
    135a:	7a9d      	ldrb	r5, [r3, #10]
    135c:	7e22      	ldrb	r2, [r4, #24]
    135e:	7e63      	ldrb	r3, [r4, #25]
    1360:	4013      	ands	r3, r2
    1362:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1364:	07eb      	lsls	r3, r5, #31
    1366:	d406      	bmi.n	1376 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1368:	07ab      	lsls	r3, r5, #30
    136a:	d40b      	bmi.n	1384 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    136c:	06eb      	lsls	r3, r5, #27
    136e:	d410      	bmi.n	1392 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1370:	06ab      	lsls	r3, r5, #26
    1372:	d415      	bmi.n	13a0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1374:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1376:	0020      	movs	r0, r4
    1378:	68a3      	ldr	r3, [r4, #8]
    137a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    137c:	2301      	movs	r3, #1
    137e:	6822      	ldr	r2, [r4, #0]
    1380:	7293      	strb	r3, [r2, #10]
    1382:	e7f1      	b.n	1368 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1384:	0020      	movs	r0, r4
    1386:	68e3      	ldr	r3, [r4, #12]
    1388:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    138a:	2302      	movs	r3, #2
    138c:	6822      	ldr	r2, [r4, #0]
    138e:	7293      	strb	r3, [r2, #10]
    1390:	e7ec      	b.n	136c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1392:	0020      	movs	r0, r4
    1394:	6923      	ldr	r3, [r4, #16]
    1396:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1398:	2310      	movs	r3, #16
    139a:	6822      	ldr	r2, [r4, #0]
    139c:	7293      	strb	r3, [r2, #10]
    139e:	e7e7      	b.n	1370 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    13a0:	0020      	movs	r0, r4
    13a2:	6963      	ldr	r3, [r4, #20]
    13a4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    13a6:	6823      	ldr	r3, [r4, #0]
    13a8:	2220      	movs	r2, #32
    13aa:	729a      	strb	r2, [r3, #10]
}
    13ac:	e7e2      	b.n	1374 <_tc_interrupt_handler+0x24>
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	200002d0 	.word	0x200002d0

000013b4 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    13b4:	b510      	push	{r4, lr}
    13b6:	2000      	movs	r0, #0
    13b8:	4b01      	ldr	r3, [pc, #4]	; (13c0 <TC0_Handler+0xc>)
    13ba:	4798      	blx	r3
    13bc:	bd10      	pop	{r4, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	00001351 	.word	0x00001351

000013c4 <TC1_Handler>:
    13c4:	b510      	push	{r4, lr}
    13c6:	2001      	movs	r0, #1
    13c8:	4b01      	ldr	r3, [pc, #4]	; (13d0 <TC1_Handler+0xc>)
    13ca:	4798      	blx	r3
    13cc:	bd10      	pop	{r4, pc}
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	00001351 	.word	0x00001351

000013d4 <TC2_Handler>:
    13d4:	b510      	push	{r4, lr}
    13d6:	2002      	movs	r0, #2
    13d8:	4b01      	ldr	r3, [pc, #4]	; (13e0 <TC2_Handler+0xc>)
    13da:	4798      	blx	r3
    13dc:	bd10      	pop	{r4, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	00001351 	.word	0x00001351

000013e4 <TC3_Handler>:
    13e4:	b510      	push	{r4, lr}
    13e6:	2003      	movs	r0, #3
    13e8:	4b01      	ldr	r3, [pc, #4]	; (13f0 <TC3_Handler+0xc>)
    13ea:	4798      	blx	r3
    13ec:	bd10      	pop	{r4, pc}
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	00001351 	.word	0x00001351

000013f4 <TC4_Handler>:
    13f4:	b510      	push	{r4, lr}
    13f6:	2004      	movs	r0, #4
    13f8:	4b01      	ldr	r3, [pc, #4]	; (1400 <TC4_Handler+0xc>)
    13fa:	4798      	blx	r3
    13fc:	bd10      	pop	{r4, pc}
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	00001351 	.word	0x00001351

00001404 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1404:	e7fe      	b.n	1404 <Dummy_Handler>
	...

00001408 <Reset_Handler>:
{
    1408:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    140a:	4a1a      	ldr	r2, [pc, #104]	; (1474 <Reset_Handler+0x6c>)
    140c:	4b1a      	ldr	r3, [pc, #104]	; (1478 <Reset_Handler+0x70>)
    140e:	429a      	cmp	r2, r3
    1410:	d011      	beq.n	1436 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1412:	001a      	movs	r2, r3
    1414:	4b19      	ldr	r3, [pc, #100]	; (147c <Reset_Handler+0x74>)
    1416:	429a      	cmp	r2, r3
    1418:	d20d      	bcs.n	1436 <Reset_Handler+0x2e>
    141a:	4a19      	ldr	r2, [pc, #100]	; (1480 <Reset_Handler+0x78>)
    141c:	3303      	adds	r3, #3
    141e:	1a9b      	subs	r3, r3, r2
    1420:	089b      	lsrs	r3, r3, #2
    1422:	3301      	adds	r3, #1
    1424:	009b      	lsls	r3, r3, #2
    1426:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1428:	4813      	ldr	r0, [pc, #76]	; (1478 <Reset_Handler+0x70>)
    142a:	4912      	ldr	r1, [pc, #72]	; (1474 <Reset_Handler+0x6c>)
    142c:	588c      	ldr	r4, [r1, r2]
    142e:	5084      	str	r4, [r0, r2]
    1430:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1432:	429a      	cmp	r2, r3
    1434:	d1fa      	bne.n	142c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1436:	4a13      	ldr	r2, [pc, #76]	; (1484 <Reset_Handler+0x7c>)
    1438:	4b13      	ldr	r3, [pc, #76]	; (1488 <Reset_Handler+0x80>)
    143a:	429a      	cmp	r2, r3
    143c:	d20a      	bcs.n	1454 <Reset_Handler+0x4c>
    143e:	43d3      	mvns	r3, r2
    1440:	4911      	ldr	r1, [pc, #68]	; (1488 <Reset_Handler+0x80>)
    1442:	185b      	adds	r3, r3, r1
    1444:	2103      	movs	r1, #3
    1446:	438b      	bics	r3, r1
    1448:	3304      	adds	r3, #4
    144a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    144c:	2100      	movs	r1, #0
    144e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1450:	4293      	cmp	r3, r2
    1452:	d1fc      	bne.n	144e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1454:	4a0d      	ldr	r2, [pc, #52]	; (148c <Reset_Handler+0x84>)
    1456:	21ff      	movs	r1, #255	; 0xff
    1458:	4b0d      	ldr	r3, [pc, #52]	; (1490 <Reset_Handler+0x88>)
    145a:	438b      	bics	r3, r1
    145c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    145e:	4a0d      	ldr	r2, [pc, #52]	; (1494 <Reset_Handler+0x8c>)
    1460:	6853      	ldr	r3, [r2, #4]
    1462:	397f      	subs	r1, #127	; 0x7f
    1464:	430b      	orrs	r3, r1
    1466:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1468:	4b0b      	ldr	r3, [pc, #44]	; (1498 <Reset_Handler+0x90>)
    146a:	4798      	blx	r3
        main();
    146c:	4b0b      	ldr	r3, [pc, #44]	; (149c <Reset_Handler+0x94>)
    146e:	4798      	blx	r3
    1470:	e7fe      	b.n	1470 <Reset_Handler+0x68>
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	00003d2c 	.word	0x00003d2c
    1478:	20000000 	.word	0x20000000
    147c:	200001dc 	.word	0x200001dc
    1480:	20000004 	.word	0x20000004
    1484:	200001dc 	.word	0x200001dc
    1488:	200002f4 	.word	0x200002f4
    148c:	e000ed00 	.word	0xe000ed00
    1490:	00000000 	.word	0x00000000
    1494:	41004000 	.word	0x41004000
    1498:	00001899 	.word	0x00001899
    149c:	000015b5 	.word	0x000015b5

000014a0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    14a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a2:	46c6      	mov	lr, r8
    14a4:	b500      	push	{lr}
    14a6:	000c      	movs	r4, r1
    14a8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    14aa:	2800      	cmp	r0, #0
    14ac:	d10f      	bne.n	14ce <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    14ae:	2a00      	cmp	r2, #0
    14b0:	dd11      	ble.n	14d6 <_read+0x36>
    14b2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    14b4:	4e09      	ldr	r6, [pc, #36]	; (14dc <_read+0x3c>)
    14b6:	4d0a      	ldr	r5, [pc, #40]	; (14e0 <_read+0x40>)
    14b8:	6830      	ldr	r0, [r6, #0]
    14ba:	0021      	movs	r1, r4
    14bc:	682b      	ldr	r3, [r5, #0]
    14be:	4798      	blx	r3
		ptr++;
    14c0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    14c2:	42bc      	cmp	r4, r7
    14c4:	d1f8      	bne.n	14b8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    14c6:	4640      	mov	r0, r8
    14c8:	bc04      	pop	{r2}
    14ca:	4690      	mov	r8, r2
    14cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    14ce:	2301      	movs	r3, #1
    14d0:	425b      	negs	r3, r3
    14d2:	4698      	mov	r8, r3
    14d4:	e7f7      	b.n	14c6 <_read+0x26>
	for (; len > 0; --len) {
    14d6:	4680      	mov	r8, r0
    14d8:	e7f5      	b.n	14c6 <_read+0x26>
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	200002ec 	.word	0x200002ec
    14e0:	200002e4 	.word	0x200002e4

000014e4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    14e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14e6:	46c6      	mov	lr, r8
    14e8:	b500      	push	{lr}
    14ea:	000e      	movs	r6, r1
    14ec:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    14ee:	3801      	subs	r0, #1
    14f0:	2802      	cmp	r0, #2
    14f2:	d810      	bhi.n	1516 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    14f4:	2a00      	cmp	r2, #0
    14f6:	d011      	beq.n	151c <_write+0x38>
    14f8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    14fa:	4b0c      	ldr	r3, [pc, #48]	; (152c <_write+0x48>)
    14fc:	4698      	mov	r8, r3
    14fe:	4f0c      	ldr	r7, [pc, #48]	; (1530 <_write+0x4c>)
    1500:	4643      	mov	r3, r8
    1502:	6818      	ldr	r0, [r3, #0]
    1504:	5d31      	ldrb	r1, [r6, r4]
    1506:	683b      	ldr	r3, [r7, #0]
    1508:	4798      	blx	r3
    150a:	2800      	cmp	r0, #0
    150c:	db08      	blt.n	1520 <_write+0x3c>
			return -1;
		}
		++nChars;
    150e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1510:	42a5      	cmp	r5, r4
    1512:	d1f5      	bne.n	1500 <_write+0x1c>
    1514:	e006      	b.n	1524 <_write+0x40>
		return -1;
    1516:	2401      	movs	r4, #1
    1518:	4264      	negs	r4, r4
    151a:	e003      	b.n	1524 <_write+0x40>
	for (; len != 0; --len) {
    151c:	0014      	movs	r4, r2
    151e:	e001      	b.n	1524 <_write+0x40>
			return -1;
    1520:	2401      	movs	r4, #1
    1522:	4264      	negs	r4, r4
	}
	return nChars;
}
    1524:	0020      	movs	r0, r4
    1526:	bc04      	pop	{r2}
    1528:	4690      	mov	r8, r2
    152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    152c:	200002ec 	.word	0x200002ec
    1530:	200002e8 	.word	0x200002e8

00001534 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1534:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1536:	4a06      	ldr	r2, [pc, #24]	; (1550 <_sbrk+0x1c>)
    1538:	6812      	ldr	r2, [r2, #0]
    153a:	2a00      	cmp	r2, #0
    153c:	d004      	beq.n	1548 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    153e:	4a04      	ldr	r2, [pc, #16]	; (1550 <_sbrk+0x1c>)
    1540:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1542:	18c3      	adds	r3, r0, r3
    1544:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1546:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1548:	4902      	ldr	r1, [pc, #8]	; (1554 <_sbrk+0x20>)
    154a:	4a01      	ldr	r2, [pc, #4]	; (1550 <_sbrk+0x1c>)
    154c:	6011      	str	r1, [r2, #0]
    154e:	e7f6      	b.n	153e <_sbrk+0xa>
    1550:	20000234 	.word	0x20000234
    1554:	200022f8 	.word	0x200022f8

00001558 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1558:	2001      	movs	r0, #1
    155a:	4240      	negs	r0, r0
    155c:	4770      	bx	lr

0000155e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    155e:	2380      	movs	r3, #128	; 0x80
    1560:	019b      	lsls	r3, r3, #6
    1562:	604b      	str	r3, [r1, #4]

	return 0;
}
    1564:	2000      	movs	r0, #0
    1566:	4770      	bx	lr

00001568 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1568:	2001      	movs	r0, #1
    156a:	4770      	bx	lr

0000156c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    156c:	2000      	movs	r0, #0
    156e:	4770      	bx	lr

00001570 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1570:	b570      	push	{r4, r5, r6, lr}
    1572:	b082      	sub	sp, #8
    1574:	0005      	movs	r5, r0
    1576:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1578:	2200      	movs	r2, #0
    157a:	466b      	mov	r3, sp
    157c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    157e:	4c06      	ldr	r4, [pc, #24]	; (1598 <usart_serial_getchar+0x28>)
    1580:	466b      	mov	r3, sp
    1582:	1d99      	adds	r1, r3, #6
    1584:	0028      	movs	r0, r5
    1586:	47a0      	blx	r4
    1588:	2800      	cmp	r0, #0
    158a:	d1f9      	bne.n	1580 <usart_serial_getchar+0x10>

	*c = temp;
    158c:	466b      	mov	r3, sp
    158e:	3306      	adds	r3, #6
    1590:	881b      	ldrh	r3, [r3, #0]
    1592:	7033      	strb	r3, [r6, #0]
}
    1594:	b002      	add	sp, #8
    1596:	bd70      	pop	{r4, r5, r6, pc}
    1598:	00000c73 	.word	0x00000c73

0000159c <usart_serial_putchar>:
{
    159c:	b570      	push	{r4, r5, r6, lr}
    159e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    15a0:	b28c      	uxth	r4, r1
    15a2:	4e03      	ldr	r6, [pc, #12]	; (15b0 <usart_serial_putchar+0x14>)
    15a4:	0021      	movs	r1, r4
    15a6:	0028      	movs	r0, r5
    15a8:	47b0      	blx	r6
    15aa:	2800      	cmp	r0, #0
    15ac:	d1fa      	bne.n	15a4 <usart_serial_putchar+0x8>
}
    15ae:	bd70      	pop	{r4, r5, r6, pc}
    15b0:	00000c4d 	.word	0x00000c4d

000015b4 <main>:
 *  \brief getting-started Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
*/
int main(void)
{
    15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b6:	b093      	sub	sp, #76	; 0x4c
	struct port_config pin;

	system_init();
    15b8:	4b45      	ldr	r3, [pc, #276]	; (16d0 <main+0x11c>)
    15ba:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    15bc:	aa01      	add	r2, sp, #4
    15be:	2380      	movs	r3, #128	; 0x80
    15c0:	05db      	lsls	r3, r3, #23
    15c2:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    15c4:	2300      	movs	r3, #0
    15c6:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    15c8:	21ff      	movs	r1, #255	; 0xff
    15ca:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    15cc:	2100      	movs	r1, #0
    15ce:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    15d0:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    15d2:	2401      	movs	r4, #1
    15d4:	2024      	movs	r0, #36	; 0x24
    15d6:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    15d8:	3001      	adds	r0, #1
    15da:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    15dc:	3001      	adds	r0, #1
    15de:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    15e0:	3001      	adds	r0, #1
    15e2:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    15e4:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    15e6:	3005      	adds	r0, #5
    15e8:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    15ea:	3001      	adds	r0, #1
    15ec:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    15ee:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    15f0:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    15f2:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    15f4:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    15f6:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    15f8:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    15fa:	2313      	movs	r3, #19
    15fc:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    15fe:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    1600:	2380      	movs	r3, #128	; 0x80
    1602:	035b      	lsls	r3, r3, #13
    1604:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    1606:	4b33      	ldr	r3, [pc, #204]	; (16d4 <main+0x120>)
    1608:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    160a:	4b33      	ldr	r3, [pc, #204]	; (16d8 <main+0x124>)
    160c:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    160e:	2301      	movs	r3, #1
    1610:	425b      	negs	r3, r3
    1612:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    1614:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    1616:	23e1      	movs	r3, #225	; 0xe1
    1618:	025b      	lsls	r3, r3, #9
    161a:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    161c:	4d2f      	ldr	r5, [pc, #188]	; (16dc <main+0x128>)
    161e:	4b30      	ldr	r3, [pc, #192]	; (16e0 <main+0x12c>)
    1620:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1622:	4930      	ldr	r1, [pc, #192]	; (16e4 <main+0x130>)
    1624:	4b30      	ldr	r3, [pc, #192]	; (16e8 <main+0x134>)
    1626:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1628:	4930      	ldr	r1, [pc, #192]	; (16ec <main+0x138>)
    162a:	4b31      	ldr	r3, [pc, #196]	; (16f0 <main+0x13c>)
    162c:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    162e:	4931      	ldr	r1, [pc, #196]	; (16f4 <main+0x140>)
    1630:	0028      	movs	r0, r5
    1632:	4b31      	ldr	r3, [pc, #196]	; (16f8 <main+0x144>)
    1634:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1636:	4f31      	ldr	r7, [pc, #196]	; (16fc <main+0x148>)
    1638:	683b      	ldr	r3, [r7, #0]
    163a:	6898      	ldr	r0, [r3, #8]
    163c:	2100      	movs	r1, #0
    163e:	4e30      	ldr	r6, [pc, #192]	; (1700 <main+0x14c>)
    1640:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1642:	683b      	ldr	r3, [r7, #0]
    1644:	6858      	ldr	r0, [r3, #4]
    1646:	2100      	movs	r1, #0
    1648:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    164a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    164c:	0030      	movs	r0, r6
    164e:	4b2d      	ldr	r3, [pc, #180]	; (1704 <main+0x150>)
    1650:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1652:	231f      	movs	r3, #31
    1654:	4018      	ands	r0, r3
    1656:	4084      	lsls	r4, r0
    1658:	4b2b      	ldr	r3, [pc, #172]	; (1708 <main+0x154>)
    165a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    165c:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    165e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1660:	2a00      	cmp	r2, #0
    1662:	d1fc      	bne.n	165e <main+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1664:	6833      	ldr	r3, [r6, #0]
    1666:	3202      	adds	r2, #2
    1668:	4313      	orrs	r3, r2
    166a:	6033      	str	r3, [r6, #0]

	/*Configures TC callback*/
//	configure_tc_callbacks();

	/*Initialize the delay driver*/
	delay_init();
    166c:	4b27      	ldr	r3, [pc, #156]	; (170c <main+0x158>)
    166e:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    1670:	a911      	add	r1, sp, #68	; 0x44
    1672:	2301      	movs	r3, #1
    1674:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1676:	2200      	movs	r2, #0
    1678:	708a      	strb	r2, [r1, #2]
//	system_interrupt_enable_global();


    /*Configures PORT for LED0*/
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
    167a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
    167c:	202a      	movs	r0, #42	; 0x2a
    167e:	4b24      	ldr	r3, [pc, #144]	; (1710 <main+0x15c>)
    1680:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1682:	4c24      	ldr	r4, [pc, #144]	; (1714 <main+0x160>)
    1684:	2580      	movs	r5, #128	; 0x80
    1686:	00ed      	lsls	r5, r5, #3
    1688:	61a5      	str	r5, [r4, #24]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    168a:	61e5      	str	r5, [r4, #28]

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	for (int i = 0; i < 3; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_s(1);
    168c:	27fa      	movs	r7, #250	; 0xfa
    168e:	00bf      	lsls	r7, r7, #2
    1690:	0038      	movs	r0, r7
    1692:	4e21      	ldr	r6, [pc, #132]	; (1718 <main+0x164>)
    1694:	47b0      	blx	r6
    1696:	61e5      	str	r5, [r4, #28]
    1698:	0038      	movs	r0, r7
    169a:	47b0      	blx	r6
    169c:	61e5      	str	r5, [r4, #28]
    169e:	0038      	movs	r0, r7
    16a0:	47b0      	blx	r6
    16a2:	2414      	movs	r4, #20
    16a4:	4f1b      	ldr	r7, [pc, #108]	; (1714 <main+0x160>)
    16a6:	002e      	movs	r6, r5
	}

	for (int i = 0; i < 20; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_ms(100);
    16a8:	4d1b      	ldr	r5, [pc, #108]	; (1718 <main+0x164>)
    16aa:	61fe      	str	r6, [r7, #28]
    16ac:	2064      	movs	r0, #100	; 0x64
    16ae:	47a8      	blx	r5
    16b0:	3c01      	subs	r4, #1
	for (int i = 0; i < 20; i++) {
    16b2:	2c00      	cmp	r4, #0
    16b4:	d1f9      	bne.n	16aa <main+0xf6>
		port_base->OUTSET.reg = pin_mask;
    16b6:	2280      	movs	r2, #128	; 0x80
    16b8:	00d2      	lsls	r2, r2, #3
    16ba:	4b16      	ldr	r3, [pc, #88]	; (1714 <main+0x160>)
    16bc:	619a      	str	r2, [r3, #24]
	}

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	/*main loop*/
	printf("\r\n");
    16be:	4817      	ldr	r0, [pc, #92]	; (171c <main+0x168>)
    16c0:	4b17      	ldr	r3, [pc, #92]	; (1720 <main+0x16c>)
    16c2:	4798      	blx	r3
	print_home();
    16c4:	4b17      	ldr	r3, [pc, #92]	; (1724 <main+0x170>)
    16c6:	4798      	blx	r3
	while(1)
	{
		//debug_loop();
		prompt_menu();
    16c8:	4c17      	ldr	r4, [pc, #92]	; (1728 <main+0x174>)
    16ca:	47a0      	blx	r4
    16cc:	e7fd      	b.n	16ca <main+0x116>
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	00001325 	.word	0x00001325
    16d4:	00160002 	.word	0x00160002
    16d8:	00170002 	.word	0x00170002
    16dc:	20000238 	.word	0x20000238
    16e0:	200002ec 	.word	0x200002ec
    16e4:	0000159d 	.word	0x0000159d
    16e8:	200002e8 	.word	0x200002e8
    16ec:	00001571 	.word	0x00001571
    16f0:	200002e4 	.word	0x200002e4
    16f4:	42000c00 	.word	0x42000c00
    16f8:	000008e9 	.word	0x000008e9
    16fc:	2000000c 	.word	0x2000000c
    1700:	00001a2d 	.word	0x00001a2d
    1704:	00000859 	.word	0x00000859
    1708:	e000e100 	.word	0xe000e100
    170c:	0000027d 	.word	0x0000027d
    1710:	00000485 	.word	0x00000485
    1714:	40002880 	.word	0x40002880
    1718:	000002bd 	.word	0x000002bd
    171c:	00003a84 	.word	0x00003a84
    1720:	000019e5 	.word	0x000019e5
    1724:	00000115 	.word	0x00000115
    1728:	0000019d 	.word	0x0000019d

0000172c <__udivsi3>:
    172c:	2200      	movs	r2, #0
    172e:	0843      	lsrs	r3, r0, #1
    1730:	428b      	cmp	r3, r1
    1732:	d374      	bcc.n	181e <__udivsi3+0xf2>
    1734:	0903      	lsrs	r3, r0, #4
    1736:	428b      	cmp	r3, r1
    1738:	d35f      	bcc.n	17fa <__udivsi3+0xce>
    173a:	0a03      	lsrs	r3, r0, #8
    173c:	428b      	cmp	r3, r1
    173e:	d344      	bcc.n	17ca <__udivsi3+0x9e>
    1740:	0b03      	lsrs	r3, r0, #12
    1742:	428b      	cmp	r3, r1
    1744:	d328      	bcc.n	1798 <__udivsi3+0x6c>
    1746:	0c03      	lsrs	r3, r0, #16
    1748:	428b      	cmp	r3, r1
    174a:	d30d      	bcc.n	1768 <__udivsi3+0x3c>
    174c:	22ff      	movs	r2, #255	; 0xff
    174e:	0209      	lsls	r1, r1, #8
    1750:	ba12      	rev	r2, r2
    1752:	0c03      	lsrs	r3, r0, #16
    1754:	428b      	cmp	r3, r1
    1756:	d302      	bcc.n	175e <__udivsi3+0x32>
    1758:	1212      	asrs	r2, r2, #8
    175a:	0209      	lsls	r1, r1, #8
    175c:	d065      	beq.n	182a <__udivsi3+0xfe>
    175e:	0b03      	lsrs	r3, r0, #12
    1760:	428b      	cmp	r3, r1
    1762:	d319      	bcc.n	1798 <__udivsi3+0x6c>
    1764:	e000      	b.n	1768 <__udivsi3+0x3c>
    1766:	0a09      	lsrs	r1, r1, #8
    1768:	0bc3      	lsrs	r3, r0, #15
    176a:	428b      	cmp	r3, r1
    176c:	d301      	bcc.n	1772 <__udivsi3+0x46>
    176e:	03cb      	lsls	r3, r1, #15
    1770:	1ac0      	subs	r0, r0, r3
    1772:	4152      	adcs	r2, r2
    1774:	0b83      	lsrs	r3, r0, #14
    1776:	428b      	cmp	r3, r1
    1778:	d301      	bcc.n	177e <__udivsi3+0x52>
    177a:	038b      	lsls	r3, r1, #14
    177c:	1ac0      	subs	r0, r0, r3
    177e:	4152      	adcs	r2, r2
    1780:	0b43      	lsrs	r3, r0, #13
    1782:	428b      	cmp	r3, r1
    1784:	d301      	bcc.n	178a <__udivsi3+0x5e>
    1786:	034b      	lsls	r3, r1, #13
    1788:	1ac0      	subs	r0, r0, r3
    178a:	4152      	adcs	r2, r2
    178c:	0b03      	lsrs	r3, r0, #12
    178e:	428b      	cmp	r3, r1
    1790:	d301      	bcc.n	1796 <__udivsi3+0x6a>
    1792:	030b      	lsls	r3, r1, #12
    1794:	1ac0      	subs	r0, r0, r3
    1796:	4152      	adcs	r2, r2
    1798:	0ac3      	lsrs	r3, r0, #11
    179a:	428b      	cmp	r3, r1
    179c:	d301      	bcc.n	17a2 <__udivsi3+0x76>
    179e:	02cb      	lsls	r3, r1, #11
    17a0:	1ac0      	subs	r0, r0, r3
    17a2:	4152      	adcs	r2, r2
    17a4:	0a83      	lsrs	r3, r0, #10
    17a6:	428b      	cmp	r3, r1
    17a8:	d301      	bcc.n	17ae <__udivsi3+0x82>
    17aa:	028b      	lsls	r3, r1, #10
    17ac:	1ac0      	subs	r0, r0, r3
    17ae:	4152      	adcs	r2, r2
    17b0:	0a43      	lsrs	r3, r0, #9
    17b2:	428b      	cmp	r3, r1
    17b4:	d301      	bcc.n	17ba <__udivsi3+0x8e>
    17b6:	024b      	lsls	r3, r1, #9
    17b8:	1ac0      	subs	r0, r0, r3
    17ba:	4152      	adcs	r2, r2
    17bc:	0a03      	lsrs	r3, r0, #8
    17be:	428b      	cmp	r3, r1
    17c0:	d301      	bcc.n	17c6 <__udivsi3+0x9a>
    17c2:	020b      	lsls	r3, r1, #8
    17c4:	1ac0      	subs	r0, r0, r3
    17c6:	4152      	adcs	r2, r2
    17c8:	d2cd      	bcs.n	1766 <__udivsi3+0x3a>
    17ca:	09c3      	lsrs	r3, r0, #7
    17cc:	428b      	cmp	r3, r1
    17ce:	d301      	bcc.n	17d4 <__udivsi3+0xa8>
    17d0:	01cb      	lsls	r3, r1, #7
    17d2:	1ac0      	subs	r0, r0, r3
    17d4:	4152      	adcs	r2, r2
    17d6:	0983      	lsrs	r3, r0, #6
    17d8:	428b      	cmp	r3, r1
    17da:	d301      	bcc.n	17e0 <__udivsi3+0xb4>
    17dc:	018b      	lsls	r3, r1, #6
    17de:	1ac0      	subs	r0, r0, r3
    17e0:	4152      	adcs	r2, r2
    17e2:	0943      	lsrs	r3, r0, #5
    17e4:	428b      	cmp	r3, r1
    17e6:	d301      	bcc.n	17ec <__udivsi3+0xc0>
    17e8:	014b      	lsls	r3, r1, #5
    17ea:	1ac0      	subs	r0, r0, r3
    17ec:	4152      	adcs	r2, r2
    17ee:	0903      	lsrs	r3, r0, #4
    17f0:	428b      	cmp	r3, r1
    17f2:	d301      	bcc.n	17f8 <__udivsi3+0xcc>
    17f4:	010b      	lsls	r3, r1, #4
    17f6:	1ac0      	subs	r0, r0, r3
    17f8:	4152      	adcs	r2, r2
    17fa:	08c3      	lsrs	r3, r0, #3
    17fc:	428b      	cmp	r3, r1
    17fe:	d301      	bcc.n	1804 <__udivsi3+0xd8>
    1800:	00cb      	lsls	r3, r1, #3
    1802:	1ac0      	subs	r0, r0, r3
    1804:	4152      	adcs	r2, r2
    1806:	0883      	lsrs	r3, r0, #2
    1808:	428b      	cmp	r3, r1
    180a:	d301      	bcc.n	1810 <__udivsi3+0xe4>
    180c:	008b      	lsls	r3, r1, #2
    180e:	1ac0      	subs	r0, r0, r3
    1810:	4152      	adcs	r2, r2
    1812:	0843      	lsrs	r3, r0, #1
    1814:	428b      	cmp	r3, r1
    1816:	d301      	bcc.n	181c <__udivsi3+0xf0>
    1818:	004b      	lsls	r3, r1, #1
    181a:	1ac0      	subs	r0, r0, r3
    181c:	4152      	adcs	r2, r2
    181e:	1a41      	subs	r1, r0, r1
    1820:	d200      	bcs.n	1824 <__udivsi3+0xf8>
    1822:	4601      	mov	r1, r0
    1824:	4152      	adcs	r2, r2
    1826:	4610      	mov	r0, r2
    1828:	4770      	bx	lr
    182a:	e7ff      	b.n	182c <__udivsi3+0x100>
    182c:	b501      	push	{r0, lr}
    182e:	2000      	movs	r0, #0
    1830:	f000 f806 	bl	1840 <__aeabi_idiv0>
    1834:	bd02      	pop	{r1, pc}
    1836:	46c0      	nop			; (mov r8, r8)

00001838 <__aeabi_uidivmod>:
    1838:	2900      	cmp	r1, #0
    183a:	d0f7      	beq.n	182c <__udivsi3+0x100>
    183c:	e776      	b.n	172c <__udivsi3>
    183e:	4770      	bx	lr

00001840 <__aeabi_idiv0>:
    1840:	4770      	bx	lr
    1842:	46c0      	nop			; (mov r8, r8)

00001844 <__aeabi_lmul>:
    1844:	b5f0      	push	{r4, r5, r6, r7, lr}
    1846:	46ce      	mov	lr, r9
    1848:	4647      	mov	r7, r8
    184a:	0415      	lsls	r5, r2, #16
    184c:	0c2d      	lsrs	r5, r5, #16
    184e:	002e      	movs	r6, r5
    1850:	b580      	push	{r7, lr}
    1852:	0407      	lsls	r7, r0, #16
    1854:	0c14      	lsrs	r4, r2, #16
    1856:	0c3f      	lsrs	r7, r7, #16
    1858:	4699      	mov	r9, r3
    185a:	0c03      	lsrs	r3, r0, #16
    185c:	437e      	muls	r6, r7
    185e:	435d      	muls	r5, r3
    1860:	4367      	muls	r7, r4
    1862:	4363      	muls	r3, r4
    1864:	197f      	adds	r7, r7, r5
    1866:	0c34      	lsrs	r4, r6, #16
    1868:	19e4      	adds	r4, r4, r7
    186a:	469c      	mov	ip, r3
    186c:	42a5      	cmp	r5, r4
    186e:	d903      	bls.n	1878 <__aeabi_lmul+0x34>
    1870:	2380      	movs	r3, #128	; 0x80
    1872:	025b      	lsls	r3, r3, #9
    1874:	4698      	mov	r8, r3
    1876:	44c4      	add	ip, r8
    1878:	464b      	mov	r3, r9
    187a:	4351      	muls	r1, r2
    187c:	4343      	muls	r3, r0
    187e:	0436      	lsls	r6, r6, #16
    1880:	0c36      	lsrs	r6, r6, #16
    1882:	0c25      	lsrs	r5, r4, #16
    1884:	0424      	lsls	r4, r4, #16
    1886:	4465      	add	r5, ip
    1888:	19a4      	adds	r4, r4, r6
    188a:	1859      	adds	r1, r3, r1
    188c:	1949      	adds	r1, r1, r5
    188e:	0020      	movs	r0, r4
    1890:	bc0c      	pop	{r2, r3}
    1892:	4690      	mov	r8, r2
    1894:	4699      	mov	r9, r3
    1896:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001898 <__libc_init_array>:
    1898:	b570      	push	{r4, r5, r6, lr}
    189a:	2600      	movs	r6, #0
    189c:	4d0c      	ldr	r5, [pc, #48]	; (18d0 <__libc_init_array+0x38>)
    189e:	4c0d      	ldr	r4, [pc, #52]	; (18d4 <__libc_init_array+0x3c>)
    18a0:	1b64      	subs	r4, r4, r5
    18a2:	10a4      	asrs	r4, r4, #2
    18a4:	42a6      	cmp	r6, r4
    18a6:	d109      	bne.n	18bc <__libc_init_array+0x24>
    18a8:	2600      	movs	r6, #0
    18aa:	f002 fa2f 	bl	3d0c <_init>
    18ae:	4d0a      	ldr	r5, [pc, #40]	; (18d8 <__libc_init_array+0x40>)
    18b0:	4c0a      	ldr	r4, [pc, #40]	; (18dc <__libc_init_array+0x44>)
    18b2:	1b64      	subs	r4, r4, r5
    18b4:	10a4      	asrs	r4, r4, #2
    18b6:	42a6      	cmp	r6, r4
    18b8:	d105      	bne.n	18c6 <__libc_init_array+0x2e>
    18ba:	bd70      	pop	{r4, r5, r6, pc}
    18bc:	00b3      	lsls	r3, r6, #2
    18be:	58eb      	ldr	r3, [r5, r3]
    18c0:	4798      	blx	r3
    18c2:	3601      	adds	r6, #1
    18c4:	e7ee      	b.n	18a4 <__libc_init_array+0xc>
    18c6:	00b3      	lsls	r3, r6, #2
    18c8:	58eb      	ldr	r3, [r5, r3]
    18ca:	4798      	blx	r3
    18cc:	3601      	adds	r6, #1
    18ce:	e7f2      	b.n	18b6 <__libc_init_array+0x1e>
    18d0:	00003d18 	.word	0x00003d18
    18d4:	00003d18 	.word	0x00003d18
    18d8:	00003d18 	.word	0x00003d18
    18dc:	00003d1c 	.word	0x00003d1c

000018e0 <memset>:
    18e0:	0003      	movs	r3, r0
    18e2:	1882      	adds	r2, r0, r2
    18e4:	4293      	cmp	r3, r2
    18e6:	d100      	bne.n	18ea <memset+0xa>
    18e8:	4770      	bx	lr
    18ea:	7019      	strb	r1, [r3, #0]
    18ec:	3301      	adds	r3, #1
    18ee:	e7f9      	b.n	18e4 <memset+0x4>

000018f0 <iprintf>:
    18f0:	b40f      	push	{r0, r1, r2, r3}
    18f2:	4b0b      	ldr	r3, [pc, #44]	; (1920 <iprintf+0x30>)
    18f4:	b513      	push	{r0, r1, r4, lr}
    18f6:	681c      	ldr	r4, [r3, #0]
    18f8:	2c00      	cmp	r4, #0
    18fa:	d005      	beq.n	1908 <iprintf+0x18>
    18fc:	69a3      	ldr	r3, [r4, #24]
    18fe:	2b00      	cmp	r3, #0
    1900:	d102      	bne.n	1908 <iprintf+0x18>
    1902:	0020      	movs	r0, r4
    1904:	f000 fb58 	bl	1fb8 <__sinit>
    1908:	ab05      	add	r3, sp, #20
    190a:	9a04      	ldr	r2, [sp, #16]
    190c:	68a1      	ldr	r1, [r4, #8]
    190e:	0020      	movs	r0, r4
    1910:	9301      	str	r3, [sp, #4]
    1912:	f000 feaf 	bl	2674 <_vfiprintf_r>
    1916:	bc16      	pop	{r1, r2, r4}
    1918:	bc08      	pop	{r3}
    191a:	b004      	add	sp, #16
    191c:	4718      	bx	r3
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	2000000c 	.word	0x2000000c

00001924 <_puts_r>:
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	0005      	movs	r5, r0
    1928:	000e      	movs	r6, r1
    192a:	2800      	cmp	r0, #0
    192c:	d004      	beq.n	1938 <_puts_r+0x14>
    192e:	6983      	ldr	r3, [r0, #24]
    1930:	2b00      	cmp	r3, #0
    1932:	d101      	bne.n	1938 <_puts_r+0x14>
    1934:	f000 fb40 	bl	1fb8 <__sinit>
    1938:	69ab      	ldr	r3, [r5, #24]
    193a:	68ac      	ldr	r4, [r5, #8]
    193c:	2b00      	cmp	r3, #0
    193e:	d102      	bne.n	1946 <_puts_r+0x22>
    1940:	0028      	movs	r0, r5
    1942:	f000 fb39 	bl	1fb8 <__sinit>
    1946:	4b24      	ldr	r3, [pc, #144]	; (19d8 <_puts_r+0xb4>)
    1948:	429c      	cmp	r4, r3
    194a:	d10f      	bne.n	196c <_puts_r+0x48>
    194c:	686c      	ldr	r4, [r5, #4]
    194e:	89a3      	ldrh	r3, [r4, #12]
    1950:	071b      	lsls	r3, r3, #28
    1952:	d502      	bpl.n	195a <_puts_r+0x36>
    1954:	6923      	ldr	r3, [r4, #16]
    1956:	2b00      	cmp	r3, #0
    1958:	d120      	bne.n	199c <_puts_r+0x78>
    195a:	0021      	movs	r1, r4
    195c:	0028      	movs	r0, r5
    195e:	f000 f9a9 	bl	1cb4 <__swsetup_r>
    1962:	2800      	cmp	r0, #0
    1964:	d01a      	beq.n	199c <_puts_r+0x78>
    1966:	2001      	movs	r0, #1
    1968:	4240      	negs	r0, r0
    196a:	bd70      	pop	{r4, r5, r6, pc}
    196c:	4b1b      	ldr	r3, [pc, #108]	; (19dc <_puts_r+0xb8>)
    196e:	429c      	cmp	r4, r3
    1970:	d101      	bne.n	1976 <_puts_r+0x52>
    1972:	68ac      	ldr	r4, [r5, #8]
    1974:	e7eb      	b.n	194e <_puts_r+0x2a>
    1976:	4b1a      	ldr	r3, [pc, #104]	; (19e0 <_puts_r+0xbc>)
    1978:	429c      	cmp	r4, r3
    197a:	d1e8      	bne.n	194e <_puts_r+0x2a>
    197c:	68ec      	ldr	r4, [r5, #12]
    197e:	e7e6      	b.n	194e <_puts_r+0x2a>
    1980:	3b01      	subs	r3, #1
    1982:	3601      	adds	r6, #1
    1984:	60a3      	str	r3, [r4, #8]
    1986:	2b00      	cmp	r3, #0
    1988:	da04      	bge.n	1994 <_puts_r+0x70>
    198a:	69a2      	ldr	r2, [r4, #24]
    198c:	4293      	cmp	r3, r2
    198e:	db16      	blt.n	19be <_puts_r+0x9a>
    1990:	290a      	cmp	r1, #10
    1992:	d014      	beq.n	19be <_puts_r+0x9a>
    1994:	6823      	ldr	r3, [r4, #0]
    1996:	1c5a      	adds	r2, r3, #1
    1998:	6022      	str	r2, [r4, #0]
    199a:	7019      	strb	r1, [r3, #0]
    199c:	7831      	ldrb	r1, [r6, #0]
    199e:	68a3      	ldr	r3, [r4, #8]
    19a0:	2900      	cmp	r1, #0
    19a2:	d1ed      	bne.n	1980 <_puts_r+0x5c>
    19a4:	3b01      	subs	r3, #1
    19a6:	60a3      	str	r3, [r4, #8]
    19a8:	2b00      	cmp	r3, #0
    19aa:	da0f      	bge.n	19cc <_puts_r+0xa8>
    19ac:	0022      	movs	r2, r4
    19ae:	310a      	adds	r1, #10
    19b0:	0028      	movs	r0, r5
    19b2:	f000 f929 	bl	1c08 <__swbuf_r>
    19b6:	1c43      	adds	r3, r0, #1
    19b8:	d0d5      	beq.n	1966 <_puts_r+0x42>
    19ba:	200a      	movs	r0, #10
    19bc:	e7d5      	b.n	196a <_puts_r+0x46>
    19be:	0022      	movs	r2, r4
    19c0:	0028      	movs	r0, r5
    19c2:	f000 f921 	bl	1c08 <__swbuf_r>
    19c6:	1c43      	adds	r3, r0, #1
    19c8:	d1e8      	bne.n	199c <_puts_r+0x78>
    19ca:	e7cc      	b.n	1966 <_puts_r+0x42>
    19cc:	200a      	movs	r0, #10
    19ce:	6823      	ldr	r3, [r4, #0]
    19d0:	1c5a      	adds	r2, r3, #1
    19d2:	6022      	str	r2, [r4, #0]
    19d4:	7018      	strb	r0, [r3, #0]
    19d6:	e7c8      	b.n	196a <_puts_r+0x46>
    19d8:	00003b64 	.word	0x00003b64
    19dc:	00003b84 	.word	0x00003b84
    19e0:	00003b44 	.word	0x00003b44

000019e4 <puts>:
    19e4:	b510      	push	{r4, lr}
    19e6:	4b03      	ldr	r3, [pc, #12]	; (19f4 <puts+0x10>)
    19e8:	0001      	movs	r1, r0
    19ea:	6818      	ldr	r0, [r3, #0]
    19ec:	f7ff ff9a 	bl	1924 <_puts_r>
    19f0:	bd10      	pop	{r4, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	2000000c 	.word	0x2000000c

000019f8 <iscanf>:
    19f8:	b40f      	push	{r0, r1, r2, r3}
    19fa:	4b0b      	ldr	r3, [pc, #44]	; (1a28 <iscanf+0x30>)
    19fc:	b513      	push	{r0, r1, r4, lr}
    19fe:	681c      	ldr	r4, [r3, #0]
    1a00:	2c00      	cmp	r4, #0
    1a02:	d005      	beq.n	1a10 <iscanf+0x18>
    1a04:	69a3      	ldr	r3, [r4, #24]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d102      	bne.n	1a10 <iscanf+0x18>
    1a0a:	0020      	movs	r0, r4
    1a0c:	f000 fad4 	bl	1fb8 <__sinit>
    1a10:	ab05      	add	r3, sp, #20
    1a12:	9a04      	ldr	r2, [sp, #16]
    1a14:	6861      	ldr	r1, [r4, #4]
    1a16:	0020      	movs	r0, r4
    1a18:	9301      	str	r3, [sp, #4]
    1a1a:	f001 fa55 	bl	2ec8 <_vfiscanf_r>
    1a1e:	bc16      	pop	{r1, r2, r4}
    1a20:	bc08      	pop	{r3}
    1a22:	b004      	add	sp, #16
    1a24:	4718      	bx	r3
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	2000000c 	.word	0x2000000c

00001a2c <setbuf>:
    1a2c:	424a      	negs	r2, r1
    1a2e:	414a      	adcs	r2, r1
    1a30:	2380      	movs	r3, #128	; 0x80
    1a32:	b510      	push	{r4, lr}
    1a34:	0052      	lsls	r2, r2, #1
    1a36:	00db      	lsls	r3, r3, #3
    1a38:	f000 f802 	bl	1a40 <setvbuf>
    1a3c:	bd10      	pop	{r4, pc}
	...

00001a40 <setvbuf>:
    1a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a42:	001d      	movs	r5, r3
    1a44:	4b4f      	ldr	r3, [pc, #316]	; (1b84 <setvbuf+0x144>)
    1a46:	b085      	sub	sp, #20
    1a48:	681e      	ldr	r6, [r3, #0]
    1a4a:	0004      	movs	r4, r0
    1a4c:	000f      	movs	r7, r1
    1a4e:	9200      	str	r2, [sp, #0]
    1a50:	2e00      	cmp	r6, #0
    1a52:	d005      	beq.n	1a60 <setvbuf+0x20>
    1a54:	69b3      	ldr	r3, [r6, #24]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d102      	bne.n	1a60 <setvbuf+0x20>
    1a5a:	0030      	movs	r0, r6
    1a5c:	f000 faac 	bl	1fb8 <__sinit>
    1a60:	4b49      	ldr	r3, [pc, #292]	; (1b88 <setvbuf+0x148>)
    1a62:	429c      	cmp	r4, r3
    1a64:	d150      	bne.n	1b08 <setvbuf+0xc8>
    1a66:	6874      	ldr	r4, [r6, #4]
    1a68:	9b00      	ldr	r3, [sp, #0]
    1a6a:	2b02      	cmp	r3, #2
    1a6c:	d005      	beq.n	1a7a <setvbuf+0x3a>
    1a6e:	2b01      	cmp	r3, #1
    1a70:	d900      	bls.n	1a74 <setvbuf+0x34>
    1a72:	e084      	b.n	1b7e <setvbuf+0x13e>
    1a74:	2d00      	cmp	r5, #0
    1a76:	da00      	bge.n	1a7a <setvbuf+0x3a>
    1a78:	e081      	b.n	1b7e <setvbuf+0x13e>
    1a7a:	0021      	movs	r1, r4
    1a7c:	0030      	movs	r0, r6
    1a7e:	f000 fa19 	bl	1eb4 <_fflush_r>
    1a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a84:	2900      	cmp	r1, #0
    1a86:	d008      	beq.n	1a9a <setvbuf+0x5a>
    1a88:	0023      	movs	r3, r4
    1a8a:	3344      	adds	r3, #68	; 0x44
    1a8c:	4299      	cmp	r1, r3
    1a8e:	d002      	beq.n	1a96 <setvbuf+0x56>
    1a90:	0030      	movs	r0, r6
    1a92:	f000 fbb9 	bl	2208 <_free_r>
    1a96:	2300      	movs	r3, #0
    1a98:	6363      	str	r3, [r4, #52]	; 0x34
    1a9a:	2300      	movs	r3, #0
    1a9c:	61a3      	str	r3, [r4, #24]
    1a9e:	6063      	str	r3, [r4, #4]
    1aa0:	89a3      	ldrh	r3, [r4, #12]
    1aa2:	061b      	lsls	r3, r3, #24
    1aa4:	d503      	bpl.n	1aae <setvbuf+0x6e>
    1aa6:	6921      	ldr	r1, [r4, #16]
    1aa8:	0030      	movs	r0, r6
    1aaa:	f000 fbad 	bl	2208 <_free_r>
    1aae:	89a3      	ldrh	r3, [r4, #12]
    1ab0:	4a36      	ldr	r2, [pc, #216]	; (1b8c <setvbuf+0x14c>)
    1ab2:	4013      	ands	r3, r2
    1ab4:	81a3      	strh	r3, [r4, #12]
    1ab6:	9b00      	ldr	r3, [sp, #0]
    1ab8:	2b02      	cmp	r3, #2
    1aba:	d05a      	beq.n	1b72 <setvbuf+0x132>
    1abc:	ab03      	add	r3, sp, #12
    1abe:	aa02      	add	r2, sp, #8
    1ac0:	0021      	movs	r1, r4
    1ac2:	0030      	movs	r0, r6
    1ac4:	f000 fb2a 	bl	211c <__swhatbuf_r>
    1ac8:	89a3      	ldrh	r3, [r4, #12]
    1aca:	4318      	orrs	r0, r3
    1acc:	81a0      	strh	r0, [r4, #12]
    1ace:	2d00      	cmp	r5, #0
    1ad0:	d124      	bne.n	1b1c <setvbuf+0xdc>
    1ad2:	9d02      	ldr	r5, [sp, #8]
    1ad4:	0028      	movs	r0, r5
    1ad6:	f000 fb8d 	bl	21f4 <malloc>
    1ada:	9501      	str	r5, [sp, #4]
    1adc:	1e07      	subs	r7, r0, #0
    1ade:	d142      	bne.n	1b66 <setvbuf+0x126>
    1ae0:	9b02      	ldr	r3, [sp, #8]
    1ae2:	9301      	str	r3, [sp, #4]
    1ae4:	42ab      	cmp	r3, r5
    1ae6:	d139      	bne.n	1b5c <setvbuf+0x11c>
    1ae8:	2001      	movs	r0, #1
    1aea:	4240      	negs	r0, r0
    1aec:	2302      	movs	r3, #2
    1aee:	89a2      	ldrh	r2, [r4, #12]
    1af0:	4313      	orrs	r3, r2
    1af2:	81a3      	strh	r3, [r4, #12]
    1af4:	2300      	movs	r3, #0
    1af6:	60a3      	str	r3, [r4, #8]
    1af8:	0023      	movs	r3, r4
    1afa:	3347      	adds	r3, #71	; 0x47
    1afc:	6023      	str	r3, [r4, #0]
    1afe:	6123      	str	r3, [r4, #16]
    1b00:	2301      	movs	r3, #1
    1b02:	6163      	str	r3, [r4, #20]
    1b04:	b005      	add	sp, #20
    1b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b08:	4b21      	ldr	r3, [pc, #132]	; (1b90 <setvbuf+0x150>)
    1b0a:	429c      	cmp	r4, r3
    1b0c:	d101      	bne.n	1b12 <setvbuf+0xd2>
    1b0e:	68b4      	ldr	r4, [r6, #8]
    1b10:	e7aa      	b.n	1a68 <setvbuf+0x28>
    1b12:	4b20      	ldr	r3, [pc, #128]	; (1b94 <setvbuf+0x154>)
    1b14:	429c      	cmp	r4, r3
    1b16:	d1a7      	bne.n	1a68 <setvbuf+0x28>
    1b18:	68f4      	ldr	r4, [r6, #12]
    1b1a:	e7a5      	b.n	1a68 <setvbuf+0x28>
    1b1c:	2f00      	cmp	r7, #0
    1b1e:	d0d9      	beq.n	1ad4 <setvbuf+0x94>
    1b20:	69b3      	ldr	r3, [r6, #24]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d102      	bne.n	1b2c <setvbuf+0xec>
    1b26:	0030      	movs	r0, r6
    1b28:	f000 fa46 	bl	1fb8 <__sinit>
    1b2c:	9b00      	ldr	r3, [sp, #0]
    1b2e:	2b01      	cmp	r3, #1
    1b30:	d103      	bne.n	1b3a <setvbuf+0xfa>
    1b32:	89a3      	ldrh	r3, [r4, #12]
    1b34:	9a00      	ldr	r2, [sp, #0]
    1b36:	431a      	orrs	r2, r3
    1b38:	81a2      	strh	r2, [r4, #12]
    1b3a:	2008      	movs	r0, #8
    1b3c:	89a3      	ldrh	r3, [r4, #12]
    1b3e:	6027      	str	r7, [r4, #0]
    1b40:	6127      	str	r7, [r4, #16]
    1b42:	6165      	str	r5, [r4, #20]
    1b44:	4018      	ands	r0, r3
    1b46:	d018      	beq.n	1b7a <setvbuf+0x13a>
    1b48:	2001      	movs	r0, #1
    1b4a:	4018      	ands	r0, r3
    1b4c:	2300      	movs	r3, #0
    1b4e:	4298      	cmp	r0, r3
    1b50:	d011      	beq.n	1b76 <setvbuf+0x136>
    1b52:	426d      	negs	r5, r5
    1b54:	60a3      	str	r3, [r4, #8]
    1b56:	61a5      	str	r5, [r4, #24]
    1b58:	0018      	movs	r0, r3
    1b5a:	e7d3      	b.n	1b04 <setvbuf+0xc4>
    1b5c:	9801      	ldr	r0, [sp, #4]
    1b5e:	f000 fb49 	bl	21f4 <malloc>
    1b62:	1e07      	subs	r7, r0, #0
    1b64:	d0c0      	beq.n	1ae8 <setvbuf+0xa8>
    1b66:	2380      	movs	r3, #128	; 0x80
    1b68:	89a2      	ldrh	r2, [r4, #12]
    1b6a:	9d01      	ldr	r5, [sp, #4]
    1b6c:	4313      	orrs	r3, r2
    1b6e:	81a3      	strh	r3, [r4, #12]
    1b70:	e7d6      	b.n	1b20 <setvbuf+0xe0>
    1b72:	2000      	movs	r0, #0
    1b74:	e7ba      	b.n	1aec <setvbuf+0xac>
    1b76:	60a5      	str	r5, [r4, #8]
    1b78:	e7c4      	b.n	1b04 <setvbuf+0xc4>
    1b7a:	60a0      	str	r0, [r4, #8]
    1b7c:	e7c2      	b.n	1b04 <setvbuf+0xc4>
    1b7e:	2001      	movs	r0, #1
    1b80:	4240      	negs	r0, r0
    1b82:	e7bf      	b.n	1b04 <setvbuf+0xc4>
    1b84:	2000000c 	.word	0x2000000c
    1b88:	00003b64 	.word	0x00003b64
    1b8c:	fffff35c 	.word	0xfffff35c
    1b90:	00003b84 	.word	0x00003b84
    1b94:	00003b44 	.word	0x00003b44

00001b98 <siprintf>:
    1b98:	b40e      	push	{r1, r2, r3}
    1b9a:	b510      	push	{r4, lr}
    1b9c:	b09d      	sub	sp, #116	; 0x74
    1b9e:	a902      	add	r1, sp, #8
    1ba0:	9002      	str	r0, [sp, #8]
    1ba2:	6108      	str	r0, [r1, #16]
    1ba4:	480b      	ldr	r0, [pc, #44]	; (1bd4 <siprintf+0x3c>)
    1ba6:	2482      	movs	r4, #130	; 0x82
    1ba8:	6088      	str	r0, [r1, #8]
    1baa:	6148      	str	r0, [r1, #20]
    1bac:	2001      	movs	r0, #1
    1bae:	4240      	negs	r0, r0
    1bb0:	ab1f      	add	r3, sp, #124	; 0x7c
    1bb2:	81c8      	strh	r0, [r1, #14]
    1bb4:	4808      	ldr	r0, [pc, #32]	; (1bd8 <siprintf+0x40>)
    1bb6:	cb04      	ldmia	r3!, {r2}
    1bb8:	00a4      	lsls	r4, r4, #2
    1bba:	6800      	ldr	r0, [r0, #0]
    1bbc:	9301      	str	r3, [sp, #4]
    1bbe:	818c      	strh	r4, [r1, #12]
    1bc0:	f000 fc2c 	bl	241c <_svfiprintf_r>
    1bc4:	2300      	movs	r3, #0
    1bc6:	9a02      	ldr	r2, [sp, #8]
    1bc8:	7013      	strb	r3, [r2, #0]
    1bca:	b01d      	add	sp, #116	; 0x74
    1bcc:	bc10      	pop	{r4}
    1bce:	bc08      	pop	{r3}
    1bd0:	b003      	add	sp, #12
    1bd2:	4718      	bx	r3
    1bd4:	7fffffff 	.word	0x7fffffff
    1bd8:	2000000c 	.word	0x2000000c

00001bdc <strncpy>:
    1bdc:	b570      	push	{r4, r5, r6, lr}
    1bde:	0004      	movs	r4, r0
    1be0:	2a00      	cmp	r2, #0
    1be2:	d100      	bne.n	1be6 <strncpy+0xa>
    1be4:	bd70      	pop	{r4, r5, r6, pc}
    1be6:	780d      	ldrb	r5, [r1, #0]
    1be8:	1e56      	subs	r6, r2, #1
    1bea:	1c63      	adds	r3, r4, #1
    1bec:	7025      	strb	r5, [r4, #0]
    1bee:	3101      	adds	r1, #1
    1bf0:	2d00      	cmp	r5, #0
    1bf2:	d105      	bne.n	1c00 <strncpy+0x24>
    1bf4:	18a4      	adds	r4, r4, r2
    1bf6:	429c      	cmp	r4, r3
    1bf8:	d0f4      	beq.n	1be4 <strncpy+0x8>
    1bfa:	701d      	strb	r5, [r3, #0]
    1bfc:	3301      	adds	r3, #1
    1bfe:	e7fa      	b.n	1bf6 <strncpy+0x1a>
    1c00:	001c      	movs	r4, r3
    1c02:	0032      	movs	r2, r6
    1c04:	e7ec      	b.n	1be0 <strncpy+0x4>
	...

00001c08 <__swbuf_r>:
    1c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c0a:	0005      	movs	r5, r0
    1c0c:	000e      	movs	r6, r1
    1c0e:	0014      	movs	r4, r2
    1c10:	2800      	cmp	r0, #0
    1c12:	d004      	beq.n	1c1e <__swbuf_r+0x16>
    1c14:	6983      	ldr	r3, [r0, #24]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d101      	bne.n	1c1e <__swbuf_r+0x16>
    1c1a:	f000 f9cd 	bl	1fb8 <__sinit>
    1c1e:	4b22      	ldr	r3, [pc, #136]	; (1ca8 <__swbuf_r+0xa0>)
    1c20:	429c      	cmp	r4, r3
    1c22:	d12d      	bne.n	1c80 <__swbuf_r+0x78>
    1c24:	686c      	ldr	r4, [r5, #4]
    1c26:	69a3      	ldr	r3, [r4, #24]
    1c28:	60a3      	str	r3, [r4, #8]
    1c2a:	89a3      	ldrh	r3, [r4, #12]
    1c2c:	071b      	lsls	r3, r3, #28
    1c2e:	d531      	bpl.n	1c94 <__swbuf_r+0x8c>
    1c30:	6923      	ldr	r3, [r4, #16]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d02e      	beq.n	1c94 <__swbuf_r+0x8c>
    1c36:	6823      	ldr	r3, [r4, #0]
    1c38:	6922      	ldr	r2, [r4, #16]
    1c3a:	b2f7      	uxtb	r7, r6
    1c3c:	1a98      	subs	r0, r3, r2
    1c3e:	6963      	ldr	r3, [r4, #20]
    1c40:	b2f6      	uxtb	r6, r6
    1c42:	4298      	cmp	r0, r3
    1c44:	db05      	blt.n	1c52 <__swbuf_r+0x4a>
    1c46:	0021      	movs	r1, r4
    1c48:	0028      	movs	r0, r5
    1c4a:	f000 f933 	bl	1eb4 <_fflush_r>
    1c4e:	2800      	cmp	r0, #0
    1c50:	d126      	bne.n	1ca0 <__swbuf_r+0x98>
    1c52:	68a3      	ldr	r3, [r4, #8]
    1c54:	3001      	adds	r0, #1
    1c56:	3b01      	subs	r3, #1
    1c58:	60a3      	str	r3, [r4, #8]
    1c5a:	6823      	ldr	r3, [r4, #0]
    1c5c:	1c5a      	adds	r2, r3, #1
    1c5e:	6022      	str	r2, [r4, #0]
    1c60:	701f      	strb	r7, [r3, #0]
    1c62:	6963      	ldr	r3, [r4, #20]
    1c64:	4298      	cmp	r0, r3
    1c66:	d004      	beq.n	1c72 <__swbuf_r+0x6a>
    1c68:	89a3      	ldrh	r3, [r4, #12]
    1c6a:	07db      	lsls	r3, r3, #31
    1c6c:	d51a      	bpl.n	1ca4 <__swbuf_r+0x9c>
    1c6e:	2e0a      	cmp	r6, #10
    1c70:	d118      	bne.n	1ca4 <__swbuf_r+0x9c>
    1c72:	0021      	movs	r1, r4
    1c74:	0028      	movs	r0, r5
    1c76:	f000 f91d 	bl	1eb4 <_fflush_r>
    1c7a:	2800      	cmp	r0, #0
    1c7c:	d012      	beq.n	1ca4 <__swbuf_r+0x9c>
    1c7e:	e00f      	b.n	1ca0 <__swbuf_r+0x98>
    1c80:	4b0a      	ldr	r3, [pc, #40]	; (1cac <__swbuf_r+0xa4>)
    1c82:	429c      	cmp	r4, r3
    1c84:	d101      	bne.n	1c8a <__swbuf_r+0x82>
    1c86:	68ac      	ldr	r4, [r5, #8]
    1c88:	e7cd      	b.n	1c26 <__swbuf_r+0x1e>
    1c8a:	4b09      	ldr	r3, [pc, #36]	; (1cb0 <__swbuf_r+0xa8>)
    1c8c:	429c      	cmp	r4, r3
    1c8e:	d1ca      	bne.n	1c26 <__swbuf_r+0x1e>
    1c90:	68ec      	ldr	r4, [r5, #12]
    1c92:	e7c8      	b.n	1c26 <__swbuf_r+0x1e>
    1c94:	0021      	movs	r1, r4
    1c96:	0028      	movs	r0, r5
    1c98:	f000 f80c 	bl	1cb4 <__swsetup_r>
    1c9c:	2800      	cmp	r0, #0
    1c9e:	d0ca      	beq.n	1c36 <__swbuf_r+0x2e>
    1ca0:	2601      	movs	r6, #1
    1ca2:	4276      	negs	r6, r6
    1ca4:	0030      	movs	r0, r6
    1ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ca8:	00003b64 	.word	0x00003b64
    1cac:	00003b84 	.word	0x00003b84
    1cb0:	00003b44 	.word	0x00003b44

00001cb4 <__swsetup_r>:
    1cb4:	4b36      	ldr	r3, [pc, #216]	; (1d90 <__swsetup_r+0xdc>)
    1cb6:	b570      	push	{r4, r5, r6, lr}
    1cb8:	681d      	ldr	r5, [r3, #0]
    1cba:	0006      	movs	r6, r0
    1cbc:	000c      	movs	r4, r1
    1cbe:	2d00      	cmp	r5, #0
    1cc0:	d005      	beq.n	1cce <__swsetup_r+0x1a>
    1cc2:	69ab      	ldr	r3, [r5, #24]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d102      	bne.n	1cce <__swsetup_r+0x1a>
    1cc8:	0028      	movs	r0, r5
    1cca:	f000 f975 	bl	1fb8 <__sinit>
    1cce:	4b31      	ldr	r3, [pc, #196]	; (1d94 <__swsetup_r+0xe0>)
    1cd0:	429c      	cmp	r4, r3
    1cd2:	d10f      	bne.n	1cf4 <__swsetup_r+0x40>
    1cd4:	686c      	ldr	r4, [r5, #4]
    1cd6:	230c      	movs	r3, #12
    1cd8:	5ee2      	ldrsh	r2, [r4, r3]
    1cda:	b293      	uxth	r3, r2
    1cdc:	0719      	lsls	r1, r3, #28
    1cde:	d42d      	bmi.n	1d3c <__swsetup_r+0x88>
    1ce0:	06d9      	lsls	r1, r3, #27
    1ce2:	d411      	bmi.n	1d08 <__swsetup_r+0x54>
    1ce4:	2309      	movs	r3, #9
    1ce6:	2001      	movs	r0, #1
    1ce8:	6033      	str	r3, [r6, #0]
    1cea:	3337      	adds	r3, #55	; 0x37
    1cec:	4313      	orrs	r3, r2
    1cee:	81a3      	strh	r3, [r4, #12]
    1cf0:	4240      	negs	r0, r0
    1cf2:	bd70      	pop	{r4, r5, r6, pc}
    1cf4:	4b28      	ldr	r3, [pc, #160]	; (1d98 <__swsetup_r+0xe4>)
    1cf6:	429c      	cmp	r4, r3
    1cf8:	d101      	bne.n	1cfe <__swsetup_r+0x4a>
    1cfa:	68ac      	ldr	r4, [r5, #8]
    1cfc:	e7eb      	b.n	1cd6 <__swsetup_r+0x22>
    1cfe:	4b27      	ldr	r3, [pc, #156]	; (1d9c <__swsetup_r+0xe8>)
    1d00:	429c      	cmp	r4, r3
    1d02:	d1e8      	bne.n	1cd6 <__swsetup_r+0x22>
    1d04:	68ec      	ldr	r4, [r5, #12]
    1d06:	e7e6      	b.n	1cd6 <__swsetup_r+0x22>
    1d08:	075b      	lsls	r3, r3, #29
    1d0a:	d513      	bpl.n	1d34 <__swsetup_r+0x80>
    1d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1d0e:	2900      	cmp	r1, #0
    1d10:	d008      	beq.n	1d24 <__swsetup_r+0x70>
    1d12:	0023      	movs	r3, r4
    1d14:	3344      	adds	r3, #68	; 0x44
    1d16:	4299      	cmp	r1, r3
    1d18:	d002      	beq.n	1d20 <__swsetup_r+0x6c>
    1d1a:	0030      	movs	r0, r6
    1d1c:	f000 fa74 	bl	2208 <_free_r>
    1d20:	2300      	movs	r3, #0
    1d22:	6363      	str	r3, [r4, #52]	; 0x34
    1d24:	2224      	movs	r2, #36	; 0x24
    1d26:	89a3      	ldrh	r3, [r4, #12]
    1d28:	4393      	bics	r3, r2
    1d2a:	81a3      	strh	r3, [r4, #12]
    1d2c:	2300      	movs	r3, #0
    1d2e:	6063      	str	r3, [r4, #4]
    1d30:	6923      	ldr	r3, [r4, #16]
    1d32:	6023      	str	r3, [r4, #0]
    1d34:	2308      	movs	r3, #8
    1d36:	89a2      	ldrh	r2, [r4, #12]
    1d38:	4313      	orrs	r3, r2
    1d3a:	81a3      	strh	r3, [r4, #12]
    1d3c:	6923      	ldr	r3, [r4, #16]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d10b      	bne.n	1d5a <__swsetup_r+0xa6>
    1d42:	21a0      	movs	r1, #160	; 0xa0
    1d44:	2280      	movs	r2, #128	; 0x80
    1d46:	89a3      	ldrh	r3, [r4, #12]
    1d48:	0089      	lsls	r1, r1, #2
    1d4a:	0092      	lsls	r2, r2, #2
    1d4c:	400b      	ands	r3, r1
    1d4e:	4293      	cmp	r3, r2
    1d50:	d003      	beq.n	1d5a <__swsetup_r+0xa6>
    1d52:	0021      	movs	r1, r4
    1d54:	0030      	movs	r0, r6
    1d56:	f000 fa09 	bl	216c <__smakebuf_r>
    1d5a:	2301      	movs	r3, #1
    1d5c:	89a2      	ldrh	r2, [r4, #12]
    1d5e:	4013      	ands	r3, r2
    1d60:	d011      	beq.n	1d86 <__swsetup_r+0xd2>
    1d62:	2300      	movs	r3, #0
    1d64:	60a3      	str	r3, [r4, #8]
    1d66:	6963      	ldr	r3, [r4, #20]
    1d68:	425b      	negs	r3, r3
    1d6a:	61a3      	str	r3, [r4, #24]
    1d6c:	2000      	movs	r0, #0
    1d6e:	6923      	ldr	r3, [r4, #16]
    1d70:	4283      	cmp	r3, r0
    1d72:	d1be      	bne.n	1cf2 <__swsetup_r+0x3e>
    1d74:	230c      	movs	r3, #12
    1d76:	5ee2      	ldrsh	r2, [r4, r3]
    1d78:	0613      	lsls	r3, r2, #24
    1d7a:	d5ba      	bpl.n	1cf2 <__swsetup_r+0x3e>
    1d7c:	2340      	movs	r3, #64	; 0x40
    1d7e:	4313      	orrs	r3, r2
    1d80:	81a3      	strh	r3, [r4, #12]
    1d82:	3801      	subs	r0, #1
    1d84:	e7b5      	b.n	1cf2 <__swsetup_r+0x3e>
    1d86:	0792      	lsls	r2, r2, #30
    1d88:	d400      	bmi.n	1d8c <__swsetup_r+0xd8>
    1d8a:	6963      	ldr	r3, [r4, #20]
    1d8c:	60a3      	str	r3, [r4, #8]
    1d8e:	e7ed      	b.n	1d6c <__swsetup_r+0xb8>
    1d90:	2000000c 	.word	0x2000000c
    1d94:	00003b64 	.word	0x00003b64
    1d98:	00003b84 	.word	0x00003b84
    1d9c:	00003b44 	.word	0x00003b44

00001da0 <__sflush_r>:
    1da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1da2:	898a      	ldrh	r2, [r1, #12]
    1da4:	0005      	movs	r5, r0
    1da6:	000c      	movs	r4, r1
    1da8:	0713      	lsls	r3, r2, #28
    1daa:	d460      	bmi.n	1e6e <__sflush_r+0xce>
    1dac:	684b      	ldr	r3, [r1, #4]
    1dae:	2b00      	cmp	r3, #0
    1db0:	dc04      	bgt.n	1dbc <__sflush_r+0x1c>
    1db2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1db4:	2b00      	cmp	r3, #0
    1db6:	dc01      	bgt.n	1dbc <__sflush_r+0x1c>
    1db8:	2000      	movs	r0, #0
    1dba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1dbc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1dbe:	2f00      	cmp	r7, #0
    1dc0:	d0fa      	beq.n	1db8 <__sflush_r+0x18>
    1dc2:	2300      	movs	r3, #0
    1dc4:	682e      	ldr	r6, [r5, #0]
    1dc6:	602b      	str	r3, [r5, #0]
    1dc8:	2380      	movs	r3, #128	; 0x80
    1dca:	015b      	lsls	r3, r3, #5
    1dcc:	401a      	ands	r2, r3
    1dce:	d034      	beq.n	1e3a <__sflush_r+0x9a>
    1dd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1dd2:	89a3      	ldrh	r3, [r4, #12]
    1dd4:	075b      	lsls	r3, r3, #29
    1dd6:	d506      	bpl.n	1de6 <__sflush_r+0x46>
    1dd8:	6863      	ldr	r3, [r4, #4]
    1dda:	1ac0      	subs	r0, r0, r3
    1ddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1dde:	2b00      	cmp	r3, #0
    1de0:	d001      	beq.n	1de6 <__sflush_r+0x46>
    1de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1de4:	1ac0      	subs	r0, r0, r3
    1de6:	0002      	movs	r2, r0
    1de8:	6a21      	ldr	r1, [r4, #32]
    1dea:	2300      	movs	r3, #0
    1dec:	0028      	movs	r0, r5
    1dee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1df0:	47b8      	blx	r7
    1df2:	89a1      	ldrh	r1, [r4, #12]
    1df4:	1c43      	adds	r3, r0, #1
    1df6:	d106      	bne.n	1e06 <__sflush_r+0x66>
    1df8:	682b      	ldr	r3, [r5, #0]
    1dfa:	2b1d      	cmp	r3, #29
    1dfc:	d831      	bhi.n	1e62 <__sflush_r+0xc2>
    1dfe:	4a2c      	ldr	r2, [pc, #176]	; (1eb0 <__sflush_r+0x110>)
    1e00:	40da      	lsrs	r2, r3
    1e02:	07d3      	lsls	r3, r2, #31
    1e04:	d52d      	bpl.n	1e62 <__sflush_r+0xc2>
    1e06:	2300      	movs	r3, #0
    1e08:	6063      	str	r3, [r4, #4]
    1e0a:	6923      	ldr	r3, [r4, #16]
    1e0c:	6023      	str	r3, [r4, #0]
    1e0e:	04cb      	lsls	r3, r1, #19
    1e10:	d505      	bpl.n	1e1e <__sflush_r+0x7e>
    1e12:	1c43      	adds	r3, r0, #1
    1e14:	d102      	bne.n	1e1c <__sflush_r+0x7c>
    1e16:	682b      	ldr	r3, [r5, #0]
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d100      	bne.n	1e1e <__sflush_r+0x7e>
    1e1c:	6560      	str	r0, [r4, #84]	; 0x54
    1e1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e20:	602e      	str	r6, [r5, #0]
    1e22:	2900      	cmp	r1, #0
    1e24:	d0c8      	beq.n	1db8 <__sflush_r+0x18>
    1e26:	0023      	movs	r3, r4
    1e28:	3344      	adds	r3, #68	; 0x44
    1e2a:	4299      	cmp	r1, r3
    1e2c:	d002      	beq.n	1e34 <__sflush_r+0x94>
    1e2e:	0028      	movs	r0, r5
    1e30:	f000 f9ea 	bl	2208 <_free_r>
    1e34:	2000      	movs	r0, #0
    1e36:	6360      	str	r0, [r4, #52]	; 0x34
    1e38:	e7bf      	b.n	1dba <__sflush_r+0x1a>
    1e3a:	2301      	movs	r3, #1
    1e3c:	6a21      	ldr	r1, [r4, #32]
    1e3e:	0028      	movs	r0, r5
    1e40:	47b8      	blx	r7
    1e42:	1c43      	adds	r3, r0, #1
    1e44:	d1c5      	bne.n	1dd2 <__sflush_r+0x32>
    1e46:	682b      	ldr	r3, [r5, #0]
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d0c2      	beq.n	1dd2 <__sflush_r+0x32>
    1e4c:	2b1d      	cmp	r3, #29
    1e4e:	d001      	beq.n	1e54 <__sflush_r+0xb4>
    1e50:	2b16      	cmp	r3, #22
    1e52:	d101      	bne.n	1e58 <__sflush_r+0xb8>
    1e54:	602e      	str	r6, [r5, #0]
    1e56:	e7af      	b.n	1db8 <__sflush_r+0x18>
    1e58:	2340      	movs	r3, #64	; 0x40
    1e5a:	89a2      	ldrh	r2, [r4, #12]
    1e5c:	4313      	orrs	r3, r2
    1e5e:	81a3      	strh	r3, [r4, #12]
    1e60:	e7ab      	b.n	1dba <__sflush_r+0x1a>
    1e62:	2340      	movs	r3, #64	; 0x40
    1e64:	430b      	orrs	r3, r1
    1e66:	2001      	movs	r0, #1
    1e68:	81a3      	strh	r3, [r4, #12]
    1e6a:	4240      	negs	r0, r0
    1e6c:	e7a5      	b.n	1dba <__sflush_r+0x1a>
    1e6e:	690f      	ldr	r7, [r1, #16]
    1e70:	2f00      	cmp	r7, #0
    1e72:	d0a1      	beq.n	1db8 <__sflush_r+0x18>
    1e74:	680b      	ldr	r3, [r1, #0]
    1e76:	600f      	str	r7, [r1, #0]
    1e78:	1bdb      	subs	r3, r3, r7
    1e7a:	9301      	str	r3, [sp, #4]
    1e7c:	2300      	movs	r3, #0
    1e7e:	0792      	lsls	r2, r2, #30
    1e80:	d100      	bne.n	1e84 <__sflush_r+0xe4>
    1e82:	694b      	ldr	r3, [r1, #20]
    1e84:	60a3      	str	r3, [r4, #8]
    1e86:	9b01      	ldr	r3, [sp, #4]
    1e88:	2b00      	cmp	r3, #0
    1e8a:	dc00      	bgt.n	1e8e <__sflush_r+0xee>
    1e8c:	e794      	b.n	1db8 <__sflush_r+0x18>
    1e8e:	9b01      	ldr	r3, [sp, #4]
    1e90:	003a      	movs	r2, r7
    1e92:	6a21      	ldr	r1, [r4, #32]
    1e94:	0028      	movs	r0, r5
    1e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1e98:	47b0      	blx	r6
    1e9a:	2800      	cmp	r0, #0
    1e9c:	dc03      	bgt.n	1ea6 <__sflush_r+0x106>
    1e9e:	2340      	movs	r3, #64	; 0x40
    1ea0:	89a2      	ldrh	r2, [r4, #12]
    1ea2:	4313      	orrs	r3, r2
    1ea4:	e7df      	b.n	1e66 <__sflush_r+0xc6>
    1ea6:	9b01      	ldr	r3, [sp, #4]
    1ea8:	183f      	adds	r7, r7, r0
    1eaa:	1a1b      	subs	r3, r3, r0
    1eac:	9301      	str	r3, [sp, #4]
    1eae:	e7ea      	b.n	1e86 <__sflush_r+0xe6>
    1eb0:	20400001 	.word	0x20400001

00001eb4 <_fflush_r>:
    1eb4:	690b      	ldr	r3, [r1, #16]
    1eb6:	b570      	push	{r4, r5, r6, lr}
    1eb8:	0005      	movs	r5, r0
    1eba:	000c      	movs	r4, r1
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d101      	bne.n	1ec4 <_fflush_r+0x10>
    1ec0:	2000      	movs	r0, #0
    1ec2:	bd70      	pop	{r4, r5, r6, pc}
    1ec4:	2800      	cmp	r0, #0
    1ec6:	d004      	beq.n	1ed2 <_fflush_r+0x1e>
    1ec8:	6983      	ldr	r3, [r0, #24]
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d101      	bne.n	1ed2 <_fflush_r+0x1e>
    1ece:	f000 f873 	bl	1fb8 <__sinit>
    1ed2:	4b0b      	ldr	r3, [pc, #44]	; (1f00 <_fflush_r+0x4c>)
    1ed4:	429c      	cmp	r4, r3
    1ed6:	d109      	bne.n	1eec <_fflush_r+0x38>
    1ed8:	686c      	ldr	r4, [r5, #4]
    1eda:	220c      	movs	r2, #12
    1edc:	5ea3      	ldrsh	r3, [r4, r2]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d0ee      	beq.n	1ec0 <_fflush_r+0xc>
    1ee2:	0021      	movs	r1, r4
    1ee4:	0028      	movs	r0, r5
    1ee6:	f7ff ff5b 	bl	1da0 <__sflush_r>
    1eea:	e7ea      	b.n	1ec2 <_fflush_r+0xe>
    1eec:	4b05      	ldr	r3, [pc, #20]	; (1f04 <_fflush_r+0x50>)
    1eee:	429c      	cmp	r4, r3
    1ef0:	d101      	bne.n	1ef6 <_fflush_r+0x42>
    1ef2:	68ac      	ldr	r4, [r5, #8]
    1ef4:	e7f1      	b.n	1eda <_fflush_r+0x26>
    1ef6:	4b04      	ldr	r3, [pc, #16]	; (1f08 <_fflush_r+0x54>)
    1ef8:	429c      	cmp	r4, r3
    1efa:	d1ee      	bne.n	1eda <_fflush_r+0x26>
    1efc:	68ec      	ldr	r4, [r5, #12]
    1efe:	e7ec      	b.n	1eda <_fflush_r+0x26>
    1f00:	00003b64 	.word	0x00003b64
    1f04:	00003b84 	.word	0x00003b84
    1f08:	00003b44 	.word	0x00003b44

00001f0c <fflush>:
    1f0c:	b510      	push	{r4, lr}
    1f0e:	1e01      	subs	r1, r0, #0
    1f10:	d105      	bne.n	1f1e <fflush+0x12>
    1f12:	4b05      	ldr	r3, [pc, #20]	; (1f28 <fflush+0x1c>)
    1f14:	4905      	ldr	r1, [pc, #20]	; (1f2c <fflush+0x20>)
    1f16:	6818      	ldr	r0, [r3, #0]
    1f18:	f000 f8de 	bl	20d8 <_fwalk_reent>
    1f1c:	bd10      	pop	{r4, pc}
    1f1e:	4b04      	ldr	r3, [pc, #16]	; (1f30 <fflush+0x24>)
    1f20:	6818      	ldr	r0, [r3, #0]
    1f22:	f7ff ffc7 	bl	1eb4 <_fflush_r>
    1f26:	e7f9      	b.n	1f1c <fflush+0x10>
    1f28:	00003b40 	.word	0x00003b40
    1f2c:	00001eb5 	.word	0x00001eb5
    1f30:	2000000c 	.word	0x2000000c

00001f34 <_cleanup_r>:
    1f34:	b510      	push	{r4, lr}
    1f36:	4902      	ldr	r1, [pc, #8]	; (1f40 <_cleanup_r+0xc>)
    1f38:	f000 f8ce 	bl	20d8 <_fwalk_reent>
    1f3c:	bd10      	pop	{r4, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00001eb5 	.word	0x00001eb5

00001f44 <std.isra.0>:
    1f44:	2300      	movs	r3, #0
    1f46:	b510      	push	{r4, lr}
    1f48:	0004      	movs	r4, r0
    1f4a:	6003      	str	r3, [r0, #0]
    1f4c:	6043      	str	r3, [r0, #4]
    1f4e:	6083      	str	r3, [r0, #8]
    1f50:	8181      	strh	r1, [r0, #12]
    1f52:	6643      	str	r3, [r0, #100]	; 0x64
    1f54:	81c2      	strh	r2, [r0, #14]
    1f56:	6103      	str	r3, [r0, #16]
    1f58:	6143      	str	r3, [r0, #20]
    1f5a:	6183      	str	r3, [r0, #24]
    1f5c:	0019      	movs	r1, r3
    1f5e:	2208      	movs	r2, #8
    1f60:	305c      	adds	r0, #92	; 0x5c
    1f62:	f7ff fcbd 	bl	18e0 <memset>
    1f66:	4b05      	ldr	r3, [pc, #20]	; (1f7c <std.isra.0+0x38>)
    1f68:	6224      	str	r4, [r4, #32]
    1f6a:	6263      	str	r3, [r4, #36]	; 0x24
    1f6c:	4b04      	ldr	r3, [pc, #16]	; (1f80 <std.isra.0+0x3c>)
    1f6e:	62a3      	str	r3, [r4, #40]	; 0x28
    1f70:	4b04      	ldr	r3, [pc, #16]	; (1f84 <std.isra.0+0x40>)
    1f72:	62e3      	str	r3, [r4, #44]	; 0x2c
    1f74:	4b04      	ldr	r3, [pc, #16]	; (1f88 <std.isra.0+0x44>)
    1f76:	6323      	str	r3, [r4, #48]	; 0x30
    1f78:	bd10      	pop	{r4, pc}
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	000033a1 	.word	0x000033a1
    1f80:	000033c9 	.word	0x000033c9
    1f84:	00003401 	.word	0x00003401
    1f88:	0000342d 	.word	0x0000342d

00001f8c <__sfmoreglue>:
    1f8c:	b570      	push	{r4, r5, r6, lr}
    1f8e:	2568      	movs	r5, #104	; 0x68
    1f90:	1e4a      	subs	r2, r1, #1
    1f92:	4355      	muls	r5, r2
    1f94:	000e      	movs	r6, r1
    1f96:	0029      	movs	r1, r5
    1f98:	3174      	adds	r1, #116	; 0x74
    1f9a:	f000 f97f 	bl	229c <_malloc_r>
    1f9e:	1e04      	subs	r4, r0, #0
    1fa0:	d008      	beq.n	1fb4 <__sfmoreglue+0x28>
    1fa2:	2100      	movs	r1, #0
    1fa4:	002a      	movs	r2, r5
    1fa6:	6001      	str	r1, [r0, #0]
    1fa8:	6046      	str	r6, [r0, #4]
    1faa:	300c      	adds	r0, #12
    1fac:	60a0      	str	r0, [r4, #8]
    1fae:	3268      	adds	r2, #104	; 0x68
    1fb0:	f7ff fc96 	bl	18e0 <memset>
    1fb4:	0020      	movs	r0, r4
    1fb6:	bd70      	pop	{r4, r5, r6, pc}

00001fb8 <__sinit>:
    1fb8:	6983      	ldr	r3, [r0, #24]
    1fba:	b513      	push	{r0, r1, r4, lr}
    1fbc:	0004      	movs	r4, r0
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d128      	bne.n	2014 <STACK_SIZE+0x14>
    1fc2:	6483      	str	r3, [r0, #72]	; 0x48
    1fc4:	64c3      	str	r3, [r0, #76]	; 0x4c
    1fc6:	6503      	str	r3, [r0, #80]	; 0x50
    1fc8:	4b13      	ldr	r3, [pc, #76]	; (2018 <STACK_SIZE+0x18>)
    1fca:	4a14      	ldr	r2, [pc, #80]	; (201c <STACK_SIZE+0x1c>)
    1fcc:	681b      	ldr	r3, [r3, #0]
    1fce:	6282      	str	r2, [r0, #40]	; 0x28
    1fd0:	9301      	str	r3, [sp, #4]
    1fd2:	4298      	cmp	r0, r3
    1fd4:	d101      	bne.n	1fda <__sinit+0x22>
    1fd6:	2301      	movs	r3, #1
    1fd8:	6183      	str	r3, [r0, #24]
    1fda:	0020      	movs	r0, r4
    1fdc:	f000 f820 	bl	2020 <__sfp>
    1fe0:	6060      	str	r0, [r4, #4]
    1fe2:	0020      	movs	r0, r4
    1fe4:	f000 f81c 	bl	2020 <__sfp>
    1fe8:	60a0      	str	r0, [r4, #8]
    1fea:	0020      	movs	r0, r4
    1fec:	f000 f818 	bl	2020 <__sfp>
    1ff0:	2200      	movs	r2, #0
    1ff2:	60e0      	str	r0, [r4, #12]
    1ff4:	2104      	movs	r1, #4
    1ff6:	6860      	ldr	r0, [r4, #4]
    1ff8:	f7ff ffa4 	bl	1f44 <std.isra.0>
    1ffc:	2201      	movs	r2, #1
    1ffe:	2109      	movs	r1, #9
    2000:	68a0      	ldr	r0, [r4, #8]
    2002:	f7ff ff9f 	bl	1f44 <std.isra.0>
    2006:	2202      	movs	r2, #2
    2008:	2112      	movs	r1, #18
    200a:	68e0      	ldr	r0, [r4, #12]
    200c:	f7ff ff9a 	bl	1f44 <std.isra.0>
    2010:	2301      	movs	r3, #1
    2012:	61a3      	str	r3, [r4, #24]
    2014:	bd13      	pop	{r0, r1, r4, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	00003b40 	.word	0x00003b40
    201c:	00001f35 	.word	0x00001f35

00002020 <__sfp>:
    2020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2022:	4b1e      	ldr	r3, [pc, #120]	; (209c <__sfp+0x7c>)
    2024:	0007      	movs	r7, r0
    2026:	681e      	ldr	r6, [r3, #0]
    2028:	69b3      	ldr	r3, [r6, #24]
    202a:	2b00      	cmp	r3, #0
    202c:	d102      	bne.n	2034 <__sfp+0x14>
    202e:	0030      	movs	r0, r6
    2030:	f7ff ffc2 	bl	1fb8 <__sinit>
    2034:	3648      	adds	r6, #72	; 0x48
    2036:	68b4      	ldr	r4, [r6, #8]
    2038:	6873      	ldr	r3, [r6, #4]
    203a:	3b01      	subs	r3, #1
    203c:	d504      	bpl.n	2048 <__sfp+0x28>
    203e:	6833      	ldr	r3, [r6, #0]
    2040:	2b00      	cmp	r3, #0
    2042:	d007      	beq.n	2054 <__sfp+0x34>
    2044:	6836      	ldr	r6, [r6, #0]
    2046:	e7f6      	b.n	2036 <__sfp+0x16>
    2048:	220c      	movs	r2, #12
    204a:	5ea5      	ldrsh	r5, [r4, r2]
    204c:	2d00      	cmp	r5, #0
    204e:	d00d      	beq.n	206c <__sfp+0x4c>
    2050:	3468      	adds	r4, #104	; 0x68
    2052:	e7f2      	b.n	203a <__sfp+0x1a>
    2054:	2104      	movs	r1, #4
    2056:	0038      	movs	r0, r7
    2058:	f7ff ff98 	bl	1f8c <__sfmoreglue>
    205c:	6030      	str	r0, [r6, #0]
    205e:	2800      	cmp	r0, #0
    2060:	d1f0      	bne.n	2044 <__sfp+0x24>
    2062:	230c      	movs	r3, #12
    2064:	0004      	movs	r4, r0
    2066:	603b      	str	r3, [r7, #0]
    2068:	0020      	movs	r0, r4
    206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    206c:	2301      	movs	r3, #1
    206e:	0020      	movs	r0, r4
    2070:	425b      	negs	r3, r3
    2072:	81e3      	strh	r3, [r4, #14]
    2074:	3302      	adds	r3, #2
    2076:	81a3      	strh	r3, [r4, #12]
    2078:	6665      	str	r5, [r4, #100]	; 0x64
    207a:	6025      	str	r5, [r4, #0]
    207c:	60a5      	str	r5, [r4, #8]
    207e:	6065      	str	r5, [r4, #4]
    2080:	6125      	str	r5, [r4, #16]
    2082:	6165      	str	r5, [r4, #20]
    2084:	61a5      	str	r5, [r4, #24]
    2086:	2208      	movs	r2, #8
    2088:	0029      	movs	r1, r5
    208a:	305c      	adds	r0, #92	; 0x5c
    208c:	f7ff fc28 	bl	18e0 <memset>
    2090:	6365      	str	r5, [r4, #52]	; 0x34
    2092:	63a5      	str	r5, [r4, #56]	; 0x38
    2094:	64a5      	str	r5, [r4, #72]	; 0x48
    2096:	64e5      	str	r5, [r4, #76]	; 0x4c
    2098:	e7e6      	b.n	2068 <__sfp+0x48>
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	00003b40 	.word	0x00003b40

000020a0 <_fwalk>:
    20a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20a2:	3048      	adds	r0, #72	; 0x48
    20a4:	0004      	movs	r4, r0
    20a6:	2600      	movs	r6, #0
    20a8:	9101      	str	r1, [sp, #4]
    20aa:	2c00      	cmp	r4, #0
    20ac:	d101      	bne.n	20b2 <_fwalk+0x12>
    20ae:	0030      	movs	r0, r6
    20b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    20b2:	68a5      	ldr	r5, [r4, #8]
    20b4:	6867      	ldr	r7, [r4, #4]
    20b6:	3f01      	subs	r7, #1
    20b8:	d501      	bpl.n	20be <_fwalk+0x1e>
    20ba:	6824      	ldr	r4, [r4, #0]
    20bc:	e7f5      	b.n	20aa <_fwalk+0xa>
    20be:	89ab      	ldrh	r3, [r5, #12]
    20c0:	2b01      	cmp	r3, #1
    20c2:	d907      	bls.n	20d4 <_fwalk+0x34>
    20c4:	220e      	movs	r2, #14
    20c6:	5eab      	ldrsh	r3, [r5, r2]
    20c8:	3301      	adds	r3, #1
    20ca:	d003      	beq.n	20d4 <_fwalk+0x34>
    20cc:	0028      	movs	r0, r5
    20ce:	9b01      	ldr	r3, [sp, #4]
    20d0:	4798      	blx	r3
    20d2:	4306      	orrs	r6, r0
    20d4:	3568      	adds	r5, #104	; 0x68
    20d6:	e7ee      	b.n	20b6 <_fwalk+0x16>

000020d8 <_fwalk_reent>:
    20d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20da:	0004      	movs	r4, r0
    20dc:	0007      	movs	r7, r0
    20de:	2600      	movs	r6, #0
    20e0:	9101      	str	r1, [sp, #4]
    20e2:	3448      	adds	r4, #72	; 0x48
    20e4:	2c00      	cmp	r4, #0
    20e6:	d101      	bne.n	20ec <_fwalk_reent+0x14>
    20e8:	0030      	movs	r0, r6
    20ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    20ec:	6863      	ldr	r3, [r4, #4]
    20ee:	68a5      	ldr	r5, [r4, #8]
    20f0:	9300      	str	r3, [sp, #0]
    20f2:	9b00      	ldr	r3, [sp, #0]
    20f4:	3b01      	subs	r3, #1
    20f6:	9300      	str	r3, [sp, #0]
    20f8:	d501      	bpl.n	20fe <_fwalk_reent+0x26>
    20fa:	6824      	ldr	r4, [r4, #0]
    20fc:	e7f2      	b.n	20e4 <_fwalk_reent+0xc>
    20fe:	89ab      	ldrh	r3, [r5, #12]
    2100:	2b01      	cmp	r3, #1
    2102:	d908      	bls.n	2116 <_fwalk_reent+0x3e>
    2104:	220e      	movs	r2, #14
    2106:	5eab      	ldrsh	r3, [r5, r2]
    2108:	3301      	adds	r3, #1
    210a:	d004      	beq.n	2116 <_fwalk_reent+0x3e>
    210c:	0029      	movs	r1, r5
    210e:	0038      	movs	r0, r7
    2110:	9b01      	ldr	r3, [sp, #4]
    2112:	4798      	blx	r3
    2114:	4306      	orrs	r6, r0
    2116:	3568      	adds	r5, #104	; 0x68
    2118:	e7eb      	b.n	20f2 <_fwalk_reent+0x1a>
	...

0000211c <__swhatbuf_r>:
    211c:	b570      	push	{r4, r5, r6, lr}
    211e:	000e      	movs	r6, r1
    2120:	001d      	movs	r5, r3
    2122:	230e      	movs	r3, #14
    2124:	5ec9      	ldrsh	r1, [r1, r3]
    2126:	b090      	sub	sp, #64	; 0x40
    2128:	0014      	movs	r4, r2
    212a:	2900      	cmp	r1, #0
    212c:	da07      	bge.n	213e <__swhatbuf_r+0x22>
    212e:	2300      	movs	r3, #0
    2130:	602b      	str	r3, [r5, #0]
    2132:	89b3      	ldrh	r3, [r6, #12]
    2134:	061b      	lsls	r3, r3, #24
    2136:	d411      	bmi.n	215c <__swhatbuf_r+0x40>
    2138:	2380      	movs	r3, #128	; 0x80
    213a:	00db      	lsls	r3, r3, #3
    213c:	e00f      	b.n	215e <__swhatbuf_r+0x42>
    213e:	aa01      	add	r2, sp, #4
    2140:	f001 fb7e 	bl	3840 <_fstat_r>
    2144:	2800      	cmp	r0, #0
    2146:	dbf2      	blt.n	212e <__swhatbuf_r+0x12>
    2148:	22f0      	movs	r2, #240	; 0xf0
    214a:	9b02      	ldr	r3, [sp, #8]
    214c:	0212      	lsls	r2, r2, #8
    214e:	4013      	ands	r3, r2
    2150:	4a05      	ldr	r2, [pc, #20]	; (2168 <__swhatbuf_r+0x4c>)
    2152:	189b      	adds	r3, r3, r2
    2154:	425a      	negs	r2, r3
    2156:	4153      	adcs	r3, r2
    2158:	602b      	str	r3, [r5, #0]
    215a:	e7ed      	b.n	2138 <__swhatbuf_r+0x1c>
    215c:	2340      	movs	r3, #64	; 0x40
    215e:	2000      	movs	r0, #0
    2160:	6023      	str	r3, [r4, #0]
    2162:	b010      	add	sp, #64	; 0x40
    2164:	bd70      	pop	{r4, r5, r6, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	ffffe000 	.word	0xffffe000

0000216c <__smakebuf_r>:
    216c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    216e:	2602      	movs	r6, #2
    2170:	898b      	ldrh	r3, [r1, #12]
    2172:	0005      	movs	r5, r0
    2174:	000c      	movs	r4, r1
    2176:	4233      	tst	r3, r6
    2178:	d006      	beq.n	2188 <__smakebuf_r+0x1c>
    217a:	0023      	movs	r3, r4
    217c:	3347      	adds	r3, #71	; 0x47
    217e:	6023      	str	r3, [r4, #0]
    2180:	6123      	str	r3, [r4, #16]
    2182:	2301      	movs	r3, #1
    2184:	6163      	str	r3, [r4, #20]
    2186:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2188:	ab01      	add	r3, sp, #4
    218a:	466a      	mov	r2, sp
    218c:	f7ff ffc6 	bl	211c <__swhatbuf_r>
    2190:	9900      	ldr	r1, [sp, #0]
    2192:	0007      	movs	r7, r0
    2194:	0028      	movs	r0, r5
    2196:	f000 f881 	bl	229c <_malloc_r>
    219a:	2800      	cmp	r0, #0
    219c:	d108      	bne.n	21b0 <__smakebuf_r+0x44>
    219e:	220c      	movs	r2, #12
    21a0:	5ea3      	ldrsh	r3, [r4, r2]
    21a2:	059a      	lsls	r2, r3, #22
    21a4:	d4ef      	bmi.n	2186 <__smakebuf_r+0x1a>
    21a6:	2203      	movs	r2, #3
    21a8:	4393      	bics	r3, r2
    21aa:	431e      	orrs	r6, r3
    21ac:	81a6      	strh	r6, [r4, #12]
    21ae:	e7e4      	b.n	217a <__smakebuf_r+0xe>
    21b0:	4b0f      	ldr	r3, [pc, #60]	; (21f0 <__smakebuf_r+0x84>)
    21b2:	62ab      	str	r3, [r5, #40]	; 0x28
    21b4:	2380      	movs	r3, #128	; 0x80
    21b6:	89a2      	ldrh	r2, [r4, #12]
    21b8:	6020      	str	r0, [r4, #0]
    21ba:	4313      	orrs	r3, r2
    21bc:	81a3      	strh	r3, [r4, #12]
    21be:	9b00      	ldr	r3, [sp, #0]
    21c0:	6120      	str	r0, [r4, #16]
    21c2:	6163      	str	r3, [r4, #20]
    21c4:	9b01      	ldr	r3, [sp, #4]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d00d      	beq.n	21e6 <__smakebuf_r+0x7a>
    21ca:	230e      	movs	r3, #14
    21cc:	5ee1      	ldrsh	r1, [r4, r3]
    21ce:	0028      	movs	r0, r5
    21d0:	f001 fb48 	bl	3864 <_isatty_r>
    21d4:	2800      	cmp	r0, #0
    21d6:	d006      	beq.n	21e6 <__smakebuf_r+0x7a>
    21d8:	2203      	movs	r2, #3
    21da:	89a3      	ldrh	r3, [r4, #12]
    21dc:	4393      	bics	r3, r2
    21de:	001a      	movs	r2, r3
    21e0:	2301      	movs	r3, #1
    21e2:	4313      	orrs	r3, r2
    21e4:	81a3      	strh	r3, [r4, #12]
    21e6:	89a0      	ldrh	r0, [r4, #12]
    21e8:	4338      	orrs	r0, r7
    21ea:	81a0      	strh	r0, [r4, #12]
    21ec:	e7cb      	b.n	2186 <__smakebuf_r+0x1a>
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	00001f35 	.word	0x00001f35

000021f4 <malloc>:
    21f4:	b510      	push	{r4, lr}
    21f6:	4b03      	ldr	r3, [pc, #12]	; (2204 <malloc+0x10>)
    21f8:	0001      	movs	r1, r0
    21fa:	6818      	ldr	r0, [r3, #0]
    21fc:	f000 f84e 	bl	229c <_malloc_r>
    2200:	bd10      	pop	{r4, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	2000000c 	.word	0x2000000c

00002208 <_free_r>:
    2208:	b570      	push	{r4, r5, r6, lr}
    220a:	0005      	movs	r5, r0
    220c:	2900      	cmp	r1, #0
    220e:	d010      	beq.n	2232 <_free_r+0x2a>
    2210:	1f0c      	subs	r4, r1, #4
    2212:	6823      	ldr	r3, [r4, #0]
    2214:	2b00      	cmp	r3, #0
    2216:	da00      	bge.n	221a <_free_r+0x12>
    2218:	18e4      	adds	r4, r4, r3
    221a:	0028      	movs	r0, r5
    221c:	f001 fb92 	bl	3944 <__malloc_lock>
    2220:	4a1d      	ldr	r2, [pc, #116]	; (2298 <_free_r+0x90>)
    2222:	6813      	ldr	r3, [r2, #0]
    2224:	2b00      	cmp	r3, #0
    2226:	d105      	bne.n	2234 <_free_r+0x2c>
    2228:	6063      	str	r3, [r4, #4]
    222a:	6014      	str	r4, [r2, #0]
    222c:	0028      	movs	r0, r5
    222e:	f001 fb8a 	bl	3946 <__malloc_unlock>
    2232:	bd70      	pop	{r4, r5, r6, pc}
    2234:	42a3      	cmp	r3, r4
    2236:	d909      	bls.n	224c <_free_r+0x44>
    2238:	6821      	ldr	r1, [r4, #0]
    223a:	1860      	adds	r0, r4, r1
    223c:	4283      	cmp	r3, r0
    223e:	d1f3      	bne.n	2228 <_free_r+0x20>
    2240:	6818      	ldr	r0, [r3, #0]
    2242:	685b      	ldr	r3, [r3, #4]
    2244:	1841      	adds	r1, r0, r1
    2246:	6021      	str	r1, [r4, #0]
    2248:	e7ee      	b.n	2228 <_free_r+0x20>
    224a:	0013      	movs	r3, r2
    224c:	685a      	ldr	r2, [r3, #4]
    224e:	2a00      	cmp	r2, #0
    2250:	d001      	beq.n	2256 <_free_r+0x4e>
    2252:	42a2      	cmp	r2, r4
    2254:	d9f9      	bls.n	224a <_free_r+0x42>
    2256:	6819      	ldr	r1, [r3, #0]
    2258:	1858      	adds	r0, r3, r1
    225a:	42a0      	cmp	r0, r4
    225c:	d10b      	bne.n	2276 <_free_r+0x6e>
    225e:	6820      	ldr	r0, [r4, #0]
    2260:	1809      	adds	r1, r1, r0
    2262:	1858      	adds	r0, r3, r1
    2264:	6019      	str	r1, [r3, #0]
    2266:	4282      	cmp	r2, r0
    2268:	d1e0      	bne.n	222c <_free_r+0x24>
    226a:	6810      	ldr	r0, [r2, #0]
    226c:	6852      	ldr	r2, [r2, #4]
    226e:	1841      	adds	r1, r0, r1
    2270:	6019      	str	r1, [r3, #0]
    2272:	605a      	str	r2, [r3, #4]
    2274:	e7da      	b.n	222c <_free_r+0x24>
    2276:	42a0      	cmp	r0, r4
    2278:	d902      	bls.n	2280 <_free_r+0x78>
    227a:	230c      	movs	r3, #12
    227c:	602b      	str	r3, [r5, #0]
    227e:	e7d5      	b.n	222c <_free_r+0x24>
    2280:	6821      	ldr	r1, [r4, #0]
    2282:	1860      	adds	r0, r4, r1
    2284:	4282      	cmp	r2, r0
    2286:	d103      	bne.n	2290 <_free_r+0x88>
    2288:	6810      	ldr	r0, [r2, #0]
    228a:	6852      	ldr	r2, [r2, #4]
    228c:	1841      	adds	r1, r0, r1
    228e:	6021      	str	r1, [r4, #0]
    2290:	6062      	str	r2, [r4, #4]
    2292:	605c      	str	r4, [r3, #4]
    2294:	e7ca      	b.n	222c <_free_r+0x24>
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	2000026c 	.word	0x2000026c

0000229c <_malloc_r>:
    229c:	2303      	movs	r3, #3
    229e:	b570      	push	{r4, r5, r6, lr}
    22a0:	1ccd      	adds	r5, r1, #3
    22a2:	439d      	bics	r5, r3
    22a4:	3508      	adds	r5, #8
    22a6:	0006      	movs	r6, r0
    22a8:	2d0c      	cmp	r5, #12
    22aa:	d21e      	bcs.n	22ea <_malloc_r+0x4e>
    22ac:	250c      	movs	r5, #12
    22ae:	42a9      	cmp	r1, r5
    22b0:	d81d      	bhi.n	22ee <_malloc_r+0x52>
    22b2:	0030      	movs	r0, r6
    22b4:	f001 fb46 	bl	3944 <__malloc_lock>
    22b8:	4a25      	ldr	r2, [pc, #148]	; (2350 <_malloc_r+0xb4>)
    22ba:	6814      	ldr	r4, [r2, #0]
    22bc:	0021      	movs	r1, r4
    22be:	2900      	cmp	r1, #0
    22c0:	d119      	bne.n	22f6 <_malloc_r+0x5a>
    22c2:	4c24      	ldr	r4, [pc, #144]	; (2354 <_malloc_r+0xb8>)
    22c4:	6823      	ldr	r3, [r4, #0]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d103      	bne.n	22d2 <_malloc_r+0x36>
    22ca:	0030      	movs	r0, r6
    22cc:	f001 f824 	bl	3318 <_sbrk_r>
    22d0:	6020      	str	r0, [r4, #0]
    22d2:	0029      	movs	r1, r5
    22d4:	0030      	movs	r0, r6
    22d6:	f001 f81f 	bl	3318 <_sbrk_r>
    22da:	1c43      	adds	r3, r0, #1
    22dc:	d12c      	bne.n	2338 <_malloc_r+0x9c>
    22de:	230c      	movs	r3, #12
    22e0:	0030      	movs	r0, r6
    22e2:	6033      	str	r3, [r6, #0]
    22e4:	f001 fb2f 	bl	3946 <__malloc_unlock>
    22e8:	e003      	b.n	22f2 <_malloc_r+0x56>
    22ea:	2d00      	cmp	r5, #0
    22ec:	dadf      	bge.n	22ae <_malloc_r+0x12>
    22ee:	230c      	movs	r3, #12
    22f0:	6033      	str	r3, [r6, #0]
    22f2:	2000      	movs	r0, #0
    22f4:	bd70      	pop	{r4, r5, r6, pc}
    22f6:	680b      	ldr	r3, [r1, #0]
    22f8:	1b5b      	subs	r3, r3, r5
    22fa:	d41a      	bmi.n	2332 <_malloc_r+0x96>
    22fc:	2b0b      	cmp	r3, #11
    22fe:	d903      	bls.n	2308 <_malloc_r+0x6c>
    2300:	600b      	str	r3, [r1, #0]
    2302:	18cc      	adds	r4, r1, r3
    2304:	6025      	str	r5, [r4, #0]
    2306:	e003      	b.n	2310 <_malloc_r+0x74>
    2308:	428c      	cmp	r4, r1
    230a:	d10e      	bne.n	232a <_malloc_r+0x8e>
    230c:	6863      	ldr	r3, [r4, #4]
    230e:	6013      	str	r3, [r2, #0]
    2310:	0030      	movs	r0, r6
    2312:	f001 fb18 	bl	3946 <__malloc_unlock>
    2316:	0020      	movs	r0, r4
    2318:	2207      	movs	r2, #7
    231a:	300b      	adds	r0, #11
    231c:	1d23      	adds	r3, r4, #4
    231e:	4390      	bics	r0, r2
    2320:	1ac3      	subs	r3, r0, r3
    2322:	d0e7      	beq.n	22f4 <_malloc_r+0x58>
    2324:	425a      	negs	r2, r3
    2326:	50e2      	str	r2, [r4, r3]
    2328:	e7e4      	b.n	22f4 <_malloc_r+0x58>
    232a:	684b      	ldr	r3, [r1, #4]
    232c:	6063      	str	r3, [r4, #4]
    232e:	000c      	movs	r4, r1
    2330:	e7ee      	b.n	2310 <_malloc_r+0x74>
    2332:	000c      	movs	r4, r1
    2334:	6849      	ldr	r1, [r1, #4]
    2336:	e7c2      	b.n	22be <_malloc_r+0x22>
    2338:	2303      	movs	r3, #3
    233a:	1cc4      	adds	r4, r0, #3
    233c:	439c      	bics	r4, r3
    233e:	42a0      	cmp	r0, r4
    2340:	d0e0      	beq.n	2304 <_malloc_r+0x68>
    2342:	1a21      	subs	r1, r4, r0
    2344:	0030      	movs	r0, r6
    2346:	f000 ffe7 	bl	3318 <_sbrk_r>
    234a:	1c43      	adds	r3, r0, #1
    234c:	d1da      	bne.n	2304 <_malloc_r+0x68>
    234e:	e7c6      	b.n	22de <_malloc_r+0x42>
    2350:	2000026c 	.word	0x2000026c
    2354:	20000270 	.word	0x20000270

00002358 <__ssputs_r>:
    2358:	b5f0      	push	{r4, r5, r6, r7, lr}
    235a:	688e      	ldr	r6, [r1, #8]
    235c:	b085      	sub	sp, #20
    235e:	0007      	movs	r7, r0
    2360:	000c      	movs	r4, r1
    2362:	9203      	str	r2, [sp, #12]
    2364:	9301      	str	r3, [sp, #4]
    2366:	429e      	cmp	r6, r3
    2368:	d839      	bhi.n	23de <__ssputs_r+0x86>
    236a:	2390      	movs	r3, #144	; 0x90
    236c:	898a      	ldrh	r2, [r1, #12]
    236e:	00db      	lsls	r3, r3, #3
    2370:	421a      	tst	r2, r3
    2372:	d034      	beq.n	23de <__ssputs_r+0x86>
    2374:	2503      	movs	r5, #3
    2376:	6909      	ldr	r1, [r1, #16]
    2378:	6823      	ldr	r3, [r4, #0]
    237a:	1a5b      	subs	r3, r3, r1
    237c:	9302      	str	r3, [sp, #8]
    237e:	6963      	ldr	r3, [r4, #20]
    2380:	9802      	ldr	r0, [sp, #8]
    2382:	435d      	muls	r5, r3
    2384:	0feb      	lsrs	r3, r5, #31
    2386:	195d      	adds	r5, r3, r5
    2388:	9b01      	ldr	r3, [sp, #4]
    238a:	106d      	asrs	r5, r5, #1
    238c:	3301      	adds	r3, #1
    238e:	181b      	adds	r3, r3, r0
    2390:	42ab      	cmp	r3, r5
    2392:	d900      	bls.n	2396 <__ssputs_r+0x3e>
    2394:	001d      	movs	r5, r3
    2396:	0553      	lsls	r3, r2, #21
    2398:	d532      	bpl.n	2400 <__ssputs_r+0xa8>
    239a:	0029      	movs	r1, r5
    239c:	0038      	movs	r0, r7
    239e:	f7ff ff7d 	bl	229c <_malloc_r>
    23a2:	1e06      	subs	r6, r0, #0
    23a4:	d109      	bne.n	23ba <__ssputs_r+0x62>
    23a6:	230c      	movs	r3, #12
    23a8:	603b      	str	r3, [r7, #0]
    23aa:	2340      	movs	r3, #64	; 0x40
    23ac:	2001      	movs	r0, #1
    23ae:	89a2      	ldrh	r2, [r4, #12]
    23b0:	4240      	negs	r0, r0
    23b2:	4313      	orrs	r3, r2
    23b4:	81a3      	strh	r3, [r4, #12]
    23b6:	b005      	add	sp, #20
    23b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ba:	9a02      	ldr	r2, [sp, #8]
    23bc:	6921      	ldr	r1, [r4, #16]
    23be:	f001 faa6 	bl	390e <memcpy>
    23c2:	89a3      	ldrh	r3, [r4, #12]
    23c4:	4a14      	ldr	r2, [pc, #80]	; (2418 <__ssputs_r+0xc0>)
    23c6:	401a      	ands	r2, r3
    23c8:	2380      	movs	r3, #128	; 0x80
    23ca:	4313      	orrs	r3, r2
    23cc:	81a3      	strh	r3, [r4, #12]
    23ce:	9b02      	ldr	r3, [sp, #8]
    23d0:	6126      	str	r6, [r4, #16]
    23d2:	18f6      	adds	r6, r6, r3
    23d4:	6026      	str	r6, [r4, #0]
    23d6:	6165      	str	r5, [r4, #20]
    23d8:	9e01      	ldr	r6, [sp, #4]
    23da:	1aed      	subs	r5, r5, r3
    23dc:	60a5      	str	r5, [r4, #8]
    23de:	9b01      	ldr	r3, [sp, #4]
    23e0:	42b3      	cmp	r3, r6
    23e2:	d200      	bcs.n	23e6 <__ssputs_r+0x8e>
    23e4:	001e      	movs	r6, r3
    23e6:	0032      	movs	r2, r6
    23e8:	9903      	ldr	r1, [sp, #12]
    23ea:	6820      	ldr	r0, [r4, #0]
    23ec:	f001 fa98 	bl	3920 <memmove>
    23f0:	68a3      	ldr	r3, [r4, #8]
    23f2:	2000      	movs	r0, #0
    23f4:	1b9b      	subs	r3, r3, r6
    23f6:	60a3      	str	r3, [r4, #8]
    23f8:	6823      	ldr	r3, [r4, #0]
    23fa:	199e      	adds	r6, r3, r6
    23fc:	6026      	str	r6, [r4, #0]
    23fe:	e7da      	b.n	23b6 <__ssputs_r+0x5e>
    2400:	002a      	movs	r2, r5
    2402:	0038      	movs	r0, r7
    2404:	f001 faa0 	bl	3948 <_realloc_r>
    2408:	1e06      	subs	r6, r0, #0
    240a:	d1e0      	bne.n	23ce <__ssputs_r+0x76>
    240c:	6921      	ldr	r1, [r4, #16]
    240e:	0038      	movs	r0, r7
    2410:	f7ff fefa 	bl	2208 <_free_r>
    2414:	e7c7      	b.n	23a6 <__ssputs_r+0x4e>
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	fffffb7f 	.word	0xfffffb7f

0000241c <_svfiprintf_r>:
    241c:	b5f0      	push	{r4, r5, r6, r7, lr}
    241e:	b09f      	sub	sp, #124	; 0x7c
    2420:	9002      	str	r0, [sp, #8]
    2422:	9305      	str	r3, [sp, #20]
    2424:	898b      	ldrh	r3, [r1, #12]
    2426:	000f      	movs	r7, r1
    2428:	0016      	movs	r6, r2
    242a:	061b      	lsls	r3, r3, #24
    242c:	d511      	bpl.n	2452 <_svfiprintf_r+0x36>
    242e:	690b      	ldr	r3, [r1, #16]
    2430:	2b00      	cmp	r3, #0
    2432:	d10e      	bne.n	2452 <_svfiprintf_r+0x36>
    2434:	2140      	movs	r1, #64	; 0x40
    2436:	f7ff ff31 	bl	229c <_malloc_r>
    243a:	6038      	str	r0, [r7, #0]
    243c:	6138      	str	r0, [r7, #16]
    243e:	2800      	cmp	r0, #0
    2440:	d105      	bne.n	244e <_svfiprintf_r+0x32>
    2442:	230c      	movs	r3, #12
    2444:	9a02      	ldr	r2, [sp, #8]
    2446:	3801      	subs	r0, #1
    2448:	6013      	str	r3, [r2, #0]
    244a:	b01f      	add	sp, #124	; 0x7c
    244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    244e:	2340      	movs	r3, #64	; 0x40
    2450:	617b      	str	r3, [r7, #20]
    2452:	2300      	movs	r3, #0
    2454:	ad06      	add	r5, sp, #24
    2456:	616b      	str	r3, [r5, #20]
    2458:	3320      	adds	r3, #32
    245a:	766b      	strb	r3, [r5, #25]
    245c:	3310      	adds	r3, #16
    245e:	76ab      	strb	r3, [r5, #26]
    2460:	0034      	movs	r4, r6
    2462:	7823      	ldrb	r3, [r4, #0]
    2464:	2b00      	cmp	r3, #0
    2466:	d147      	bne.n	24f8 <_svfiprintf_r+0xdc>
    2468:	1ba3      	subs	r3, r4, r6
    246a:	9304      	str	r3, [sp, #16]
    246c:	d00d      	beq.n	248a <_svfiprintf_r+0x6e>
    246e:	1ba3      	subs	r3, r4, r6
    2470:	0032      	movs	r2, r6
    2472:	0039      	movs	r1, r7
    2474:	9802      	ldr	r0, [sp, #8]
    2476:	f7ff ff6f 	bl	2358 <__ssputs_r>
    247a:	1c43      	adds	r3, r0, #1
    247c:	d100      	bne.n	2480 <_svfiprintf_r+0x64>
    247e:	e0b5      	b.n	25ec <_svfiprintf_r+0x1d0>
    2480:	696a      	ldr	r2, [r5, #20]
    2482:	9b04      	ldr	r3, [sp, #16]
    2484:	4694      	mov	ip, r2
    2486:	4463      	add	r3, ip
    2488:	616b      	str	r3, [r5, #20]
    248a:	7823      	ldrb	r3, [r4, #0]
    248c:	2b00      	cmp	r3, #0
    248e:	d100      	bne.n	2492 <_svfiprintf_r+0x76>
    2490:	e0ac      	b.n	25ec <_svfiprintf_r+0x1d0>
    2492:	2201      	movs	r2, #1
    2494:	2300      	movs	r3, #0
    2496:	4252      	negs	r2, r2
    2498:	606a      	str	r2, [r5, #4]
    249a:	a902      	add	r1, sp, #8
    249c:	3254      	adds	r2, #84	; 0x54
    249e:	1852      	adds	r2, r2, r1
    24a0:	3401      	adds	r4, #1
    24a2:	602b      	str	r3, [r5, #0]
    24a4:	60eb      	str	r3, [r5, #12]
    24a6:	60ab      	str	r3, [r5, #8]
    24a8:	7013      	strb	r3, [r2, #0]
    24aa:	65ab      	str	r3, [r5, #88]	; 0x58
    24ac:	4e58      	ldr	r6, [pc, #352]	; (2610 <_svfiprintf_r+0x1f4>)
    24ae:	2205      	movs	r2, #5
    24b0:	7821      	ldrb	r1, [r4, #0]
    24b2:	0030      	movs	r0, r6
    24b4:	f001 fa20 	bl	38f8 <memchr>
    24b8:	1c62      	adds	r2, r4, #1
    24ba:	2800      	cmp	r0, #0
    24bc:	d120      	bne.n	2500 <_svfiprintf_r+0xe4>
    24be:	6829      	ldr	r1, [r5, #0]
    24c0:	06cb      	lsls	r3, r1, #27
    24c2:	d504      	bpl.n	24ce <_svfiprintf_r+0xb2>
    24c4:	2353      	movs	r3, #83	; 0x53
    24c6:	ae02      	add	r6, sp, #8
    24c8:	3020      	adds	r0, #32
    24ca:	199b      	adds	r3, r3, r6
    24cc:	7018      	strb	r0, [r3, #0]
    24ce:	070b      	lsls	r3, r1, #28
    24d0:	d504      	bpl.n	24dc <_svfiprintf_r+0xc0>
    24d2:	2353      	movs	r3, #83	; 0x53
    24d4:	202b      	movs	r0, #43	; 0x2b
    24d6:	ae02      	add	r6, sp, #8
    24d8:	199b      	adds	r3, r3, r6
    24da:	7018      	strb	r0, [r3, #0]
    24dc:	7823      	ldrb	r3, [r4, #0]
    24de:	2b2a      	cmp	r3, #42	; 0x2a
    24e0:	d016      	beq.n	2510 <_svfiprintf_r+0xf4>
    24e2:	2000      	movs	r0, #0
    24e4:	210a      	movs	r1, #10
    24e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    24e8:	7822      	ldrb	r2, [r4, #0]
    24ea:	3a30      	subs	r2, #48	; 0x30
    24ec:	2a09      	cmp	r2, #9
    24ee:	d955      	bls.n	259c <_svfiprintf_r+0x180>
    24f0:	2800      	cmp	r0, #0
    24f2:	d015      	beq.n	2520 <_svfiprintf_r+0x104>
    24f4:	9309      	str	r3, [sp, #36]	; 0x24
    24f6:	e013      	b.n	2520 <_svfiprintf_r+0x104>
    24f8:	2b25      	cmp	r3, #37	; 0x25
    24fa:	d0b5      	beq.n	2468 <_svfiprintf_r+0x4c>
    24fc:	3401      	adds	r4, #1
    24fe:	e7b0      	b.n	2462 <_svfiprintf_r+0x46>
    2500:	2301      	movs	r3, #1
    2502:	1b80      	subs	r0, r0, r6
    2504:	4083      	lsls	r3, r0
    2506:	6829      	ldr	r1, [r5, #0]
    2508:	0014      	movs	r4, r2
    250a:	430b      	orrs	r3, r1
    250c:	602b      	str	r3, [r5, #0]
    250e:	e7cd      	b.n	24ac <_svfiprintf_r+0x90>
    2510:	9b05      	ldr	r3, [sp, #20]
    2512:	1d18      	adds	r0, r3, #4
    2514:	681b      	ldr	r3, [r3, #0]
    2516:	9005      	str	r0, [sp, #20]
    2518:	2b00      	cmp	r3, #0
    251a:	db39      	blt.n	2590 <_svfiprintf_r+0x174>
    251c:	9309      	str	r3, [sp, #36]	; 0x24
    251e:	0014      	movs	r4, r2
    2520:	7823      	ldrb	r3, [r4, #0]
    2522:	2b2e      	cmp	r3, #46	; 0x2e
    2524:	d10b      	bne.n	253e <_svfiprintf_r+0x122>
    2526:	7863      	ldrb	r3, [r4, #1]
    2528:	1c62      	adds	r2, r4, #1
    252a:	2b2a      	cmp	r3, #42	; 0x2a
    252c:	d13e      	bne.n	25ac <_svfiprintf_r+0x190>
    252e:	9b05      	ldr	r3, [sp, #20]
    2530:	3402      	adds	r4, #2
    2532:	1d1a      	adds	r2, r3, #4
    2534:	681b      	ldr	r3, [r3, #0]
    2536:	9205      	str	r2, [sp, #20]
    2538:	2b00      	cmp	r3, #0
    253a:	db34      	blt.n	25a6 <_svfiprintf_r+0x18a>
    253c:	9307      	str	r3, [sp, #28]
    253e:	4e35      	ldr	r6, [pc, #212]	; (2614 <_svfiprintf_r+0x1f8>)
    2540:	7821      	ldrb	r1, [r4, #0]
    2542:	2203      	movs	r2, #3
    2544:	0030      	movs	r0, r6
    2546:	f001 f9d7 	bl	38f8 <memchr>
    254a:	2800      	cmp	r0, #0
    254c:	d006      	beq.n	255c <_svfiprintf_r+0x140>
    254e:	2340      	movs	r3, #64	; 0x40
    2550:	1b80      	subs	r0, r0, r6
    2552:	4083      	lsls	r3, r0
    2554:	682a      	ldr	r2, [r5, #0]
    2556:	3401      	adds	r4, #1
    2558:	4313      	orrs	r3, r2
    255a:	602b      	str	r3, [r5, #0]
    255c:	7821      	ldrb	r1, [r4, #0]
    255e:	2206      	movs	r2, #6
    2560:	482d      	ldr	r0, [pc, #180]	; (2618 <_svfiprintf_r+0x1fc>)
    2562:	1c66      	adds	r6, r4, #1
    2564:	7629      	strb	r1, [r5, #24]
    2566:	f001 f9c7 	bl	38f8 <memchr>
    256a:	2800      	cmp	r0, #0
    256c:	d046      	beq.n	25fc <_svfiprintf_r+0x1e0>
    256e:	4b2b      	ldr	r3, [pc, #172]	; (261c <_svfiprintf_r+0x200>)
    2570:	2b00      	cmp	r3, #0
    2572:	d12f      	bne.n	25d4 <_svfiprintf_r+0x1b8>
    2574:	6829      	ldr	r1, [r5, #0]
    2576:	9b05      	ldr	r3, [sp, #20]
    2578:	2207      	movs	r2, #7
    257a:	05c9      	lsls	r1, r1, #23
    257c:	d528      	bpl.n	25d0 <_svfiprintf_r+0x1b4>
    257e:	189b      	adds	r3, r3, r2
    2580:	4393      	bics	r3, r2
    2582:	3308      	adds	r3, #8
    2584:	9305      	str	r3, [sp, #20]
    2586:	696b      	ldr	r3, [r5, #20]
    2588:	9a03      	ldr	r2, [sp, #12]
    258a:	189b      	adds	r3, r3, r2
    258c:	616b      	str	r3, [r5, #20]
    258e:	e767      	b.n	2460 <_svfiprintf_r+0x44>
    2590:	425b      	negs	r3, r3
    2592:	60eb      	str	r3, [r5, #12]
    2594:	2302      	movs	r3, #2
    2596:	430b      	orrs	r3, r1
    2598:	602b      	str	r3, [r5, #0]
    259a:	e7c0      	b.n	251e <_svfiprintf_r+0x102>
    259c:	434b      	muls	r3, r1
    259e:	3401      	adds	r4, #1
    25a0:	189b      	adds	r3, r3, r2
    25a2:	2001      	movs	r0, #1
    25a4:	e7a0      	b.n	24e8 <_svfiprintf_r+0xcc>
    25a6:	2301      	movs	r3, #1
    25a8:	425b      	negs	r3, r3
    25aa:	e7c7      	b.n	253c <_svfiprintf_r+0x120>
    25ac:	2300      	movs	r3, #0
    25ae:	0014      	movs	r4, r2
    25b0:	200a      	movs	r0, #10
    25b2:	001a      	movs	r2, r3
    25b4:	606b      	str	r3, [r5, #4]
    25b6:	7821      	ldrb	r1, [r4, #0]
    25b8:	3930      	subs	r1, #48	; 0x30
    25ba:	2909      	cmp	r1, #9
    25bc:	d903      	bls.n	25c6 <_svfiprintf_r+0x1aa>
    25be:	2b00      	cmp	r3, #0
    25c0:	d0bd      	beq.n	253e <_svfiprintf_r+0x122>
    25c2:	9207      	str	r2, [sp, #28]
    25c4:	e7bb      	b.n	253e <_svfiprintf_r+0x122>
    25c6:	4342      	muls	r2, r0
    25c8:	3401      	adds	r4, #1
    25ca:	1852      	adds	r2, r2, r1
    25cc:	2301      	movs	r3, #1
    25ce:	e7f2      	b.n	25b6 <_svfiprintf_r+0x19a>
    25d0:	3307      	adds	r3, #7
    25d2:	e7d5      	b.n	2580 <_svfiprintf_r+0x164>
    25d4:	ab05      	add	r3, sp, #20
    25d6:	9300      	str	r3, [sp, #0]
    25d8:	003a      	movs	r2, r7
    25da:	4b11      	ldr	r3, [pc, #68]	; (2620 <_svfiprintf_r+0x204>)
    25dc:	0029      	movs	r1, r5
    25de:	9802      	ldr	r0, [sp, #8]
    25e0:	e000      	b.n	25e4 <_svfiprintf_r+0x1c8>
    25e2:	bf00      	nop
    25e4:	9003      	str	r0, [sp, #12]
    25e6:	9b03      	ldr	r3, [sp, #12]
    25e8:	3301      	adds	r3, #1
    25ea:	d1cc      	bne.n	2586 <_svfiprintf_r+0x16a>
    25ec:	89bb      	ldrh	r3, [r7, #12]
    25ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    25f0:	065b      	lsls	r3, r3, #25
    25f2:	d400      	bmi.n	25f6 <_svfiprintf_r+0x1da>
    25f4:	e729      	b.n	244a <_svfiprintf_r+0x2e>
    25f6:	2001      	movs	r0, #1
    25f8:	4240      	negs	r0, r0
    25fa:	e726      	b.n	244a <_svfiprintf_r+0x2e>
    25fc:	ab05      	add	r3, sp, #20
    25fe:	9300      	str	r3, [sp, #0]
    2600:	003a      	movs	r2, r7
    2602:	4b07      	ldr	r3, [pc, #28]	; (2620 <_svfiprintf_r+0x204>)
    2604:	0029      	movs	r1, r5
    2606:	9802      	ldr	r0, [sp, #8]
    2608:	f000 f9be 	bl	2988 <_printf_i>
    260c:	e7ea      	b.n	25e4 <_svfiprintf_r+0x1c8>
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	00003ba4 	.word	0x00003ba4
    2614:	00003baa 	.word	0x00003baa
    2618:	00003bae 	.word	0x00003bae
    261c:	00000000 	.word	0x00000000
    2620:	00002359 	.word	0x00002359

00002624 <__sfputc_r>:
    2624:	6893      	ldr	r3, [r2, #8]
    2626:	b510      	push	{r4, lr}
    2628:	3b01      	subs	r3, #1
    262a:	6093      	str	r3, [r2, #8]
    262c:	2b00      	cmp	r3, #0
    262e:	da05      	bge.n	263c <__sfputc_r+0x18>
    2630:	6994      	ldr	r4, [r2, #24]
    2632:	42a3      	cmp	r3, r4
    2634:	db08      	blt.n	2648 <__sfputc_r+0x24>
    2636:	b2cb      	uxtb	r3, r1
    2638:	2b0a      	cmp	r3, #10
    263a:	d005      	beq.n	2648 <__sfputc_r+0x24>
    263c:	6813      	ldr	r3, [r2, #0]
    263e:	1c58      	adds	r0, r3, #1
    2640:	6010      	str	r0, [r2, #0]
    2642:	7019      	strb	r1, [r3, #0]
    2644:	b2c8      	uxtb	r0, r1
    2646:	bd10      	pop	{r4, pc}
    2648:	f7ff fade 	bl	1c08 <__swbuf_r>
    264c:	e7fb      	b.n	2646 <__sfputc_r+0x22>

0000264e <__sfputs_r>:
    264e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2650:	0006      	movs	r6, r0
    2652:	000f      	movs	r7, r1
    2654:	0014      	movs	r4, r2
    2656:	18d5      	adds	r5, r2, r3
    2658:	42ac      	cmp	r4, r5
    265a:	d101      	bne.n	2660 <__sfputs_r+0x12>
    265c:	2000      	movs	r0, #0
    265e:	e007      	b.n	2670 <__sfputs_r+0x22>
    2660:	7821      	ldrb	r1, [r4, #0]
    2662:	003a      	movs	r2, r7
    2664:	0030      	movs	r0, r6
    2666:	f7ff ffdd 	bl	2624 <__sfputc_r>
    266a:	3401      	adds	r4, #1
    266c:	1c43      	adds	r3, r0, #1
    266e:	d1f3      	bne.n	2658 <__sfputs_r+0xa>
    2670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002674 <_vfiprintf_r>:
    2674:	b5f0      	push	{r4, r5, r6, r7, lr}
    2676:	b09f      	sub	sp, #124	; 0x7c
    2678:	0006      	movs	r6, r0
    267a:	000f      	movs	r7, r1
    267c:	0014      	movs	r4, r2
    267e:	9305      	str	r3, [sp, #20]
    2680:	2800      	cmp	r0, #0
    2682:	d004      	beq.n	268e <_vfiprintf_r+0x1a>
    2684:	6983      	ldr	r3, [r0, #24]
    2686:	2b00      	cmp	r3, #0
    2688:	d101      	bne.n	268e <_vfiprintf_r+0x1a>
    268a:	f7ff fc95 	bl	1fb8 <__sinit>
    268e:	4b7f      	ldr	r3, [pc, #508]	; (288c <_vfiprintf_r+0x218>)
    2690:	429f      	cmp	r7, r3
    2692:	d15c      	bne.n	274e <_vfiprintf_r+0xda>
    2694:	6877      	ldr	r7, [r6, #4]
    2696:	89bb      	ldrh	r3, [r7, #12]
    2698:	071b      	lsls	r3, r3, #28
    269a:	d562      	bpl.n	2762 <_vfiprintf_r+0xee>
    269c:	693b      	ldr	r3, [r7, #16]
    269e:	2b00      	cmp	r3, #0
    26a0:	d05f      	beq.n	2762 <_vfiprintf_r+0xee>
    26a2:	2300      	movs	r3, #0
    26a4:	ad06      	add	r5, sp, #24
    26a6:	616b      	str	r3, [r5, #20]
    26a8:	3320      	adds	r3, #32
    26aa:	766b      	strb	r3, [r5, #25]
    26ac:	3310      	adds	r3, #16
    26ae:	76ab      	strb	r3, [r5, #26]
    26b0:	9402      	str	r4, [sp, #8]
    26b2:	9c02      	ldr	r4, [sp, #8]
    26b4:	7823      	ldrb	r3, [r4, #0]
    26b6:	2b00      	cmp	r3, #0
    26b8:	d15d      	bne.n	2776 <_vfiprintf_r+0x102>
    26ba:	9b02      	ldr	r3, [sp, #8]
    26bc:	1ae3      	subs	r3, r4, r3
    26be:	9304      	str	r3, [sp, #16]
    26c0:	d00d      	beq.n	26de <_vfiprintf_r+0x6a>
    26c2:	9b04      	ldr	r3, [sp, #16]
    26c4:	9a02      	ldr	r2, [sp, #8]
    26c6:	0039      	movs	r1, r7
    26c8:	0030      	movs	r0, r6
    26ca:	f7ff ffc0 	bl	264e <__sfputs_r>
    26ce:	1c43      	adds	r3, r0, #1
    26d0:	d100      	bne.n	26d4 <_vfiprintf_r+0x60>
    26d2:	e0cc      	b.n	286e <_vfiprintf_r+0x1fa>
    26d4:	696a      	ldr	r2, [r5, #20]
    26d6:	9b04      	ldr	r3, [sp, #16]
    26d8:	4694      	mov	ip, r2
    26da:	4463      	add	r3, ip
    26dc:	616b      	str	r3, [r5, #20]
    26de:	7823      	ldrb	r3, [r4, #0]
    26e0:	2b00      	cmp	r3, #0
    26e2:	d100      	bne.n	26e6 <_vfiprintf_r+0x72>
    26e4:	e0c3      	b.n	286e <_vfiprintf_r+0x1fa>
    26e6:	2201      	movs	r2, #1
    26e8:	2300      	movs	r3, #0
    26ea:	4252      	negs	r2, r2
    26ec:	606a      	str	r2, [r5, #4]
    26ee:	a902      	add	r1, sp, #8
    26f0:	3254      	adds	r2, #84	; 0x54
    26f2:	1852      	adds	r2, r2, r1
    26f4:	3401      	adds	r4, #1
    26f6:	602b      	str	r3, [r5, #0]
    26f8:	60eb      	str	r3, [r5, #12]
    26fa:	60ab      	str	r3, [r5, #8]
    26fc:	7013      	strb	r3, [r2, #0]
    26fe:	65ab      	str	r3, [r5, #88]	; 0x58
    2700:	7821      	ldrb	r1, [r4, #0]
    2702:	2205      	movs	r2, #5
    2704:	4862      	ldr	r0, [pc, #392]	; (2890 <_vfiprintf_r+0x21c>)
    2706:	f001 f8f7 	bl	38f8 <memchr>
    270a:	1c63      	adds	r3, r4, #1
    270c:	469c      	mov	ip, r3
    270e:	2800      	cmp	r0, #0
    2710:	d135      	bne.n	277e <_vfiprintf_r+0x10a>
    2712:	6829      	ldr	r1, [r5, #0]
    2714:	06cb      	lsls	r3, r1, #27
    2716:	d504      	bpl.n	2722 <_vfiprintf_r+0xae>
    2718:	2353      	movs	r3, #83	; 0x53
    271a:	aa02      	add	r2, sp, #8
    271c:	3020      	adds	r0, #32
    271e:	189b      	adds	r3, r3, r2
    2720:	7018      	strb	r0, [r3, #0]
    2722:	070b      	lsls	r3, r1, #28
    2724:	d504      	bpl.n	2730 <_vfiprintf_r+0xbc>
    2726:	2353      	movs	r3, #83	; 0x53
    2728:	202b      	movs	r0, #43	; 0x2b
    272a:	aa02      	add	r2, sp, #8
    272c:	189b      	adds	r3, r3, r2
    272e:	7018      	strb	r0, [r3, #0]
    2730:	7823      	ldrb	r3, [r4, #0]
    2732:	2b2a      	cmp	r3, #42	; 0x2a
    2734:	d02c      	beq.n	2790 <_vfiprintf_r+0x11c>
    2736:	2000      	movs	r0, #0
    2738:	210a      	movs	r1, #10
    273a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    273c:	7822      	ldrb	r2, [r4, #0]
    273e:	3a30      	subs	r2, #48	; 0x30
    2740:	2a09      	cmp	r2, #9
    2742:	d800      	bhi.n	2746 <_vfiprintf_r+0xd2>
    2744:	e06b      	b.n	281e <_vfiprintf_r+0x1aa>
    2746:	2800      	cmp	r0, #0
    2748:	d02a      	beq.n	27a0 <_vfiprintf_r+0x12c>
    274a:	9309      	str	r3, [sp, #36]	; 0x24
    274c:	e028      	b.n	27a0 <_vfiprintf_r+0x12c>
    274e:	4b51      	ldr	r3, [pc, #324]	; (2894 <_vfiprintf_r+0x220>)
    2750:	429f      	cmp	r7, r3
    2752:	d101      	bne.n	2758 <_vfiprintf_r+0xe4>
    2754:	68b7      	ldr	r7, [r6, #8]
    2756:	e79e      	b.n	2696 <_vfiprintf_r+0x22>
    2758:	4b4f      	ldr	r3, [pc, #316]	; (2898 <_vfiprintf_r+0x224>)
    275a:	429f      	cmp	r7, r3
    275c:	d19b      	bne.n	2696 <_vfiprintf_r+0x22>
    275e:	68f7      	ldr	r7, [r6, #12]
    2760:	e799      	b.n	2696 <_vfiprintf_r+0x22>
    2762:	0039      	movs	r1, r7
    2764:	0030      	movs	r0, r6
    2766:	f7ff faa5 	bl	1cb4 <__swsetup_r>
    276a:	2800      	cmp	r0, #0
    276c:	d099      	beq.n	26a2 <_vfiprintf_r+0x2e>
    276e:	2001      	movs	r0, #1
    2770:	4240      	negs	r0, r0
    2772:	b01f      	add	sp, #124	; 0x7c
    2774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2776:	2b25      	cmp	r3, #37	; 0x25
    2778:	d09f      	beq.n	26ba <_vfiprintf_r+0x46>
    277a:	3401      	adds	r4, #1
    277c:	e79a      	b.n	26b4 <_vfiprintf_r+0x40>
    277e:	4b44      	ldr	r3, [pc, #272]	; (2890 <_vfiprintf_r+0x21c>)
    2780:	6829      	ldr	r1, [r5, #0]
    2782:	1ac0      	subs	r0, r0, r3
    2784:	2301      	movs	r3, #1
    2786:	4083      	lsls	r3, r0
    2788:	430b      	orrs	r3, r1
    278a:	602b      	str	r3, [r5, #0]
    278c:	4664      	mov	r4, ip
    278e:	e7b7      	b.n	2700 <_vfiprintf_r+0x8c>
    2790:	9b05      	ldr	r3, [sp, #20]
    2792:	1d18      	adds	r0, r3, #4
    2794:	681b      	ldr	r3, [r3, #0]
    2796:	9005      	str	r0, [sp, #20]
    2798:	2b00      	cmp	r3, #0
    279a:	db3a      	blt.n	2812 <_vfiprintf_r+0x19e>
    279c:	9309      	str	r3, [sp, #36]	; 0x24
    279e:	4664      	mov	r4, ip
    27a0:	7823      	ldrb	r3, [r4, #0]
    27a2:	2b2e      	cmp	r3, #46	; 0x2e
    27a4:	d10b      	bne.n	27be <_vfiprintf_r+0x14a>
    27a6:	7863      	ldrb	r3, [r4, #1]
    27a8:	1c62      	adds	r2, r4, #1
    27aa:	2b2a      	cmp	r3, #42	; 0x2a
    27ac:	d13f      	bne.n	282e <_vfiprintf_r+0x1ba>
    27ae:	9b05      	ldr	r3, [sp, #20]
    27b0:	3402      	adds	r4, #2
    27b2:	1d1a      	adds	r2, r3, #4
    27b4:	681b      	ldr	r3, [r3, #0]
    27b6:	9205      	str	r2, [sp, #20]
    27b8:	2b00      	cmp	r3, #0
    27ba:	db35      	blt.n	2828 <_vfiprintf_r+0x1b4>
    27bc:	9307      	str	r3, [sp, #28]
    27be:	7821      	ldrb	r1, [r4, #0]
    27c0:	2203      	movs	r2, #3
    27c2:	4836      	ldr	r0, [pc, #216]	; (289c <_vfiprintf_r+0x228>)
    27c4:	f001 f898 	bl	38f8 <memchr>
    27c8:	2800      	cmp	r0, #0
    27ca:	d007      	beq.n	27dc <_vfiprintf_r+0x168>
    27cc:	4b33      	ldr	r3, [pc, #204]	; (289c <_vfiprintf_r+0x228>)
    27ce:	682a      	ldr	r2, [r5, #0]
    27d0:	1ac0      	subs	r0, r0, r3
    27d2:	2340      	movs	r3, #64	; 0x40
    27d4:	4083      	lsls	r3, r0
    27d6:	4313      	orrs	r3, r2
    27d8:	602b      	str	r3, [r5, #0]
    27da:	3401      	adds	r4, #1
    27dc:	7821      	ldrb	r1, [r4, #0]
    27de:	1c63      	adds	r3, r4, #1
    27e0:	2206      	movs	r2, #6
    27e2:	482f      	ldr	r0, [pc, #188]	; (28a0 <_vfiprintf_r+0x22c>)
    27e4:	9302      	str	r3, [sp, #8]
    27e6:	7629      	strb	r1, [r5, #24]
    27e8:	f001 f886 	bl	38f8 <memchr>
    27ec:	2800      	cmp	r0, #0
    27ee:	d044      	beq.n	287a <_vfiprintf_r+0x206>
    27f0:	4b2c      	ldr	r3, [pc, #176]	; (28a4 <_vfiprintf_r+0x230>)
    27f2:	2b00      	cmp	r3, #0
    27f4:	d12f      	bne.n	2856 <_vfiprintf_r+0x1e2>
    27f6:	6829      	ldr	r1, [r5, #0]
    27f8:	9b05      	ldr	r3, [sp, #20]
    27fa:	2207      	movs	r2, #7
    27fc:	05c9      	lsls	r1, r1, #23
    27fe:	d528      	bpl.n	2852 <_vfiprintf_r+0x1de>
    2800:	189b      	adds	r3, r3, r2
    2802:	4393      	bics	r3, r2
    2804:	3308      	adds	r3, #8
    2806:	9305      	str	r3, [sp, #20]
    2808:	696b      	ldr	r3, [r5, #20]
    280a:	9a03      	ldr	r2, [sp, #12]
    280c:	189b      	adds	r3, r3, r2
    280e:	616b      	str	r3, [r5, #20]
    2810:	e74f      	b.n	26b2 <_vfiprintf_r+0x3e>
    2812:	425b      	negs	r3, r3
    2814:	60eb      	str	r3, [r5, #12]
    2816:	2302      	movs	r3, #2
    2818:	430b      	orrs	r3, r1
    281a:	602b      	str	r3, [r5, #0]
    281c:	e7bf      	b.n	279e <_vfiprintf_r+0x12a>
    281e:	434b      	muls	r3, r1
    2820:	3401      	adds	r4, #1
    2822:	189b      	adds	r3, r3, r2
    2824:	2001      	movs	r0, #1
    2826:	e789      	b.n	273c <_vfiprintf_r+0xc8>
    2828:	2301      	movs	r3, #1
    282a:	425b      	negs	r3, r3
    282c:	e7c6      	b.n	27bc <_vfiprintf_r+0x148>
    282e:	2300      	movs	r3, #0
    2830:	0014      	movs	r4, r2
    2832:	200a      	movs	r0, #10
    2834:	001a      	movs	r2, r3
    2836:	606b      	str	r3, [r5, #4]
    2838:	7821      	ldrb	r1, [r4, #0]
    283a:	3930      	subs	r1, #48	; 0x30
    283c:	2909      	cmp	r1, #9
    283e:	d903      	bls.n	2848 <_vfiprintf_r+0x1d4>
    2840:	2b00      	cmp	r3, #0
    2842:	d0bc      	beq.n	27be <_vfiprintf_r+0x14a>
    2844:	9207      	str	r2, [sp, #28]
    2846:	e7ba      	b.n	27be <_vfiprintf_r+0x14a>
    2848:	4342      	muls	r2, r0
    284a:	3401      	adds	r4, #1
    284c:	1852      	adds	r2, r2, r1
    284e:	2301      	movs	r3, #1
    2850:	e7f2      	b.n	2838 <_vfiprintf_r+0x1c4>
    2852:	3307      	adds	r3, #7
    2854:	e7d5      	b.n	2802 <_vfiprintf_r+0x18e>
    2856:	ab05      	add	r3, sp, #20
    2858:	9300      	str	r3, [sp, #0]
    285a:	003a      	movs	r2, r7
    285c:	4b12      	ldr	r3, [pc, #72]	; (28a8 <_vfiprintf_r+0x234>)
    285e:	0029      	movs	r1, r5
    2860:	0030      	movs	r0, r6
    2862:	e000      	b.n	2866 <_vfiprintf_r+0x1f2>
    2864:	bf00      	nop
    2866:	9003      	str	r0, [sp, #12]
    2868:	9b03      	ldr	r3, [sp, #12]
    286a:	3301      	adds	r3, #1
    286c:	d1cc      	bne.n	2808 <_vfiprintf_r+0x194>
    286e:	89bb      	ldrh	r3, [r7, #12]
    2870:	065b      	lsls	r3, r3, #25
    2872:	d500      	bpl.n	2876 <_vfiprintf_r+0x202>
    2874:	e77b      	b.n	276e <_vfiprintf_r+0xfa>
    2876:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2878:	e77b      	b.n	2772 <_vfiprintf_r+0xfe>
    287a:	ab05      	add	r3, sp, #20
    287c:	9300      	str	r3, [sp, #0]
    287e:	003a      	movs	r2, r7
    2880:	4b09      	ldr	r3, [pc, #36]	; (28a8 <_vfiprintf_r+0x234>)
    2882:	0029      	movs	r1, r5
    2884:	0030      	movs	r0, r6
    2886:	f000 f87f 	bl	2988 <_printf_i>
    288a:	e7ec      	b.n	2866 <_vfiprintf_r+0x1f2>
    288c:	00003b64 	.word	0x00003b64
    2890:	00003ba4 	.word	0x00003ba4
    2894:	00003b84 	.word	0x00003b84
    2898:	00003b44 	.word	0x00003b44
    289c:	00003baa 	.word	0x00003baa
    28a0:	00003bae 	.word	0x00003bae
    28a4:	00000000 	.word	0x00000000
    28a8:	0000264f 	.word	0x0000264f

000028ac <_printf_common>:
    28ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28ae:	0015      	movs	r5, r2
    28b0:	9301      	str	r3, [sp, #4]
    28b2:	688a      	ldr	r2, [r1, #8]
    28b4:	690b      	ldr	r3, [r1, #16]
    28b6:	9000      	str	r0, [sp, #0]
    28b8:	000c      	movs	r4, r1
    28ba:	4293      	cmp	r3, r2
    28bc:	da00      	bge.n	28c0 <_printf_common+0x14>
    28be:	0013      	movs	r3, r2
    28c0:	0022      	movs	r2, r4
    28c2:	602b      	str	r3, [r5, #0]
    28c4:	3243      	adds	r2, #67	; 0x43
    28c6:	7812      	ldrb	r2, [r2, #0]
    28c8:	2a00      	cmp	r2, #0
    28ca:	d001      	beq.n	28d0 <_printf_common+0x24>
    28cc:	3301      	adds	r3, #1
    28ce:	602b      	str	r3, [r5, #0]
    28d0:	6823      	ldr	r3, [r4, #0]
    28d2:	069b      	lsls	r3, r3, #26
    28d4:	d502      	bpl.n	28dc <_printf_common+0x30>
    28d6:	682b      	ldr	r3, [r5, #0]
    28d8:	3302      	adds	r3, #2
    28da:	602b      	str	r3, [r5, #0]
    28dc:	2706      	movs	r7, #6
    28de:	6823      	ldr	r3, [r4, #0]
    28e0:	401f      	ands	r7, r3
    28e2:	d027      	beq.n	2934 <_printf_common+0x88>
    28e4:	0023      	movs	r3, r4
    28e6:	3343      	adds	r3, #67	; 0x43
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	1e5a      	subs	r2, r3, #1
    28ec:	4193      	sbcs	r3, r2
    28ee:	6822      	ldr	r2, [r4, #0]
    28f0:	0692      	lsls	r2, r2, #26
    28f2:	d430      	bmi.n	2956 <_printf_common+0xaa>
    28f4:	0022      	movs	r2, r4
    28f6:	9901      	ldr	r1, [sp, #4]
    28f8:	3243      	adds	r2, #67	; 0x43
    28fa:	9800      	ldr	r0, [sp, #0]
    28fc:	9e08      	ldr	r6, [sp, #32]
    28fe:	47b0      	blx	r6
    2900:	1c43      	adds	r3, r0, #1
    2902:	d025      	beq.n	2950 <_printf_common+0xa4>
    2904:	2306      	movs	r3, #6
    2906:	6820      	ldr	r0, [r4, #0]
    2908:	682a      	ldr	r2, [r5, #0]
    290a:	68e1      	ldr	r1, [r4, #12]
    290c:	4003      	ands	r3, r0
    290e:	2500      	movs	r5, #0
    2910:	2b04      	cmp	r3, #4
    2912:	d103      	bne.n	291c <_printf_common+0x70>
    2914:	1a8d      	subs	r5, r1, r2
    2916:	43eb      	mvns	r3, r5
    2918:	17db      	asrs	r3, r3, #31
    291a:	401d      	ands	r5, r3
    291c:	68a3      	ldr	r3, [r4, #8]
    291e:	6922      	ldr	r2, [r4, #16]
    2920:	4293      	cmp	r3, r2
    2922:	dd01      	ble.n	2928 <_printf_common+0x7c>
    2924:	1a9b      	subs	r3, r3, r2
    2926:	18ed      	adds	r5, r5, r3
    2928:	2700      	movs	r7, #0
    292a:	42bd      	cmp	r5, r7
    292c:	d120      	bne.n	2970 <_printf_common+0xc4>
    292e:	2000      	movs	r0, #0
    2930:	e010      	b.n	2954 <_printf_common+0xa8>
    2932:	3701      	adds	r7, #1
    2934:	68e3      	ldr	r3, [r4, #12]
    2936:	682a      	ldr	r2, [r5, #0]
    2938:	1a9b      	subs	r3, r3, r2
    293a:	429f      	cmp	r7, r3
    293c:	dad2      	bge.n	28e4 <_printf_common+0x38>
    293e:	0022      	movs	r2, r4
    2940:	2301      	movs	r3, #1
    2942:	3219      	adds	r2, #25
    2944:	9901      	ldr	r1, [sp, #4]
    2946:	9800      	ldr	r0, [sp, #0]
    2948:	9e08      	ldr	r6, [sp, #32]
    294a:	47b0      	blx	r6
    294c:	1c43      	adds	r3, r0, #1
    294e:	d1f0      	bne.n	2932 <_printf_common+0x86>
    2950:	2001      	movs	r0, #1
    2952:	4240      	negs	r0, r0
    2954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2956:	2030      	movs	r0, #48	; 0x30
    2958:	18e1      	adds	r1, r4, r3
    295a:	3143      	adds	r1, #67	; 0x43
    295c:	7008      	strb	r0, [r1, #0]
    295e:	0021      	movs	r1, r4
    2960:	1c5a      	adds	r2, r3, #1
    2962:	3145      	adds	r1, #69	; 0x45
    2964:	7809      	ldrb	r1, [r1, #0]
    2966:	18a2      	adds	r2, r4, r2
    2968:	3243      	adds	r2, #67	; 0x43
    296a:	3302      	adds	r3, #2
    296c:	7011      	strb	r1, [r2, #0]
    296e:	e7c1      	b.n	28f4 <_printf_common+0x48>
    2970:	0022      	movs	r2, r4
    2972:	2301      	movs	r3, #1
    2974:	321a      	adds	r2, #26
    2976:	9901      	ldr	r1, [sp, #4]
    2978:	9800      	ldr	r0, [sp, #0]
    297a:	9e08      	ldr	r6, [sp, #32]
    297c:	47b0      	blx	r6
    297e:	1c43      	adds	r3, r0, #1
    2980:	d0e6      	beq.n	2950 <_printf_common+0xa4>
    2982:	3701      	adds	r7, #1
    2984:	e7d1      	b.n	292a <_printf_common+0x7e>
	...

00002988 <_printf_i>:
    2988:	b5f0      	push	{r4, r5, r6, r7, lr}
    298a:	b08b      	sub	sp, #44	; 0x2c
    298c:	9206      	str	r2, [sp, #24]
    298e:	000a      	movs	r2, r1
    2990:	3243      	adds	r2, #67	; 0x43
    2992:	9307      	str	r3, [sp, #28]
    2994:	9005      	str	r0, [sp, #20]
    2996:	9204      	str	r2, [sp, #16]
    2998:	7e0a      	ldrb	r2, [r1, #24]
    299a:	000c      	movs	r4, r1
    299c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    299e:	2a6e      	cmp	r2, #110	; 0x6e
    29a0:	d100      	bne.n	29a4 <_printf_i+0x1c>
    29a2:	e08f      	b.n	2ac4 <_printf_i+0x13c>
    29a4:	d817      	bhi.n	29d6 <_printf_i+0x4e>
    29a6:	2a63      	cmp	r2, #99	; 0x63
    29a8:	d02c      	beq.n	2a04 <_printf_i+0x7c>
    29aa:	d808      	bhi.n	29be <_printf_i+0x36>
    29ac:	2a00      	cmp	r2, #0
    29ae:	d100      	bne.n	29b2 <_printf_i+0x2a>
    29b0:	e099      	b.n	2ae6 <_printf_i+0x15e>
    29b2:	2a58      	cmp	r2, #88	; 0x58
    29b4:	d054      	beq.n	2a60 <_printf_i+0xd8>
    29b6:	0026      	movs	r6, r4
    29b8:	3642      	adds	r6, #66	; 0x42
    29ba:	7032      	strb	r2, [r6, #0]
    29bc:	e029      	b.n	2a12 <_printf_i+0x8a>
    29be:	2a64      	cmp	r2, #100	; 0x64
    29c0:	d001      	beq.n	29c6 <_printf_i+0x3e>
    29c2:	2a69      	cmp	r2, #105	; 0x69
    29c4:	d1f7      	bne.n	29b6 <_printf_i+0x2e>
    29c6:	6821      	ldr	r1, [r4, #0]
    29c8:	681a      	ldr	r2, [r3, #0]
    29ca:	0608      	lsls	r0, r1, #24
    29cc:	d523      	bpl.n	2a16 <_printf_i+0x8e>
    29ce:	1d11      	adds	r1, r2, #4
    29d0:	6019      	str	r1, [r3, #0]
    29d2:	6815      	ldr	r5, [r2, #0]
    29d4:	e025      	b.n	2a22 <_printf_i+0x9a>
    29d6:	2a73      	cmp	r2, #115	; 0x73
    29d8:	d100      	bne.n	29dc <_printf_i+0x54>
    29da:	e088      	b.n	2aee <_printf_i+0x166>
    29dc:	d808      	bhi.n	29f0 <_printf_i+0x68>
    29de:	2a6f      	cmp	r2, #111	; 0x6f
    29e0:	d029      	beq.n	2a36 <_printf_i+0xae>
    29e2:	2a70      	cmp	r2, #112	; 0x70
    29e4:	d1e7      	bne.n	29b6 <_printf_i+0x2e>
    29e6:	2220      	movs	r2, #32
    29e8:	6809      	ldr	r1, [r1, #0]
    29ea:	430a      	orrs	r2, r1
    29ec:	6022      	str	r2, [r4, #0]
    29ee:	e003      	b.n	29f8 <_printf_i+0x70>
    29f0:	2a75      	cmp	r2, #117	; 0x75
    29f2:	d020      	beq.n	2a36 <_printf_i+0xae>
    29f4:	2a78      	cmp	r2, #120	; 0x78
    29f6:	d1de      	bne.n	29b6 <_printf_i+0x2e>
    29f8:	0022      	movs	r2, r4
    29fa:	2178      	movs	r1, #120	; 0x78
    29fc:	3245      	adds	r2, #69	; 0x45
    29fe:	7011      	strb	r1, [r2, #0]
    2a00:	4a6c      	ldr	r2, [pc, #432]	; (2bb4 <_printf_i+0x22c>)
    2a02:	e030      	b.n	2a66 <_printf_i+0xde>
    2a04:	000e      	movs	r6, r1
    2a06:	681a      	ldr	r2, [r3, #0]
    2a08:	3642      	adds	r6, #66	; 0x42
    2a0a:	1d11      	adds	r1, r2, #4
    2a0c:	6019      	str	r1, [r3, #0]
    2a0e:	6813      	ldr	r3, [r2, #0]
    2a10:	7033      	strb	r3, [r6, #0]
    2a12:	2301      	movs	r3, #1
    2a14:	e079      	b.n	2b0a <_printf_i+0x182>
    2a16:	0649      	lsls	r1, r1, #25
    2a18:	d5d9      	bpl.n	29ce <_printf_i+0x46>
    2a1a:	1d11      	adds	r1, r2, #4
    2a1c:	6019      	str	r1, [r3, #0]
    2a1e:	2300      	movs	r3, #0
    2a20:	5ed5      	ldrsh	r5, [r2, r3]
    2a22:	2d00      	cmp	r5, #0
    2a24:	da03      	bge.n	2a2e <_printf_i+0xa6>
    2a26:	232d      	movs	r3, #45	; 0x2d
    2a28:	9a04      	ldr	r2, [sp, #16]
    2a2a:	426d      	negs	r5, r5
    2a2c:	7013      	strb	r3, [r2, #0]
    2a2e:	4b62      	ldr	r3, [pc, #392]	; (2bb8 <_printf_i+0x230>)
    2a30:	270a      	movs	r7, #10
    2a32:	9303      	str	r3, [sp, #12]
    2a34:	e02f      	b.n	2a96 <_printf_i+0x10e>
    2a36:	6820      	ldr	r0, [r4, #0]
    2a38:	6819      	ldr	r1, [r3, #0]
    2a3a:	0605      	lsls	r5, r0, #24
    2a3c:	d503      	bpl.n	2a46 <_printf_i+0xbe>
    2a3e:	1d08      	adds	r0, r1, #4
    2a40:	6018      	str	r0, [r3, #0]
    2a42:	680d      	ldr	r5, [r1, #0]
    2a44:	e005      	b.n	2a52 <_printf_i+0xca>
    2a46:	0640      	lsls	r0, r0, #25
    2a48:	d5f9      	bpl.n	2a3e <_printf_i+0xb6>
    2a4a:	680d      	ldr	r5, [r1, #0]
    2a4c:	1d08      	adds	r0, r1, #4
    2a4e:	6018      	str	r0, [r3, #0]
    2a50:	b2ad      	uxth	r5, r5
    2a52:	4b59      	ldr	r3, [pc, #356]	; (2bb8 <_printf_i+0x230>)
    2a54:	2708      	movs	r7, #8
    2a56:	9303      	str	r3, [sp, #12]
    2a58:	2a6f      	cmp	r2, #111	; 0x6f
    2a5a:	d018      	beq.n	2a8e <_printf_i+0x106>
    2a5c:	270a      	movs	r7, #10
    2a5e:	e016      	b.n	2a8e <_printf_i+0x106>
    2a60:	3145      	adds	r1, #69	; 0x45
    2a62:	700a      	strb	r2, [r1, #0]
    2a64:	4a54      	ldr	r2, [pc, #336]	; (2bb8 <_printf_i+0x230>)
    2a66:	9203      	str	r2, [sp, #12]
    2a68:	681a      	ldr	r2, [r3, #0]
    2a6a:	6821      	ldr	r1, [r4, #0]
    2a6c:	1d10      	adds	r0, r2, #4
    2a6e:	6018      	str	r0, [r3, #0]
    2a70:	6815      	ldr	r5, [r2, #0]
    2a72:	0608      	lsls	r0, r1, #24
    2a74:	d522      	bpl.n	2abc <_printf_i+0x134>
    2a76:	07cb      	lsls	r3, r1, #31
    2a78:	d502      	bpl.n	2a80 <_printf_i+0xf8>
    2a7a:	2320      	movs	r3, #32
    2a7c:	4319      	orrs	r1, r3
    2a7e:	6021      	str	r1, [r4, #0]
    2a80:	2710      	movs	r7, #16
    2a82:	2d00      	cmp	r5, #0
    2a84:	d103      	bne.n	2a8e <_printf_i+0x106>
    2a86:	2320      	movs	r3, #32
    2a88:	6822      	ldr	r2, [r4, #0]
    2a8a:	439a      	bics	r2, r3
    2a8c:	6022      	str	r2, [r4, #0]
    2a8e:	0023      	movs	r3, r4
    2a90:	2200      	movs	r2, #0
    2a92:	3343      	adds	r3, #67	; 0x43
    2a94:	701a      	strb	r2, [r3, #0]
    2a96:	6863      	ldr	r3, [r4, #4]
    2a98:	60a3      	str	r3, [r4, #8]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	db5c      	blt.n	2b58 <_printf_i+0x1d0>
    2a9e:	2204      	movs	r2, #4
    2aa0:	6821      	ldr	r1, [r4, #0]
    2aa2:	4391      	bics	r1, r2
    2aa4:	6021      	str	r1, [r4, #0]
    2aa6:	2d00      	cmp	r5, #0
    2aa8:	d158      	bne.n	2b5c <_printf_i+0x1d4>
    2aaa:	9e04      	ldr	r6, [sp, #16]
    2aac:	2b00      	cmp	r3, #0
    2aae:	d064      	beq.n	2b7a <_printf_i+0x1f2>
    2ab0:	0026      	movs	r6, r4
    2ab2:	9b03      	ldr	r3, [sp, #12]
    2ab4:	3642      	adds	r6, #66	; 0x42
    2ab6:	781b      	ldrb	r3, [r3, #0]
    2ab8:	7033      	strb	r3, [r6, #0]
    2aba:	e05e      	b.n	2b7a <_printf_i+0x1f2>
    2abc:	0648      	lsls	r0, r1, #25
    2abe:	d5da      	bpl.n	2a76 <_printf_i+0xee>
    2ac0:	b2ad      	uxth	r5, r5
    2ac2:	e7d8      	b.n	2a76 <_printf_i+0xee>
    2ac4:	6809      	ldr	r1, [r1, #0]
    2ac6:	681a      	ldr	r2, [r3, #0]
    2ac8:	0608      	lsls	r0, r1, #24
    2aca:	d505      	bpl.n	2ad8 <_printf_i+0x150>
    2acc:	1d11      	adds	r1, r2, #4
    2ace:	6019      	str	r1, [r3, #0]
    2ad0:	6813      	ldr	r3, [r2, #0]
    2ad2:	6962      	ldr	r2, [r4, #20]
    2ad4:	601a      	str	r2, [r3, #0]
    2ad6:	e006      	b.n	2ae6 <_printf_i+0x15e>
    2ad8:	0649      	lsls	r1, r1, #25
    2ada:	d5f7      	bpl.n	2acc <_printf_i+0x144>
    2adc:	1d11      	adds	r1, r2, #4
    2ade:	6019      	str	r1, [r3, #0]
    2ae0:	6813      	ldr	r3, [r2, #0]
    2ae2:	8aa2      	ldrh	r2, [r4, #20]
    2ae4:	801a      	strh	r2, [r3, #0]
    2ae6:	2300      	movs	r3, #0
    2ae8:	9e04      	ldr	r6, [sp, #16]
    2aea:	6123      	str	r3, [r4, #16]
    2aec:	e054      	b.n	2b98 <_printf_i+0x210>
    2aee:	681a      	ldr	r2, [r3, #0]
    2af0:	1d11      	adds	r1, r2, #4
    2af2:	6019      	str	r1, [r3, #0]
    2af4:	6816      	ldr	r6, [r2, #0]
    2af6:	2100      	movs	r1, #0
    2af8:	6862      	ldr	r2, [r4, #4]
    2afa:	0030      	movs	r0, r6
    2afc:	f000 fefc 	bl	38f8 <memchr>
    2b00:	2800      	cmp	r0, #0
    2b02:	d001      	beq.n	2b08 <_printf_i+0x180>
    2b04:	1b80      	subs	r0, r0, r6
    2b06:	6060      	str	r0, [r4, #4]
    2b08:	6863      	ldr	r3, [r4, #4]
    2b0a:	6123      	str	r3, [r4, #16]
    2b0c:	2300      	movs	r3, #0
    2b0e:	9a04      	ldr	r2, [sp, #16]
    2b10:	7013      	strb	r3, [r2, #0]
    2b12:	e041      	b.n	2b98 <_printf_i+0x210>
    2b14:	6923      	ldr	r3, [r4, #16]
    2b16:	0032      	movs	r2, r6
    2b18:	9906      	ldr	r1, [sp, #24]
    2b1a:	9805      	ldr	r0, [sp, #20]
    2b1c:	9d07      	ldr	r5, [sp, #28]
    2b1e:	47a8      	blx	r5
    2b20:	1c43      	adds	r3, r0, #1
    2b22:	d043      	beq.n	2bac <_printf_i+0x224>
    2b24:	6823      	ldr	r3, [r4, #0]
    2b26:	2500      	movs	r5, #0
    2b28:	079b      	lsls	r3, r3, #30
    2b2a:	d40f      	bmi.n	2b4c <_printf_i+0x1c4>
    2b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b2e:	68e0      	ldr	r0, [r4, #12]
    2b30:	4298      	cmp	r0, r3
    2b32:	da3d      	bge.n	2bb0 <_printf_i+0x228>
    2b34:	0018      	movs	r0, r3
    2b36:	e03b      	b.n	2bb0 <_printf_i+0x228>
    2b38:	0022      	movs	r2, r4
    2b3a:	2301      	movs	r3, #1
    2b3c:	3219      	adds	r2, #25
    2b3e:	9906      	ldr	r1, [sp, #24]
    2b40:	9805      	ldr	r0, [sp, #20]
    2b42:	9e07      	ldr	r6, [sp, #28]
    2b44:	47b0      	blx	r6
    2b46:	1c43      	adds	r3, r0, #1
    2b48:	d030      	beq.n	2bac <_printf_i+0x224>
    2b4a:	3501      	adds	r5, #1
    2b4c:	68e3      	ldr	r3, [r4, #12]
    2b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2b50:	1a9b      	subs	r3, r3, r2
    2b52:	429d      	cmp	r5, r3
    2b54:	dbf0      	blt.n	2b38 <_printf_i+0x1b0>
    2b56:	e7e9      	b.n	2b2c <_printf_i+0x1a4>
    2b58:	2d00      	cmp	r5, #0
    2b5a:	d0a9      	beq.n	2ab0 <_printf_i+0x128>
    2b5c:	9e04      	ldr	r6, [sp, #16]
    2b5e:	0028      	movs	r0, r5
    2b60:	0039      	movs	r1, r7
    2b62:	f7fe fe69 	bl	1838 <__aeabi_uidivmod>
    2b66:	9b03      	ldr	r3, [sp, #12]
    2b68:	3e01      	subs	r6, #1
    2b6a:	5c5b      	ldrb	r3, [r3, r1]
    2b6c:	0028      	movs	r0, r5
    2b6e:	7033      	strb	r3, [r6, #0]
    2b70:	0039      	movs	r1, r7
    2b72:	f7fe fddb 	bl	172c <__udivsi3>
    2b76:	1e05      	subs	r5, r0, #0
    2b78:	d1f1      	bne.n	2b5e <_printf_i+0x1d6>
    2b7a:	2f08      	cmp	r7, #8
    2b7c:	d109      	bne.n	2b92 <_printf_i+0x20a>
    2b7e:	6823      	ldr	r3, [r4, #0]
    2b80:	07db      	lsls	r3, r3, #31
    2b82:	d506      	bpl.n	2b92 <_printf_i+0x20a>
    2b84:	6863      	ldr	r3, [r4, #4]
    2b86:	6922      	ldr	r2, [r4, #16]
    2b88:	4293      	cmp	r3, r2
    2b8a:	dc02      	bgt.n	2b92 <_printf_i+0x20a>
    2b8c:	2330      	movs	r3, #48	; 0x30
    2b8e:	3e01      	subs	r6, #1
    2b90:	7033      	strb	r3, [r6, #0]
    2b92:	9b04      	ldr	r3, [sp, #16]
    2b94:	1b9b      	subs	r3, r3, r6
    2b96:	6123      	str	r3, [r4, #16]
    2b98:	9b07      	ldr	r3, [sp, #28]
    2b9a:	aa09      	add	r2, sp, #36	; 0x24
    2b9c:	9300      	str	r3, [sp, #0]
    2b9e:	0021      	movs	r1, r4
    2ba0:	9b06      	ldr	r3, [sp, #24]
    2ba2:	9805      	ldr	r0, [sp, #20]
    2ba4:	f7ff fe82 	bl	28ac <_printf_common>
    2ba8:	1c43      	adds	r3, r0, #1
    2baa:	d1b3      	bne.n	2b14 <_printf_i+0x18c>
    2bac:	2001      	movs	r0, #1
    2bae:	4240      	negs	r0, r0
    2bb0:	b00b      	add	sp, #44	; 0x2c
    2bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bb4:	00003bc6 	.word	0x00003bc6
    2bb8:	00003bb5 	.word	0x00003bb5

00002bbc <__svfiscanf_r>:
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bbe:	4cbd      	ldr	r4, [pc, #756]	; (2eb4 <__svfiscanf_r+0x2f8>)
    2bc0:	2586      	movs	r5, #134	; 0x86
    2bc2:	44a5      	add	sp, r4
    2bc4:	9303      	str	r3, [sp, #12]
    2bc6:	2300      	movs	r3, #0
    2bc8:	9348      	str	r3, [sp, #288]	; 0x120
    2bca:	9349      	str	r3, [sp, #292]	; 0x124
    2bcc:	ab05      	add	r3, sp, #20
    2bce:	934a      	str	r3, [sp, #296]	; 0x128
    2bd0:	23be      	movs	r3, #190	; 0xbe
    2bd2:	006d      	lsls	r5, r5, #1
    2bd4:	9000      	str	r0, [sp, #0]
    2bd6:	000c      	movs	r4, r1
    2bd8:	a802      	add	r0, sp, #8
    2bda:	49b7      	ldr	r1, [pc, #732]	; (2eb8 <__svfiscanf_r+0x2fc>)
    2bdc:	005b      	lsls	r3, r3, #1
    2bde:	1940      	adds	r0, r0, r5
    2be0:	27c0      	movs	r7, #192	; 0xc0
    2be2:	50c1      	str	r1, [r0, r3]
    2be4:	ab02      	add	r3, sp, #8
    2be6:	195b      	adds	r3, r3, r5
    2be8:	0015      	movs	r5, r2
    2bea:	49b4      	ldr	r1, [pc, #720]	; (2ebc <__svfiscanf_r+0x300>)
    2bec:	007f      	lsls	r7, r7, #1
    2bee:	51d9      	str	r1, [r3, r7]
    2bf0:	782b      	ldrb	r3, [r5, #0]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d100      	bne.n	2bf8 <__svfiscanf_r+0x3c>
    2bf6:	e15b      	b.n	2eb0 <__svfiscanf_r+0x2f4>
    2bf8:	f000 fe4a 	bl	3890 <__locale_ctype_ptr>
    2bfc:	2208      	movs	r2, #8
    2bfe:	782b      	ldrb	r3, [r5, #0]
    2c00:	18c0      	adds	r0, r0, r3
    2c02:	9301      	str	r3, [sp, #4]
    2c04:	7843      	ldrb	r3, [r0, #1]
    2c06:	4013      	ands	r3, r2
    2c08:	d141      	bne.n	2c8e <__svfiscanf_r+0xd2>
    2c0a:	9a01      	ldr	r2, [sp, #4]
    2c0c:	1c6e      	adds	r6, r5, #1
    2c0e:	2a25      	cmp	r2, #37	; 0x25
    2c10:	d000      	beq.n	2c14 <__svfiscanf_r+0x58>
    2c12:	e0a8      	b.n	2d66 <__svfiscanf_r+0x1aa>
    2c14:	9347      	str	r3, [sp, #284]	; 0x11c
    2c16:	9345      	str	r3, [sp, #276]	; 0x114
    2c18:	786b      	ldrb	r3, [r5, #1]
    2c1a:	2b2a      	cmp	r3, #42	; 0x2a
    2c1c:	d102      	bne.n	2c24 <__svfiscanf_r+0x68>
    2c1e:	3b1a      	subs	r3, #26
    2c20:	9345      	str	r3, [sp, #276]	; 0x114
    2c22:	1cae      	adds	r6, r5, #2
    2c24:	0035      	movs	r5, r6
    2c26:	220a      	movs	r2, #10
    2c28:	7829      	ldrb	r1, [r5, #0]
    2c2a:	000b      	movs	r3, r1
    2c2c:	3b30      	subs	r3, #48	; 0x30
    2c2e:	2b09      	cmp	r3, #9
    2c30:	d948      	bls.n	2cc4 <__svfiscanf_r+0x108>
    2c32:	4ea3      	ldr	r6, [pc, #652]	; (2ec0 <__svfiscanf_r+0x304>)
    2c34:	2203      	movs	r2, #3
    2c36:	0030      	movs	r0, r6
    2c38:	f000 fe5e 	bl	38f8 <memchr>
    2c3c:	2800      	cmp	r0, #0
    2c3e:	d007      	beq.n	2c50 <__svfiscanf_r+0x94>
    2c40:	2301      	movs	r3, #1
    2c42:	1b80      	subs	r0, r0, r6
    2c44:	4083      	lsls	r3, r0
    2c46:	9a45      	ldr	r2, [sp, #276]	; 0x114
    2c48:	3501      	adds	r5, #1
    2c4a:	4313      	orrs	r3, r2
    2c4c:	9202      	str	r2, [sp, #8]
    2c4e:	9345      	str	r3, [sp, #276]	; 0x114
    2c50:	782b      	ldrb	r3, [r5, #0]
    2c52:	1c6e      	adds	r6, r5, #1
    2c54:	2b67      	cmp	r3, #103	; 0x67
    2c56:	d858      	bhi.n	2d0a <__svfiscanf_r+0x14e>
    2c58:	2b65      	cmp	r3, #101	; 0x65
    2c5a:	d300      	bcc.n	2c5e <__svfiscanf_r+0xa2>
    2c5c:	e0dd      	b.n	2e1a <__svfiscanf_r+0x25e>
    2c5e:	2b47      	cmp	r3, #71	; 0x47
    2c60:	d838      	bhi.n	2cd4 <__svfiscanf_r+0x118>
    2c62:	2b45      	cmp	r3, #69	; 0x45
    2c64:	d300      	bcc.n	2c68 <__svfiscanf_r+0xac>
    2c66:	e0d8      	b.n	2e1a <__svfiscanf_r+0x25e>
    2c68:	2b00      	cmp	r3, #0
    2c6a:	d100      	bne.n	2c6e <__svfiscanf_r+0xb2>
    2c6c:	e11d      	b.n	2eaa <__svfiscanf_r+0x2ee>
    2c6e:	2b25      	cmp	r3, #37	; 0x25
    2c70:	d079      	beq.n	2d66 <__svfiscanf_r+0x1aa>
    2c72:	2303      	movs	r3, #3
    2c74:	934b      	str	r3, [sp, #300]	; 0x12c
    2c76:	3307      	adds	r3, #7
    2c78:	9346      	str	r3, [sp, #280]	; 0x118
    2c7a:	e053      	b.n	2d24 <__svfiscanf_r+0x168>
    2c7c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2c7e:	3301      	adds	r3, #1
    2c80:	9201      	str	r2, [sp, #4]
    2c82:	3201      	adds	r2, #1
    2c84:	9249      	str	r2, [sp, #292]	; 0x124
    2c86:	6862      	ldr	r2, [r4, #4]
    2c88:	6023      	str	r3, [r4, #0]
    2c8a:	3a01      	subs	r2, #1
    2c8c:	6062      	str	r2, [r4, #4]
    2c8e:	6863      	ldr	r3, [r4, #4]
    2c90:	2b00      	cmp	r3, #0
    2c92:	dd0b      	ble.n	2cac <__svfiscanf_r+0xf0>
    2c94:	f000 fdfc 	bl	3890 <__locale_ctype_ptr>
    2c98:	2108      	movs	r1, #8
    2c9a:	6823      	ldr	r3, [r4, #0]
    2c9c:	781a      	ldrb	r2, [r3, #0]
    2c9e:	1880      	adds	r0, r0, r2
    2ca0:	7842      	ldrb	r2, [r0, #1]
    2ca2:	420a      	tst	r2, r1
    2ca4:	d1ea      	bne.n	2c7c <__svfiscanf_r+0xc0>
    2ca6:	1c6e      	adds	r6, r5, #1
    2ca8:	0035      	movs	r5, r6
    2caa:	e7a1      	b.n	2bf0 <__svfiscanf_r+0x34>
    2cac:	2286      	movs	r2, #134	; 0x86
    2cae:	ab02      	add	r3, sp, #8
    2cb0:	0052      	lsls	r2, r2, #1
    2cb2:	189b      	adds	r3, r3, r2
    2cb4:	59db      	ldr	r3, [r3, r7]
    2cb6:	0021      	movs	r1, r4
    2cb8:	9800      	ldr	r0, [sp, #0]
    2cba:	9301      	str	r3, [sp, #4]
    2cbc:	4798      	blx	r3
    2cbe:	2800      	cmp	r0, #0
    2cc0:	d0e8      	beq.n	2c94 <__svfiscanf_r+0xd8>
    2cc2:	e7f0      	b.n	2ca6 <__svfiscanf_r+0xea>
    2cc4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    2cc6:	3501      	adds	r5, #1
    2cc8:	9302      	str	r3, [sp, #8]
    2cca:	4353      	muls	r3, r2
    2ccc:	3b30      	subs	r3, #48	; 0x30
    2cce:	1859      	adds	r1, r3, r1
    2cd0:	9147      	str	r1, [sp, #284]	; 0x11c
    2cd2:	e7a9      	b.n	2c28 <__svfiscanf_r+0x6c>
    2cd4:	2b5b      	cmp	r3, #91	; 0x5b
    2cd6:	d100      	bne.n	2cda <__svfiscanf_r+0x11e>
    2cd8:	e077      	b.n	2dca <__svfiscanf_r+0x20e>
    2cda:	d80f      	bhi.n	2cfc <__svfiscanf_r+0x140>
    2cdc:	2b58      	cmp	r3, #88	; 0x58
    2cde:	d1c8      	bne.n	2c72 <__svfiscanf_r+0xb6>
    2ce0:	9a45      	ldr	r2, [sp, #276]	; 0x114
    2ce2:	9201      	str	r2, [sp, #4]
    2ce4:	2280      	movs	r2, #128	; 0x80
    2ce6:	9901      	ldr	r1, [sp, #4]
    2ce8:	0092      	lsls	r2, r2, #2
    2cea:	430a      	orrs	r2, r1
    2cec:	9245      	str	r2, [sp, #276]	; 0x114
    2cee:	2210      	movs	r2, #16
    2cf0:	9246      	str	r2, [sp, #280]	; 0x118
    2cf2:	2203      	movs	r2, #3
    2cf4:	2b6e      	cmp	r3, #110	; 0x6e
    2cf6:	dd14      	ble.n	2d22 <__svfiscanf_r+0x166>
    2cf8:	3201      	adds	r2, #1
    2cfa:	e012      	b.n	2d22 <__svfiscanf_r+0x166>
    2cfc:	2b63      	cmp	r3, #99	; 0x63
    2cfe:	d100      	bne.n	2d02 <__svfiscanf_r+0x146>
    2d00:	e071      	b.n	2de6 <__svfiscanf_r+0x22a>
    2d02:	2b64      	cmp	r3, #100	; 0x64
    2d04:	d1b5      	bne.n	2c72 <__svfiscanf_r+0xb6>
    2d06:	220a      	movs	r2, #10
    2d08:	e7f2      	b.n	2cf0 <__svfiscanf_r+0x134>
    2d0a:	2b70      	cmp	r3, #112	; 0x70
    2d0c:	d052      	beq.n	2db4 <__svfiscanf_r+0x1f8>
    2d0e:	d822      	bhi.n	2d56 <__svfiscanf_r+0x19a>
    2d10:	2b6e      	cmp	r3, #110	; 0x6e
    2d12:	d100      	bne.n	2d16 <__svfiscanf_r+0x15a>
    2d14:	e06f      	b.n	2df6 <__svfiscanf_r+0x23a>
    2d16:	d854      	bhi.n	2dc2 <__svfiscanf_r+0x206>
    2d18:	2b69      	cmp	r3, #105	; 0x69
    2d1a:	d1aa      	bne.n	2c72 <__svfiscanf_r+0xb6>
    2d1c:	2300      	movs	r3, #0
    2d1e:	2203      	movs	r2, #3
    2d20:	9346      	str	r3, [sp, #280]	; 0x118
    2d22:	924b      	str	r2, [sp, #300]	; 0x12c
    2d24:	6863      	ldr	r3, [r4, #4]
    2d26:	2b00      	cmp	r3, #0
    2d28:	dc00      	bgt.n	2d2c <__svfiscanf_r+0x170>
    2d2a:	e078      	b.n	2e1e <__svfiscanf_r+0x262>
    2d2c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2d2e:	9301      	str	r3, [sp, #4]
    2d30:	065b      	lsls	r3, r3, #25
    2d32:	d400      	bmi.n	2d36 <__svfiscanf_r+0x17a>
    2d34:	e08b      	b.n	2e4e <__svfiscanf_r+0x292>
    2d36:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    2d38:	2b02      	cmp	r3, #2
    2d3a:	dd00      	ble.n	2d3e <__svfiscanf_r+0x182>
    2d3c:	e09d      	b.n	2e7a <__svfiscanf_r+0x2be>
    2d3e:	ab03      	add	r3, sp, #12
    2d40:	0022      	movs	r2, r4
    2d42:	a945      	add	r1, sp, #276	; 0x114
    2d44:	9800      	ldr	r0, [sp, #0]
    2d46:	f000 f8e7 	bl	2f18 <_scanf_chars>
    2d4a:	2801      	cmp	r0, #1
    2d4c:	d100      	bne.n	2d50 <__svfiscanf_r+0x194>
    2d4e:	e0af      	b.n	2eb0 <__svfiscanf_r+0x2f4>
    2d50:	2802      	cmp	r0, #2
    2d52:	d1a9      	bne.n	2ca8 <__svfiscanf_r+0xec>
    2d54:	e025      	b.n	2da2 <__svfiscanf_r+0x1e6>
    2d56:	2b75      	cmp	r3, #117	; 0x75
    2d58:	d0d5      	beq.n	2d06 <__svfiscanf_r+0x14a>
    2d5a:	2b78      	cmp	r3, #120	; 0x78
    2d5c:	d0c0      	beq.n	2ce0 <__svfiscanf_r+0x124>
    2d5e:	2b73      	cmp	r3, #115	; 0x73
    2d60:	d187      	bne.n	2c72 <__svfiscanf_r+0xb6>
    2d62:	2302      	movs	r3, #2
    2d64:	e03d      	b.n	2de2 <__svfiscanf_r+0x226>
    2d66:	6863      	ldr	r3, [r4, #4]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	dd0f      	ble.n	2d8c <__svfiscanf_r+0x1d0>
    2d6c:	6823      	ldr	r3, [r4, #0]
    2d6e:	9901      	ldr	r1, [sp, #4]
    2d70:	781a      	ldrb	r2, [r3, #0]
    2d72:	4291      	cmp	r1, r2
    2d74:	d000      	beq.n	2d78 <__svfiscanf_r+0x1bc>
    2d76:	e09b      	b.n	2eb0 <__svfiscanf_r+0x2f4>
    2d78:	3301      	adds	r3, #1
    2d7a:	6862      	ldr	r2, [r4, #4]
    2d7c:	6023      	str	r3, [r4, #0]
    2d7e:	9b49      	ldr	r3, [sp, #292]	; 0x124
    2d80:	3a01      	subs	r2, #1
    2d82:	9301      	str	r3, [sp, #4]
    2d84:	3301      	adds	r3, #1
    2d86:	6062      	str	r2, [r4, #4]
    2d88:	9349      	str	r3, [sp, #292]	; 0x124
    2d8a:	e78d      	b.n	2ca8 <__svfiscanf_r+0xec>
    2d8c:	2286      	movs	r2, #134	; 0x86
    2d8e:	ab02      	add	r3, sp, #8
    2d90:	0052      	lsls	r2, r2, #1
    2d92:	189b      	adds	r3, r3, r2
    2d94:	59db      	ldr	r3, [r3, r7]
    2d96:	0021      	movs	r1, r4
    2d98:	9800      	ldr	r0, [sp, #0]
    2d9a:	9302      	str	r3, [sp, #8]
    2d9c:	4798      	blx	r3
    2d9e:	2800      	cmp	r0, #0
    2da0:	d0e4      	beq.n	2d6c <__svfiscanf_r+0x1b0>
    2da2:	9848      	ldr	r0, [sp, #288]	; 0x120
    2da4:	2800      	cmp	r0, #0
    2da6:	d000      	beq.n	2daa <__svfiscanf_r+0x1ee>
    2da8:	e07b      	b.n	2ea2 <__svfiscanf_r+0x2e6>
    2daa:	3801      	subs	r0, #1
    2dac:	23a7      	movs	r3, #167	; 0xa7
    2dae:	009b      	lsls	r3, r3, #2
    2db0:	449d      	add	sp, r3
    2db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2db4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    2db6:	9201      	str	r2, [sp, #4]
    2db8:	2220      	movs	r2, #32
    2dba:	9901      	ldr	r1, [sp, #4]
    2dbc:	430a      	orrs	r2, r1
    2dbe:	9245      	str	r2, [sp, #276]	; 0x114
    2dc0:	e78e      	b.n	2ce0 <__svfiscanf_r+0x124>
    2dc2:	2308      	movs	r3, #8
    2dc4:	2204      	movs	r2, #4
    2dc6:	9346      	str	r3, [sp, #280]	; 0x118
    2dc8:	e7ab      	b.n	2d22 <__svfiscanf_r+0x166>
    2dca:	0031      	movs	r1, r6
    2dcc:	a805      	add	r0, sp, #20
    2dce:	f000 fab5 	bl	333c <__sccl>
    2dd2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2dd4:	0006      	movs	r6, r0
    2dd6:	9301      	str	r3, [sp, #4]
    2dd8:	2340      	movs	r3, #64	; 0x40
    2dda:	9a01      	ldr	r2, [sp, #4]
    2ddc:	4313      	orrs	r3, r2
    2dde:	9345      	str	r3, [sp, #276]	; 0x114
    2de0:	2301      	movs	r3, #1
    2de2:	934b      	str	r3, [sp, #300]	; 0x12c
    2de4:	e79e      	b.n	2d24 <__svfiscanf_r+0x168>
    2de6:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2de8:	9301      	str	r3, [sp, #4]
    2dea:	2340      	movs	r3, #64	; 0x40
    2dec:	9a01      	ldr	r2, [sp, #4]
    2dee:	4313      	orrs	r3, r2
    2df0:	9345      	str	r3, [sp, #276]	; 0x114
    2df2:	2300      	movs	r3, #0
    2df4:	e7f5      	b.n	2de2 <__svfiscanf_r+0x226>
    2df6:	9945      	ldr	r1, [sp, #276]	; 0x114
    2df8:	06cb      	lsls	r3, r1, #27
    2dfa:	d500      	bpl.n	2dfe <__svfiscanf_r+0x242>
    2dfc:	e754      	b.n	2ca8 <__svfiscanf_r+0xec>
    2dfe:	9b03      	ldr	r3, [sp, #12]
    2e00:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2e02:	07c8      	lsls	r0, r1, #31
    2e04:	d504      	bpl.n	2e10 <__svfiscanf_r+0x254>
    2e06:	1d19      	adds	r1, r3, #4
    2e08:	9103      	str	r1, [sp, #12]
    2e0a:	681b      	ldr	r3, [r3, #0]
    2e0c:	801a      	strh	r2, [r3, #0]
    2e0e:	e74b      	b.n	2ca8 <__svfiscanf_r+0xec>
    2e10:	1d19      	adds	r1, r3, #4
    2e12:	9103      	str	r1, [sp, #12]
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	601a      	str	r2, [r3, #0]
    2e18:	e746      	b.n	2ca8 <__svfiscanf_r+0xec>
    2e1a:	2305      	movs	r3, #5
    2e1c:	e7e1      	b.n	2de2 <__svfiscanf_r+0x226>
    2e1e:	2286      	movs	r2, #134	; 0x86
    2e20:	ab02      	add	r3, sp, #8
    2e22:	0052      	lsls	r2, r2, #1
    2e24:	189b      	adds	r3, r3, r2
    2e26:	59db      	ldr	r3, [r3, r7]
    2e28:	0021      	movs	r1, r4
    2e2a:	9800      	ldr	r0, [sp, #0]
    2e2c:	9301      	str	r3, [sp, #4]
    2e2e:	4798      	blx	r3
    2e30:	2800      	cmp	r0, #0
    2e32:	d100      	bne.n	2e36 <__svfiscanf_r+0x27a>
    2e34:	e77a      	b.n	2d2c <__svfiscanf_r+0x170>
    2e36:	e7b4      	b.n	2da2 <__svfiscanf_r+0x1e6>
    2e38:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2e3a:	9201      	str	r2, [sp, #4]
    2e3c:	3201      	adds	r2, #1
    2e3e:	9249      	str	r2, [sp, #292]	; 0x124
    2e40:	6862      	ldr	r2, [r4, #4]
    2e42:	3a01      	subs	r2, #1
    2e44:	6062      	str	r2, [r4, #4]
    2e46:	2a00      	cmp	r2, #0
    2e48:	dd0b      	ble.n	2e62 <__svfiscanf_r+0x2a6>
    2e4a:	3301      	adds	r3, #1
    2e4c:	6023      	str	r3, [r4, #0]
    2e4e:	f000 fd1f 	bl	3890 <__locale_ctype_ptr>
    2e52:	2108      	movs	r1, #8
    2e54:	6823      	ldr	r3, [r4, #0]
    2e56:	781a      	ldrb	r2, [r3, #0]
    2e58:	1880      	adds	r0, r0, r2
    2e5a:	7842      	ldrb	r2, [r0, #1]
    2e5c:	420a      	tst	r2, r1
    2e5e:	d1eb      	bne.n	2e38 <__svfiscanf_r+0x27c>
    2e60:	e769      	b.n	2d36 <__svfiscanf_r+0x17a>
    2e62:	2286      	movs	r2, #134	; 0x86
    2e64:	ab02      	add	r3, sp, #8
    2e66:	0052      	lsls	r2, r2, #1
    2e68:	189b      	adds	r3, r3, r2
    2e6a:	59db      	ldr	r3, [r3, r7]
    2e6c:	0021      	movs	r1, r4
    2e6e:	9800      	ldr	r0, [sp, #0]
    2e70:	9301      	str	r3, [sp, #4]
    2e72:	4798      	blx	r3
    2e74:	2800      	cmp	r0, #0
    2e76:	d0ea      	beq.n	2e4e <__svfiscanf_r+0x292>
    2e78:	e793      	b.n	2da2 <__svfiscanf_r+0x1e6>
    2e7a:	2b04      	cmp	r3, #4
    2e7c:	dc06      	bgt.n	2e8c <__svfiscanf_r+0x2d0>
    2e7e:	ab03      	add	r3, sp, #12
    2e80:	0022      	movs	r2, r4
    2e82:	a945      	add	r1, sp, #276	; 0x114
    2e84:	9800      	ldr	r0, [sp, #0]
    2e86:	f000 f8ab 	bl	2fe0 <_scanf_i>
    2e8a:	e75e      	b.n	2d4a <__svfiscanf_r+0x18e>
    2e8c:	4b0d      	ldr	r3, [pc, #52]	; (2ec4 <__svfiscanf_r+0x308>)
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d100      	bne.n	2e94 <__svfiscanf_r+0x2d8>
    2e92:	e709      	b.n	2ca8 <__svfiscanf_r+0xec>
    2e94:	ab03      	add	r3, sp, #12
    2e96:	0022      	movs	r2, r4
    2e98:	a945      	add	r1, sp, #276	; 0x114
    2e9a:	9800      	ldr	r0, [sp, #0]
    2e9c:	e000      	b.n	2ea0 <__svfiscanf_r+0x2e4>
    2e9e:	bf00      	nop
    2ea0:	e753      	b.n	2d4a <__svfiscanf_r+0x18e>
    2ea2:	89a3      	ldrh	r3, [r4, #12]
    2ea4:	065b      	lsls	r3, r3, #25
    2ea6:	d400      	bmi.n	2eaa <__svfiscanf_r+0x2ee>
    2ea8:	e780      	b.n	2dac <__svfiscanf_r+0x1f0>
    2eaa:	2001      	movs	r0, #1
    2eac:	4240      	negs	r0, r0
    2eae:	e77d      	b.n	2dac <__svfiscanf_r+0x1f0>
    2eb0:	9848      	ldr	r0, [sp, #288]	; 0x120
    2eb2:	e77b      	b.n	2dac <__svfiscanf_r+0x1f0>
    2eb4:	fffffd64 	.word	0xfffffd64
    2eb8:	00003711 	.word	0x00003711
    2ebc:	000031f9 	.word	0x000031f9
    2ec0:	00003baa 	.word	0x00003baa
    2ec4:	00000000 	.word	0x00000000

00002ec8 <_vfiscanf_r>:
    2ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eca:	0004      	movs	r4, r0
    2ecc:	000d      	movs	r5, r1
    2ece:	0016      	movs	r6, r2
    2ed0:	001f      	movs	r7, r3
    2ed2:	2800      	cmp	r0, #0
    2ed4:	d004      	beq.n	2ee0 <_vfiscanf_r+0x18>
    2ed6:	6983      	ldr	r3, [r0, #24]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d101      	bne.n	2ee0 <_vfiscanf_r+0x18>
    2edc:	f7ff f86c 	bl	1fb8 <__sinit>
    2ee0:	4b0a      	ldr	r3, [pc, #40]	; (2f0c <_vfiscanf_r+0x44>)
    2ee2:	429d      	cmp	r5, r3
    2ee4:	d107      	bne.n	2ef6 <_vfiscanf_r+0x2e>
    2ee6:	6865      	ldr	r5, [r4, #4]
    2ee8:	003b      	movs	r3, r7
    2eea:	0032      	movs	r2, r6
    2eec:	0029      	movs	r1, r5
    2eee:	0020      	movs	r0, r4
    2ef0:	f7ff fe64 	bl	2bbc <__svfiscanf_r>
    2ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ef6:	4b06      	ldr	r3, [pc, #24]	; (2f10 <_vfiscanf_r+0x48>)
    2ef8:	429d      	cmp	r5, r3
    2efa:	d101      	bne.n	2f00 <_vfiscanf_r+0x38>
    2efc:	68a5      	ldr	r5, [r4, #8]
    2efe:	e7f3      	b.n	2ee8 <_vfiscanf_r+0x20>
    2f00:	4b04      	ldr	r3, [pc, #16]	; (2f14 <_vfiscanf_r+0x4c>)
    2f02:	429d      	cmp	r5, r3
    2f04:	d1f0      	bne.n	2ee8 <_vfiscanf_r+0x20>
    2f06:	68e5      	ldr	r5, [r4, #12]
    2f08:	e7ee      	b.n	2ee8 <_vfiscanf_r+0x20>
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	00003b64 	.word	0x00003b64
    2f10:	00003b84 	.word	0x00003b84
    2f14:	00003b44 	.word	0x00003b44

00002f18 <_scanf_chars>:
    2f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f1a:	0015      	movs	r5, r2
    2f1c:	688a      	ldr	r2, [r1, #8]
    2f1e:	9001      	str	r0, [sp, #4]
    2f20:	000c      	movs	r4, r1
    2f22:	2a00      	cmp	r2, #0
    2f24:	d106      	bne.n	2f34 <_scanf_chars+0x1c>
    2f26:	698a      	ldr	r2, [r1, #24]
    2f28:	1e51      	subs	r1, r2, #1
    2f2a:	418a      	sbcs	r2, r1
    2f2c:	2101      	movs	r1, #1
    2f2e:	4252      	negs	r2, r2
    2f30:	430a      	orrs	r2, r1
    2f32:	60a2      	str	r2, [r4, #8]
    2f34:	6822      	ldr	r2, [r4, #0]
    2f36:	06d2      	lsls	r2, r2, #27
    2f38:	d403      	bmi.n	2f42 <_scanf_chars+0x2a>
    2f3a:	681a      	ldr	r2, [r3, #0]
    2f3c:	1d11      	adds	r1, r2, #4
    2f3e:	6019      	str	r1, [r3, #0]
    2f40:	6817      	ldr	r7, [r2, #0]
    2f42:	2600      	movs	r6, #0
    2f44:	69a3      	ldr	r3, [r4, #24]
    2f46:	2b00      	cmp	r3, #0
    2f48:	d01c      	beq.n	2f84 <_scanf_chars+0x6c>
    2f4a:	2b01      	cmp	r3, #1
    2f4c:	d108      	bne.n	2f60 <_scanf_chars+0x48>
    2f4e:	682b      	ldr	r3, [r5, #0]
    2f50:	6962      	ldr	r2, [r4, #20]
    2f52:	781b      	ldrb	r3, [r3, #0]
    2f54:	5cd3      	ldrb	r3, [r2, r3]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d114      	bne.n	2f84 <_scanf_chars+0x6c>
    2f5a:	2e00      	cmp	r6, #0
    2f5c:	d130      	bne.n	2fc0 <_scanf_chars+0xa8>
    2f5e:	e006      	b.n	2f6e <_scanf_chars+0x56>
    2f60:	2b02      	cmp	r3, #2
    2f62:	d006      	beq.n	2f72 <_scanf_chars+0x5a>
    2f64:	2e00      	cmp	r6, #0
    2f66:	d12b      	bne.n	2fc0 <_scanf_chars+0xa8>
    2f68:	69a3      	ldr	r3, [r4, #24]
    2f6a:	2b01      	cmp	r3, #1
    2f6c:	d128      	bne.n	2fc0 <_scanf_chars+0xa8>
    2f6e:	2001      	movs	r0, #1
    2f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2f72:	f000 fc8d 	bl	3890 <__locale_ctype_ptr>
    2f76:	2208      	movs	r2, #8
    2f78:	682b      	ldr	r3, [r5, #0]
    2f7a:	781b      	ldrb	r3, [r3, #0]
    2f7c:	18c0      	adds	r0, r0, r3
    2f7e:	7843      	ldrb	r3, [r0, #1]
    2f80:	4213      	tst	r3, r2
    2f82:	d1ef      	bne.n	2f64 <_scanf_chars+0x4c>
    2f84:	2210      	movs	r2, #16
    2f86:	6823      	ldr	r3, [r4, #0]
    2f88:	3601      	adds	r6, #1
    2f8a:	4213      	tst	r3, r2
    2f8c:	d103      	bne.n	2f96 <_scanf_chars+0x7e>
    2f8e:	682b      	ldr	r3, [r5, #0]
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	703b      	strb	r3, [r7, #0]
    2f94:	3701      	adds	r7, #1
    2f96:	682a      	ldr	r2, [r5, #0]
    2f98:	686b      	ldr	r3, [r5, #4]
    2f9a:	3201      	adds	r2, #1
    2f9c:	602a      	str	r2, [r5, #0]
    2f9e:	68a2      	ldr	r2, [r4, #8]
    2fa0:	3b01      	subs	r3, #1
    2fa2:	3a01      	subs	r2, #1
    2fa4:	606b      	str	r3, [r5, #4]
    2fa6:	60a2      	str	r2, [r4, #8]
    2fa8:	2a00      	cmp	r2, #0
    2faa:	d009      	beq.n	2fc0 <_scanf_chars+0xa8>
    2fac:	2b00      	cmp	r3, #0
    2fae:	dcc9      	bgt.n	2f44 <_scanf_chars+0x2c>
    2fb0:	23c0      	movs	r3, #192	; 0xc0
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	58e3      	ldr	r3, [r4, r3]
    2fb6:	0029      	movs	r1, r5
    2fb8:	9801      	ldr	r0, [sp, #4]
    2fba:	4798      	blx	r3
    2fbc:	2800      	cmp	r0, #0
    2fbe:	d0c1      	beq.n	2f44 <_scanf_chars+0x2c>
    2fc0:	2310      	movs	r3, #16
    2fc2:	6822      	ldr	r2, [r4, #0]
    2fc4:	4013      	ands	r3, r2
    2fc6:	d106      	bne.n	2fd6 <_scanf_chars+0xbe>
    2fc8:	68e2      	ldr	r2, [r4, #12]
    2fca:	3201      	adds	r2, #1
    2fcc:	60e2      	str	r2, [r4, #12]
    2fce:	69a2      	ldr	r2, [r4, #24]
    2fd0:	2a00      	cmp	r2, #0
    2fd2:	d000      	beq.n	2fd6 <_scanf_chars+0xbe>
    2fd4:	703b      	strb	r3, [r7, #0]
    2fd6:	6923      	ldr	r3, [r4, #16]
    2fd8:	2000      	movs	r0, #0
    2fda:	199e      	adds	r6, r3, r6
    2fdc:	6126      	str	r6, [r4, #16]
    2fde:	e7c7      	b.n	2f70 <_scanf_chars+0x58>

00002fe0 <_scanf_i>:
    2fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fe2:	000c      	movs	r4, r1
    2fe4:	b08d      	sub	sp, #52	; 0x34
    2fe6:	9302      	str	r3, [sp, #8]
    2fe8:	4b77      	ldr	r3, [pc, #476]	; (31c8 <_scanf_i+0x1e8>)
    2fea:	9005      	str	r0, [sp, #20]
    2fec:	0016      	movs	r6, r2
    2fee:	aa09      	add	r2, sp, #36	; 0x24
    2ff0:	cb23      	ldmia	r3!, {r0, r1, r5}
    2ff2:	c223      	stmia	r2!, {r0, r1, r5}
    2ff4:	4b75      	ldr	r3, [pc, #468]	; (31cc <_scanf_i+0x1ec>)
    2ff6:	9306      	str	r3, [sp, #24]
    2ff8:	69a3      	ldr	r3, [r4, #24]
    2ffa:	2b03      	cmp	r3, #3
    2ffc:	d001      	beq.n	3002 <_scanf_i+0x22>
    2ffe:	4b74      	ldr	r3, [pc, #464]	; (31d0 <_scanf_i+0x1f0>)
    3000:	9306      	str	r3, [sp, #24]
    3002:	22ae      	movs	r2, #174	; 0xae
    3004:	2000      	movs	r0, #0
    3006:	68a3      	ldr	r3, [r4, #8]
    3008:	0052      	lsls	r2, r2, #1
    300a:	1e59      	subs	r1, r3, #1
    300c:	9004      	str	r0, [sp, #16]
    300e:	4291      	cmp	r1, r2
    3010:	d905      	bls.n	301e <_scanf_i+0x3e>
    3012:	3b5e      	subs	r3, #94	; 0x5e
    3014:	3bff      	subs	r3, #255	; 0xff
    3016:	9304      	str	r3, [sp, #16]
    3018:	235e      	movs	r3, #94	; 0x5e
    301a:	33ff      	adds	r3, #255	; 0xff
    301c:	60a3      	str	r3, [r4, #8]
    301e:	0023      	movs	r3, r4
    3020:	331c      	adds	r3, #28
    3022:	9301      	str	r3, [sp, #4]
    3024:	23d0      	movs	r3, #208	; 0xd0
    3026:	2700      	movs	r7, #0
    3028:	6822      	ldr	r2, [r4, #0]
    302a:	011b      	lsls	r3, r3, #4
    302c:	4313      	orrs	r3, r2
    302e:	6023      	str	r3, [r4, #0]
    3030:	9b01      	ldr	r3, [sp, #4]
    3032:	9303      	str	r3, [sp, #12]
    3034:	6833      	ldr	r3, [r6, #0]
    3036:	a809      	add	r0, sp, #36	; 0x24
    3038:	7819      	ldrb	r1, [r3, #0]
    303a:	00bb      	lsls	r3, r7, #2
    303c:	2202      	movs	r2, #2
    303e:	5818      	ldr	r0, [r3, r0]
    3040:	f000 fc5a 	bl	38f8 <memchr>
    3044:	2800      	cmp	r0, #0
    3046:	d02b      	beq.n	30a0 <_scanf_i+0xc0>
    3048:	2f01      	cmp	r7, #1
    304a:	d15f      	bne.n	310c <_scanf_i+0x12c>
    304c:	6863      	ldr	r3, [r4, #4]
    304e:	2b00      	cmp	r3, #0
    3050:	d106      	bne.n	3060 <_scanf_i+0x80>
    3052:	3308      	adds	r3, #8
    3054:	6822      	ldr	r2, [r4, #0]
    3056:	6063      	str	r3, [r4, #4]
    3058:	33f9      	adds	r3, #249	; 0xf9
    305a:	33ff      	adds	r3, #255	; 0xff
    305c:	4313      	orrs	r3, r2
    305e:	6023      	str	r3, [r4, #0]
    3060:	4b5c      	ldr	r3, [pc, #368]	; (31d4 <_scanf_i+0x1f4>)
    3062:	6822      	ldr	r2, [r4, #0]
    3064:	4013      	ands	r3, r2
    3066:	6023      	str	r3, [r4, #0]
    3068:	68a3      	ldr	r3, [r4, #8]
    306a:	1e5a      	subs	r2, r3, #1
    306c:	60a2      	str	r2, [r4, #8]
    306e:	2b00      	cmp	r3, #0
    3070:	d016      	beq.n	30a0 <_scanf_i+0xc0>
    3072:	9b03      	ldr	r3, [sp, #12]
    3074:	1c5d      	adds	r5, r3, #1
    3076:	6833      	ldr	r3, [r6, #0]
    3078:	1c5a      	adds	r2, r3, #1
    307a:	6032      	str	r2, [r6, #0]
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	9a03      	ldr	r2, [sp, #12]
    3080:	9503      	str	r5, [sp, #12]
    3082:	7013      	strb	r3, [r2, #0]
    3084:	6873      	ldr	r3, [r6, #4]
    3086:	3b01      	subs	r3, #1
    3088:	6073      	str	r3, [r6, #4]
    308a:	2b00      	cmp	r3, #0
    308c:	dc08      	bgt.n	30a0 <_scanf_i+0xc0>
    308e:	23c0      	movs	r3, #192	; 0xc0
    3090:	005b      	lsls	r3, r3, #1
    3092:	58e3      	ldr	r3, [r4, r3]
    3094:	0031      	movs	r1, r6
    3096:	9805      	ldr	r0, [sp, #20]
    3098:	9307      	str	r3, [sp, #28]
    309a:	4798      	blx	r3
    309c:	2800      	cmp	r0, #0
    309e:	d17d      	bne.n	319c <_scanf_i+0x1bc>
    30a0:	3701      	adds	r7, #1
    30a2:	2f03      	cmp	r7, #3
    30a4:	d1c6      	bne.n	3034 <_scanf_i+0x54>
    30a6:	6863      	ldr	r3, [r4, #4]
    30a8:	2b00      	cmp	r3, #0
    30aa:	d101      	bne.n	30b0 <_scanf_i+0xd0>
    30ac:	330a      	adds	r3, #10
    30ae:	6063      	str	r3, [r4, #4]
    30b0:	2110      	movs	r1, #16
    30b2:	2700      	movs	r7, #0
    30b4:	6863      	ldr	r3, [r4, #4]
    30b6:	6960      	ldr	r0, [r4, #20]
    30b8:	1ac9      	subs	r1, r1, r3
    30ba:	4b47      	ldr	r3, [pc, #284]	; (31d8 <_scanf_i+0x1f8>)
    30bc:	18c9      	adds	r1, r1, r3
    30be:	f000 f93d 	bl	333c <__sccl>
    30c2:	9d03      	ldr	r5, [sp, #12]
    30c4:	68a3      	ldr	r3, [r4, #8]
    30c6:	2b00      	cmp	r3, #0
    30c8:	d041      	beq.n	314e <_scanf_i+0x16e>
    30ca:	6832      	ldr	r2, [r6, #0]
    30cc:	6960      	ldr	r0, [r4, #20]
    30ce:	7811      	ldrb	r1, [r2, #0]
    30d0:	5c40      	ldrb	r0, [r0, r1]
    30d2:	2800      	cmp	r0, #0
    30d4:	d03b      	beq.n	314e <_scanf_i+0x16e>
    30d6:	2930      	cmp	r1, #48	; 0x30
    30d8:	d128      	bne.n	312c <_scanf_i+0x14c>
    30da:	2080      	movs	r0, #128	; 0x80
    30dc:	6821      	ldr	r1, [r4, #0]
    30de:	0100      	lsls	r0, r0, #4
    30e0:	4201      	tst	r1, r0
    30e2:	d023      	beq.n	312c <_scanf_i+0x14c>
    30e4:	9a04      	ldr	r2, [sp, #16]
    30e6:	3701      	adds	r7, #1
    30e8:	2a00      	cmp	r2, #0
    30ea:	d003      	beq.n	30f4 <_scanf_i+0x114>
    30ec:	3a01      	subs	r2, #1
    30ee:	3301      	adds	r3, #1
    30f0:	9204      	str	r2, [sp, #16]
    30f2:	60a3      	str	r3, [r4, #8]
    30f4:	6873      	ldr	r3, [r6, #4]
    30f6:	3b01      	subs	r3, #1
    30f8:	6073      	str	r3, [r6, #4]
    30fa:	2b00      	cmp	r3, #0
    30fc:	dd1e      	ble.n	313c <_scanf_i+0x15c>
    30fe:	6833      	ldr	r3, [r6, #0]
    3100:	3301      	adds	r3, #1
    3102:	6033      	str	r3, [r6, #0]
    3104:	68a3      	ldr	r3, [r4, #8]
    3106:	3b01      	subs	r3, #1
    3108:	60a3      	str	r3, [r4, #8]
    310a:	e7db      	b.n	30c4 <_scanf_i+0xe4>
    310c:	2f02      	cmp	r7, #2
    310e:	d1ab      	bne.n	3068 <_scanf_i+0x88>
    3110:	21c0      	movs	r1, #192	; 0xc0
    3112:	2380      	movs	r3, #128	; 0x80
    3114:	6822      	ldr	r2, [r4, #0]
    3116:	00c9      	lsls	r1, r1, #3
    3118:	4011      	ands	r1, r2
    311a:	009b      	lsls	r3, r3, #2
    311c:	4299      	cmp	r1, r3
    311e:	d1c2      	bne.n	30a6 <_scanf_i+0xc6>
    3120:	3bf1      	subs	r3, #241	; 0xf1
    3122:	3bff      	subs	r3, #255	; 0xff
    3124:	6063      	str	r3, [r4, #4]
    3126:	33f0      	adds	r3, #240	; 0xf0
    3128:	4313      	orrs	r3, r2
    312a:	e79c      	b.n	3066 <_scanf_i+0x86>
    312c:	6821      	ldr	r1, [r4, #0]
    312e:	4b2b      	ldr	r3, [pc, #172]	; (31dc <_scanf_i+0x1fc>)
    3130:	400b      	ands	r3, r1
    3132:	6023      	str	r3, [r4, #0]
    3134:	7813      	ldrb	r3, [r2, #0]
    3136:	702b      	strb	r3, [r5, #0]
    3138:	3501      	adds	r5, #1
    313a:	e7db      	b.n	30f4 <_scanf_i+0x114>
    313c:	23c0      	movs	r3, #192	; 0xc0
    313e:	005b      	lsls	r3, r3, #1
    3140:	58e3      	ldr	r3, [r4, r3]
    3142:	0031      	movs	r1, r6
    3144:	9805      	ldr	r0, [sp, #20]
    3146:	9303      	str	r3, [sp, #12]
    3148:	4798      	blx	r3
    314a:	2800      	cmp	r0, #0
    314c:	d0da      	beq.n	3104 <_scanf_i+0x124>
    314e:	6823      	ldr	r3, [r4, #0]
    3150:	05db      	lsls	r3, r3, #23
    3152:	d50e      	bpl.n	3172 <_scanf_i+0x192>
    3154:	9b01      	ldr	r3, [sp, #4]
    3156:	429d      	cmp	r5, r3
    3158:	d907      	bls.n	316a <_scanf_i+0x18a>
    315a:	23be      	movs	r3, #190	; 0xbe
    315c:	3d01      	subs	r5, #1
    315e:	005b      	lsls	r3, r3, #1
    3160:	7829      	ldrb	r1, [r5, #0]
    3162:	58e3      	ldr	r3, [r4, r3]
    3164:	0032      	movs	r2, r6
    3166:	9805      	ldr	r0, [sp, #20]
    3168:	4798      	blx	r3
    316a:	9b01      	ldr	r3, [sp, #4]
    316c:	2001      	movs	r0, #1
    316e:	429d      	cmp	r5, r3
    3170:	d027      	beq.n	31c2 <_scanf_i+0x1e2>
    3172:	2210      	movs	r2, #16
    3174:	6823      	ldr	r3, [r4, #0]
    3176:	401a      	ands	r2, r3
    3178:	d11c      	bne.n	31b4 <_scanf_i+0x1d4>
    317a:	702a      	strb	r2, [r5, #0]
    317c:	6863      	ldr	r3, [r4, #4]
    317e:	9901      	ldr	r1, [sp, #4]
    3180:	9805      	ldr	r0, [sp, #20]
    3182:	9e06      	ldr	r6, [sp, #24]
    3184:	47b0      	blx	r6
    3186:	9b02      	ldr	r3, [sp, #8]
    3188:	6822      	ldr	r2, [r4, #0]
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	0691      	lsls	r1, r2, #26
    318e:	d507      	bpl.n	31a0 <_scanf_i+0x1c0>
    3190:	9902      	ldr	r1, [sp, #8]
    3192:	1d1a      	adds	r2, r3, #4
    3194:	600a      	str	r2, [r1, #0]
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	6018      	str	r0, [r3, #0]
    319a:	e008      	b.n	31ae <_scanf_i+0x1ce>
    319c:	2700      	movs	r7, #0
    319e:	e7d6      	b.n	314e <_scanf_i+0x16e>
    31a0:	07d1      	lsls	r1, r2, #31
    31a2:	d5f5      	bpl.n	3190 <_scanf_i+0x1b0>
    31a4:	9902      	ldr	r1, [sp, #8]
    31a6:	1d1a      	adds	r2, r3, #4
    31a8:	600a      	str	r2, [r1, #0]
    31aa:	681b      	ldr	r3, [r3, #0]
    31ac:	8018      	strh	r0, [r3, #0]
    31ae:	68e3      	ldr	r3, [r4, #12]
    31b0:	3301      	adds	r3, #1
    31b2:	60e3      	str	r3, [r4, #12]
    31b4:	2000      	movs	r0, #0
    31b6:	9b01      	ldr	r3, [sp, #4]
    31b8:	1aed      	subs	r5, r5, r3
    31ba:	6923      	ldr	r3, [r4, #16]
    31bc:	19ef      	adds	r7, r5, r7
    31be:	19df      	adds	r7, r3, r7
    31c0:	6127      	str	r7, [r4, #16]
    31c2:	b00d      	add	sp, #52	; 0x34
    31c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	00003bd8 	.word	0x00003bd8
    31cc:	00003545 	.word	0x00003545
    31d0:	00003675 	.word	0x00003675
    31d4:	fffffaff 	.word	0xfffffaff
    31d8:	00003be4 	.word	0x00003be4
    31dc:	fffff6ff 	.word	0xfffff6ff

000031e0 <lflush>:
    31e0:	2209      	movs	r2, #9
    31e2:	b510      	push	{r4, lr}
    31e4:	8983      	ldrh	r3, [r0, #12]
    31e6:	4013      	ands	r3, r2
    31e8:	2200      	movs	r2, #0
    31ea:	2b09      	cmp	r3, #9
    31ec:	d102      	bne.n	31f4 <lflush+0x14>
    31ee:	f7fe fe8d 	bl	1f0c <fflush>
    31f2:	0002      	movs	r2, r0
    31f4:	0010      	movs	r0, r2
    31f6:	bd10      	pop	{r4, pc}

000031f8 <__srefill_r>:
    31f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31fa:	0005      	movs	r5, r0
    31fc:	000c      	movs	r4, r1
    31fe:	2800      	cmp	r0, #0
    3200:	d004      	beq.n	320c <__srefill_r+0x14>
    3202:	6983      	ldr	r3, [r0, #24]
    3204:	2b00      	cmp	r3, #0
    3206:	d101      	bne.n	320c <__srefill_r+0x14>
    3208:	f7fe fed6 	bl	1fb8 <__sinit>
    320c:	4b3d      	ldr	r3, [pc, #244]	; (3304 <__srefill_r+0x10c>)
    320e:	429c      	cmp	r4, r3
    3210:	d10a      	bne.n	3228 <__srefill_r+0x30>
    3212:	686c      	ldr	r4, [r5, #4]
    3214:	2300      	movs	r3, #0
    3216:	6063      	str	r3, [r4, #4]
    3218:	230c      	movs	r3, #12
    321a:	5ee2      	ldrsh	r2, [r4, r3]
    321c:	b293      	uxth	r3, r2
    321e:	0699      	lsls	r1, r3, #26
    3220:	d50c      	bpl.n	323c <__srefill_r+0x44>
    3222:	2001      	movs	r0, #1
    3224:	4240      	negs	r0, r0
    3226:	e068      	b.n	32fa <__srefill_r+0x102>
    3228:	4b37      	ldr	r3, [pc, #220]	; (3308 <__srefill_r+0x110>)
    322a:	429c      	cmp	r4, r3
    322c:	d101      	bne.n	3232 <__srefill_r+0x3a>
    322e:	68ac      	ldr	r4, [r5, #8]
    3230:	e7f0      	b.n	3214 <__srefill_r+0x1c>
    3232:	4b36      	ldr	r3, [pc, #216]	; (330c <__srefill_r+0x114>)
    3234:	429c      	cmp	r4, r3
    3236:	d1ed      	bne.n	3214 <__srefill_r+0x1c>
    3238:	68ec      	ldr	r4, [r5, #12]
    323a:	e7eb      	b.n	3214 <__srefill_r+0x1c>
    323c:	0759      	lsls	r1, r3, #29
    323e:	d44a      	bmi.n	32d6 <__srefill_r+0xde>
    3240:	06d9      	lsls	r1, r3, #27
    3242:	d405      	bmi.n	3250 <__srefill_r+0x58>
    3244:	2309      	movs	r3, #9
    3246:	602b      	str	r3, [r5, #0]
    3248:	3337      	adds	r3, #55	; 0x37
    324a:	4313      	orrs	r3, r2
    324c:	81a3      	strh	r3, [r4, #12]
    324e:	e7e8      	b.n	3222 <__srefill_r+0x2a>
    3250:	2608      	movs	r6, #8
    3252:	4233      	tst	r3, r6
    3254:	d00a      	beq.n	326c <__srefill_r+0x74>
    3256:	0021      	movs	r1, r4
    3258:	0028      	movs	r0, r5
    325a:	f7fe fe2b 	bl	1eb4 <_fflush_r>
    325e:	2800      	cmp	r0, #0
    3260:	d1df      	bne.n	3222 <__srefill_r+0x2a>
    3262:	89a3      	ldrh	r3, [r4, #12]
    3264:	60a0      	str	r0, [r4, #8]
    3266:	43b3      	bics	r3, r6
    3268:	81a3      	strh	r3, [r4, #12]
    326a:	61a0      	str	r0, [r4, #24]
    326c:	2304      	movs	r3, #4
    326e:	89a2      	ldrh	r2, [r4, #12]
    3270:	4313      	orrs	r3, r2
    3272:	81a3      	strh	r3, [r4, #12]
    3274:	6923      	ldr	r3, [r4, #16]
    3276:	2b00      	cmp	r3, #0
    3278:	d103      	bne.n	3282 <__srefill_r+0x8a>
    327a:	0021      	movs	r1, r4
    327c:	0028      	movs	r0, r5
    327e:	f7fe ff75 	bl	216c <__smakebuf_r>
    3282:	230c      	movs	r3, #12
    3284:	5ee7      	ldrsh	r7, [r4, r3]
    3286:	b2be      	uxth	r6, r7
    3288:	07b3      	lsls	r3, r6, #30
    328a:	d00f      	beq.n	32ac <__srefill_r+0xb4>
    328c:	2301      	movs	r3, #1
    328e:	81a3      	strh	r3, [r4, #12]
    3290:	4b1f      	ldr	r3, [pc, #124]	; (3310 <__srefill_r+0x118>)
    3292:	4920      	ldr	r1, [pc, #128]	; (3314 <__srefill_r+0x11c>)
    3294:	6818      	ldr	r0, [r3, #0]
    3296:	f7fe ff03 	bl	20a0 <_fwalk>
    329a:	2309      	movs	r3, #9
    329c:	81a7      	strh	r7, [r4, #12]
    329e:	401e      	ands	r6, r3
    32a0:	429e      	cmp	r6, r3
    32a2:	d103      	bne.n	32ac <__srefill_r+0xb4>
    32a4:	0021      	movs	r1, r4
    32a6:	0028      	movs	r0, r5
    32a8:	f7fe fd7a 	bl	1da0 <__sflush_r>
    32ac:	6923      	ldr	r3, [r4, #16]
    32ae:	6922      	ldr	r2, [r4, #16]
    32b0:	6023      	str	r3, [r4, #0]
    32b2:	0028      	movs	r0, r5
    32b4:	6963      	ldr	r3, [r4, #20]
    32b6:	6a21      	ldr	r1, [r4, #32]
    32b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
    32ba:	47a8      	blx	r5
    32bc:	0002      	movs	r2, r0
    32be:	6060      	str	r0, [r4, #4]
    32c0:	2000      	movs	r0, #0
    32c2:	4282      	cmp	r2, r0
    32c4:	dc19      	bgt.n	32fa <__srefill_r+0x102>
    32c6:	89a1      	ldrh	r1, [r4, #12]
    32c8:	4282      	cmp	r2, r0
    32ca:	d117      	bne.n	32fc <__srefill_r+0x104>
    32cc:	2320      	movs	r3, #32
    32ce:	430b      	orrs	r3, r1
    32d0:	81a3      	strh	r3, [r4, #12]
    32d2:	3801      	subs	r0, #1
    32d4:	e011      	b.n	32fa <__srefill_r+0x102>
    32d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    32d8:	2900      	cmp	r1, #0
    32da:	d0cb      	beq.n	3274 <__srefill_r+0x7c>
    32dc:	0023      	movs	r3, r4
    32de:	3344      	adds	r3, #68	; 0x44
    32e0:	4299      	cmp	r1, r3
    32e2:	d002      	beq.n	32ea <__srefill_r+0xf2>
    32e4:	0028      	movs	r0, r5
    32e6:	f7fe ff8f 	bl	2208 <_free_r>
    32ea:	2000      	movs	r0, #0
    32ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
    32ee:	6360      	str	r0, [r4, #52]	; 0x34
    32f0:	6063      	str	r3, [r4, #4]
    32f2:	4283      	cmp	r3, r0
    32f4:	d0be      	beq.n	3274 <__srefill_r+0x7c>
    32f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    32f8:	6023      	str	r3, [r4, #0]
    32fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32fc:	2340      	movs	r3, #64	; 0x40
    32fe:	6060      	str	r0, [r4, #4]
    3300:	430b      	orrs	r3, r1
    3302:	e7a3      	b.n	324c <__srefill_r+0x54>
    3304:	00003b64 	.word	0x00003b64
    3308:	00003b84 	.word	0x00003b84
    330c:	00003b44 	.word	0x00003b44
    3310:	00003b40 	.word	0x00003b40
    3314:	000031e1 	.word	0x000031e1

00003318 <_sbrk_r>:
    3318:	2300      	movs	r3, #0
    331a:	b570      	push	{r4, r5, r6, lr}
    331c:	4c06      	ldr	r4, [pc, #24]	; (3338 <_sbrk_r+0x20>)
    331e:	0005      	movs	r5, r0
    3320:	0008      	movs	r0, r1
    3322:	6023      	str	r3, [r4, #0]
    3324:	f7fe f906 	bl	1534 <_sbrk>
    3328:	1c43      	adds	r3, r0, #1
    332a:	d103      	bne.n	3334 <_sbrk_r+0x1c>
    332c:	6823      	ldr	r3, [r4, #0]
    332e:	2b00      	cmp	r3, #0
    3330:	d000      	beq.n	3334 <_sbrk_r+0x1c>
    3332:	602b      	str	r3, [r5, #0]
    3334:	bd70      	pop	{r4, r5, r6, pc}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	200002f0 	.word	0x200002f0

0000333c <__sccl>:
    333c:	b570      	push	{r4, r5, r6, lr}
    333e:	780b      	ldrb	r3, [r1, #0]
    3340:	2b5e      	cmp	r3, #94	; 0x5e
    3342:	d00d      	beq.n	3360 <__sccl+0x24>
    3344:	1c4a      	adds	r2, r1, #1
    3346:	2100      	movs	r1, #0
    3348:	0004      	movs	r4, r0
    334a:	1c45      	adds	r5, r0, #1
    334c:	35ff      	adds	r5, #255	; 0xff
    334e:	7021      	strb	r1, [r4, #0]
    3350:	3401      	adds	r4, #1
    3352:	42a5      	cmp	r5, r4
    3354:	d1fb      	bne.n	334e <__sccl+0x12>
    3356:	2b00      	cmp	r3, #0
    3358:	d106      	bne.n	3368 <__sccl+0x2c>
    335a:	3a01      	subs	r2, #1
    335c:	0010      	movs	r0, r2
    335e:	bd70      	pop	{r4, r5, r6, pc}
    3360:	1c8a      	adds	r2, r1, #2
    3362:	784b      	ldrb	r3, [r1, #1]
    3364:	2101      	movs	r1, #1
    3366:	e7ef      	b.n	3348 <__sccl+0xc>
    3368:	2401      	movs	r4, #1
    336a:	404c      	eors	r4, r1
    336c:	0011      	movs	r1, r2
    336e:	54c4      	strb	r4, [r0, r3]
    3370:	780d      	ldrb	r5, [r1, #0]
    3372:	1c4a      	adds	r2, r1, #1
    3374:	2d2d      	cmp	r5, #45	; 0x2d
    3376:	d007      	beq.n	3388 <__sccl+0x4c>
    3378:	2d5d      	cmp	r5, #93	; 0x5d
    337a:	d0ef      	beq.n	335c <__sccl+0x20>
    337c:	2d00      	cmp	r5, #0
    337e:	d101      	bne.n	3384 <__sccl+0x48>
    3380:	000a      	movs	r2, r1
    3382:	e7eb      	b.n	335c <__sccl+0x20>
    3384:	002b      	movs	r3, r5
    3386:	e7f1      	b.n	336c <__sccl+0x30>
    3388:	784e      	ldrb	r6, [r1, #1]
    338a:	2e5d      	cmp	r6, #93	; 0x5d
    338c:	d0fa      	beq.n	3384 <__sccl+0x48>
    338e:	42b3      	cmp	r3, r6
    3390:	dcf8      	bgt.n	3384 <__sccl+0x48>
    3392:	3102      	adds	r1, #2
    3394:	3301      	adds	r3, #1
    3396:	54c4      	strb	r4, [r0, r3]
    3398:	429e      	cmp	r6, r3
    339a:	dcfb      	bgt.n	3394 <__sccl+0x58>
    339c:	e7e8      	b.n	3370 <__sccl+0x34>
	...

000033a0 <__sread>:
    33a0:	b570      	push	{r4, r5, r6, lr}
    33a2:	000c      	movs	r4, r1
    33a4:	250e      	movs	r5, #14
    33a6:	5f49      	ldrsh	r1, [r1, r5]
    33a8:	f000 faf4 	bl	3994 <_read_r>
    33ac:	2800      	cmp	r0, #0
    33ae:	db03      	blt.n	33b8 <__sread+0x18>
    33b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    33b2:	181b      	adds	r3, r3, r0
    33b4:	6563      	str	r3, [r4, #84]	; 0x54
    33b6:	bd70      	pop	{r4, r5, r6, pc}
    33b8:	89a3      	ldrh	r3, [r4, #12]
    33ba:	4a02      	ldr	r2, [pc, #8]	; (33c4 <__sread+0x24>)
    33bc:	4013      	ands	r3, r2
    33be:	81a3      	strh	r3, [r4, #12]
    33c0:	e7f9      	b.n	33b6 <__sread+0x16>
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	ffffefff 	.word	0xffffefff

000033c8 <__swrite>:
    33c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ca:	001f      	movs	r7, r3
    33cc:	898b      	ldrh	r3, [r1, #12]
    33ce:	0005      	movs	r5, r0
    33d0:	000c      	movs	r4, r1
    33d2:	0016      	movs	r6, r2
    33d4:	05db      	lsls	r3, r3, #23
    33d6:	d505      	bpl.n	33e4 <__swrite+0x1c>
    33d8:	230e      	movs	r3, #14
    33da:	5ec9      	ldrsh	r1, [r1, r3]
    33dc:	2200      	movs	r2, #0
    33de:	2302      	movs	r3, #2
    33e0:	f000 fa64 	bl	38ac <_lseek_r>
    33e4:	89a3      	ldrh	r3, [r4, #12]
    33e6:	4a05      	ldr	r2, [pc, #20]	; (33fc <__swrite+0x34>)
    33e8:	0028      	movs	r0, r5
    33ea:	4013      	ands	r3, r2
    33ec:	81a3      	strh	r3, [r4, #12]
    33ee:	0032      	movs	r2, r6
    33f0:	230e      	movs	r3, #14
    33f2:	5ee1      	ldrsh	r1, [r4, r3]
    33f4:	003b      	movs	r3, r7
    33f6:	f000 f9fd 	bl	37f4 <_write_r>
    33fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33fc:	ffffefff 	.word	0xffffefff

00003400 <__sseek>:
    3400:	b570      	push	{r4, r5, r6, lr}
    3402:	000c      	movs	r4, r1
    3404:	250e      	movs	r5, #14
    3406:	5f49      	ldrsh	r1, [r1, r5]
    3408:	f000 fa50 	bl	38ac <_lseek_r>
    340c:	89a3      	ldrh	r3, [r4, #12]
    340e:	1c42      	adds	r2, r0, #1
    3410:	d103      	bne.n	341a <__sseek+0x1a>
    3412:	4a05      	ldr	r2, [pc, #20]	; (3428 <__sseek+0x28>)
    3414:	4013      	ands	r3, r2
    3416:	81a3      	strh	r3, [r4, #12]
    3418:	bd70      	pop	{r4, r5, r6, pc}
    341a:	2280      	movs	r2, #128	; 0x80
    341c:	0152      	lsls	r2, r2, #5
    341e:	4313      	orrs	r3, r2
    3420:	81a3      	strh	r3, [r4, #12]
    3422:	6560      	str	r0, [r4, #84]	; 0x54
    3424:	e7f8      	b.n	3418 <__sseek+0x18>
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	ffffefff 	.word	0xffffefff

0000342c <__sclose>:
    342c:	b510      	push	{r4, lr}
    342e:	230e      	movs	r3, #14
    3430:	5ec9      	ldrsh	r1, [r1, r3]
    3432:	f000 f9f3 	bl	381c <_close_r>
    3436:	bd10      	pop	{r4, pc}

00003438 <_strtol_l.isra.0>:
    3438:	b5f0      	push	{r4, r5, r6, r7, lr}
    343a:	001f      	movs	r7, r3
    343c:	000e      	movs	r6, r1
    343e:	b087      	sub	sp, #28
    3440:	9005      	str	r0, [sp, #20]
    3442:	9103      	str	r1, [sp, #12]
    3444:	9202      	str	r2, [sp, #8]
    3446:	980c      	ldr	r0, [sp, #48]	; 0x30
    3448:	7834      	ldrb	r4, [r6, #0]
    344a:	f000 fa1d 	bl	3888 <__locale_ctype_ptr_l>
    344e:	2208      	movs	r2, #8
    3450:	1900      	adds	r0, r0, r4
    3452:	7843      	ldrb	r3, [r0, #1]
    3454:	1c75      	adds	r5, r6, #1
    3456:	4013      	ands	r3, r2
    3458:	d10c      	bne.n	3474 <_strtol_l.isra.0+0x3c>
    345a:	2c2d      	cmp	r4, #45	; 0x2d
    345c:	d10c      	bne.n	3478 <_strtol_l.isra.0+0x40>
    345e:	3301      	adds	r3, #1
    3460:	782c      	ldrb	r4, [r5, #0]
    3462:	9301      	str	r3, [sp, #4]
    3464:	1cb5      	adds	r5, r6, #2
    3466:	2f00      	cmp	r7, #0
    3468:	d00c      	beq.n	3484 <_strtol_l.isra.0+0x4c>
    346a:	2f10      	cmp	r7, #16
    346c:	d114      	bne.n	3498 <_strtol_l.isra.0+0x60>
    346e:	2c30      	cmp	r4, #48	; 0x30
    3470:	d00a      	beq.n	3488 <_strtol_l.isra.0+0x50>
    3472:	e011      	b.n	3498 <_strtol_l.isra.0+0x60>
    3474:	002e      	movs	r6, r5
    3476:	e7e6      	b.n	3446 <_strtol_l.isra.0+0xe>
    3478:	9301      	str	r3, [sp, #4]
    347a:	2c2b      	cmp	r4, #43	; 0x2b
    347c:	d1f3      	bne.n	3466 <_strtol_l.isra.0+0x2e>
    347e:	782c      	ldrb	r4, [r5, #0]
    3480:	1cb5      	adds	r5, r6, #2
    3482:	e7f0      	b.n	3466 <_strtol_l.isra.0+0x2e>
    3484:	2c30      	cmp	r4, #48	; 0x30
    3486:	d12f      	bne.n	34e8 <_strtol_l.isra.0+0xb0>
    3488:	2220      	movs	r2, #32
    348a:	782b      	ldrb	r3, [r5, #0]
    348c:	4393      	bics	r3, r2
    348e:	2b58      	cmp	r3, #88	; 0x58
    3490:	d151      	bne.n	3536 <_strtol_l.isra.0+0xfe>
    3492:	2710      	movs	r7, #16
    3494:	786c      	ldrb	r4, [r5, #1]
    3496:	3502      	adds	r5, #2
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	4a29      	ldr	r2, [pc, #164]	; (3540 <_strtol_l.isra.0+0x108>)
    349c:	0039      	movs	r1, r7
    349e:	189e      	adds	r6, r3, r2
    34a0:	0030      	movs	r0, r6
    34a2:	f7fe f9c9 	bl	1838 <__aeabi_uidivmod>
    34a6:	0030      	movs	r0, r6
    34a8:	9104      	str	r1, [sp, #16]
    34aa:	0039      	movs	r1, r7
    34ac:	f7fe f93e 	bl	172c <__udivsi3>
    34b0:	2101      	movs	r1, #1
    34b2:	2300      	movs	r3, #0
    34b4:	4249      	negs	r1, r1
    34b6:	0002      	movs	r2, r0
    34b8:	468c      	mov	ip, r1
    34ba:	0018      	movs	r0, r3
    34bc:	0021      	movs	r1, r4
    34be:	3930      	subs	r1, #48	; 0x30
    34c0:	2909      	cmp	r1, #9
    34c2:	d813      	bhi.n	34ec <_strtol_l.isra.0+0xb4>
    34c4:	000c      	movs	r4, r1
    34c6:	42a7      	cmp	r7, r4
    34c8:	dd1c      	ble.n	3504 <_strtol_l.isra.0+0xcc>
    34ca:	1c59      	adds	r1, r3, #1
    34cc:	d009      	beq.n	34e2 <_strtol_l.isra.0+0xaa>
    34ce:	4663      	mov	r3, ip
    34d0:	4282      	cmp	r2, r0
    34d2:	d306      	bcc.n	34e2 <_strtol_l.isra.0+0xaa>
    34d4:	d102      	bne.n	34dc <_strtol_l.isra.0+0xa4>
    34d6:	9904      	ldr	r1, [sp, #16]
    34d8:	42a1      	cmp	r1, r4
    34da:	db02      	blt.n	34e2 <_strtol_l.isra.0+0xaa>
    34dc:	2301      	movs	r3, #1
    34de:	4378      	muls	r0, r7
    34e0:	1820      	adds	r0, r4, r0
    34e2:	782c      	ldrb	r4, [r5, #0]
    34e4:	3501      	adds	r5, #1
    34e6:	e7e9      	b.n	34bc <_strtol_l.isra.0+0x84>
    34e8:	270a      	movs	r7, #10
    34ea:	e7d5      	b.n	3498 <_strtol_l.isra.0+0x60>
    34ec:	0021      	movs	r1, r4
    34ee:	3941      	subs	r1, #65	; 0x41
    34f0:	2919      	cmp	r1, #25
    34f2:	d801      	bhi.n	34f8 <_strtol_l.isra.0+0xc0>
    34f4:	3c37      	subs	r4, #55	; 0x37
    34f6:	e7e6      	b.n	34c6 <_strtol_l.isra.0+0x8e>
    34f8:	0021      	movs	r1, r4
    34fa:	3961      	subs	r1, #97	; 0x61
    34fc:	2919      	cmp	r1, #25
    34fe:	d801      	bhi.n	3504 <_strtol_l.isra.0+0xcc>
    3500:	3c57      	subs	r4, #87	; 0x57
    3502:	e7e0      	b.n	34c6 <_strtol_l.isra.0+0x8e>
    3504:	1c5a      	adds	r2, r3, #1
    3506:	d108      	bne.n	351a <_strtol_l.isra.0+0xe2>
    3508:	9a05      	ldr	r2, [sp, #20]
    350a:	3323      	adds	r3, #35	; 0x23
    350c:	6013      	str	r3, [r2, #0]
    350e:	9b02      	ldr	r3, [sp, #8]
    3510:	0030      	movs	r0, r6
    3512:	2b00      	cmp	r3, #0
    3514:	d10b      	bne.n	352e <_strtol_l.isra.0+0xf6>
    3516:	b007      	add	sp, #28
    3518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    351a:	9a01      	ldr	r2, [sp, #4]
    351c:	2a00      	cmp	r2, #0
    351e:	d000      	beq.n	3522 <_strtol_l.isra.0+0xea>
    3520:	4240      	negs	r0, r0
    3522:	9a02      	ldr	r2, [sp, #8]
    3524:	2a00      	cmp	r2, #0
    3526:	d0f6      	beq.n	3516 <_strtol_l.isra.0+0xde>
    3528:	9a03      	ldr	r2, [sp, #12]
    352a:	2b00      	cmp	r3, #0
    352c:	d000      	beq.n	3530 <_strtol_l.isra.0+0xf8>
    352e:	1e6a      	subs	r2, r5, #1
    3530:	9b02      	ldr	r3, [sp, #8]
    3532:	601a      	str	r2, [r3, #0]
    3534:	e7ef      	b.n	3516 <_strtol_l.isra.0+0xde>
    3536:	2430      	movs	r4, #48	; 0x30
    3538:	2f00      	cmp	r7, #0
    353a:	d1ad      	bne.n	3498 <_strtol_l.isra.0+0x60>
    353c:	3708      	adds	r7, #8
    353e:	e7ab      	b.n	3498 <_strtol_l.isra.0+0x60>
    3540:	7fffffff 	.word	0x7fffffff

00003544 <_strtol_r>:
    3544:	b513      	push	{r0, r1, r4, lr}
    3546:	4c05      	ldr	r4, [pc, #20]	; (355c <_strtol_r+0x18>)
    3548:	6824      	ldr	r4, [r4, #0]
    354a:	6a24      	ldr	r4, [r4, #32]
    354c:	2c00      	cmp	r4, #0
    354e:	d100      	bne.n	3552 <_strtol_r+0xe>
    3550:	4c03      	ldr	r4, [pc, #12]	; (3560 <_strtol_r+0x1c>)
    3552:	9400      	str	r4, [sp, #0]
    3554:	f7ff ff70 	bl	3438 <_strtol_l.isra.0>
    3558:	bd16      	pop	{r1, r2, r4, pc}
    355a:	46c0      	nop			; (mov r8, r8)
    355c:	2000000c 	.word	0x2000000c
    3560:	20000070 	.word	0x20000070

00003564 <_strtoul_l.isra.0>:
    3564:	b5f0      	push	{r4, r5, r6, r7, lr}
    3566:	001f      	movs	r7, r3
    3568:	000e      	movs	r6, r1
    356a:	b087      	sub	sp, #28
    356c:	9005      	str	r0, [sp, #20]
    356e:	9103      	str	r1, [sp, #12]
    3570:	9201      	str	r2, [sp, #4]
    3572:	980c      	ldr	r0, [sp, #48]	; 0x30
    3574:	7834      	ldrb	r4, [r6, #0]
    3576:	f000 f987 	bl	3888 <__locale_ctype_ptr_l>
    357a:	2208      	movs	r2, #8
    357c:	1900      	adds	r0, r0, r4
    357e:	7843      	ldrb	r3, [r0, #1]
    3580:	1c75      	adds	r5, r6, #1
    3582:	4013      	ands	r3, r2
    3584:	d10c      	bne.n	35a0 <_strtoul_l.isra.0+0x3c>
    3586:	2c2d      	cmp	r4, #45	; 0x2d
    3588:	d10c      	bne.n	35a4 <_strtoul_l.isra.0+0x40>
    358a:	3301      	adds	r3, #1
    358c:	782c      	ldrb	r4, [r5, #0]
    358e:	9302      	str	r3, [sp, #8]
    3590:	1cb5      	adds	r5, r6, #2
    3592:	2f00      	cmp	r7, #0
    3594:	d00c      	beq.n	35b0 <_strtoul_l.isra.0+0x4c>
    3596:	2f10      	cmp	r7, #16
    3598:	d114      	bne.n	35c4 <_strtoul_l.isra.0+0x60>
    359a:	2c30      	cmp	r4, #48	; 0x30
    359c:	d00a      	beq.n	35b4 <_strtoul_l.isra.0+0x50>
    359e:	e011      	b.n	35c4 <_strtoul_l.isra.0+0x60>
    35a0:	002e      	movs	r6, r5
    35a2:	e7e6      	b.n	3572 <_strtoul_l.isra.0+0xe>
    35a4:	9302      	str	r3, [sp, #8]
    35a6:	2c2b      	cmp	r4, #43	; 0x2b
    35a8:	d1f3      	bne.n	3592 <_strtoul_l.isra.0+0x2e>
    35aa:	782c      	ldrb	r4, [r5, #0]
    35ac:	1cb5      	adds	r5, r6, #2
    35ae:	e7f0      	b.n	3592 <_strtoul_l.isra.0+0x2e>
    35b0:	2c30      	cmp	r4, #48	; 0x30
    35b2:	d12f      	bne.n	3614 <_strtoul_l.isra.0+0xb0>
    35b4:	2220      	movs	r2, #32
    35b6:	782b      	ldrb	r3, [r5, #0]
    35b8:	4393      	bics	r3, r2
    35ba:	2b58      	cmp	r3, #88	; 0x58
    35bc:	d154      	bne.n	3668 <_strtoul_l.isra.0+0x104>
    35be:	2710      	movs	r7, #16
    35c0:	786c      	ldrb	r4, [r5, #1]
    35c2:	3502      	adds	r5, #2
    35c4:	2001      	movs	r0, #1
    35c6:	0039      	movs	r1, r7
    35c8:	4240      	negs	r0, r0
    35ca:	f7fe f8af 	bl	172c <__udivsi3>
    35ce:	0006      	movs	r6, r0
    35d0:	2001      	movs	r0, #1
    35d2:	0039      	movs	r1, r7
    35d4:	4240      	negs	r0, r0
    35d6:	f7fe f92f 	bl	1838 <__aeabi_uidivmod>
    35da:	2300      	movs	r3, #0
    35dc:	9104      	str	r1, [sp, #16]
    35de:	2101      	movs	r1, #1
    35e0:	2201      	movs	r2, #1
    35e2:	0018      	movs	r0, r3
    35e4:	468c      	mov	ip, r1
    35e6:	4252      	negs	r2, r2
    35e8:	0021      	movs	r1, r4
    35ea:	3930      	subs	r1, #48	; 0x30
    35ec:	2909      	cmp	r1, #9
    35ee:	d813      	bhi.n	3618 <_strtoul_l.isra.0+0xb4>
    35f0:	000c      	movs	r4, r1
    35f2:	42a7      	cmp	r7, r4
    35f4:	dd1e      	ble.n	3634 <_strtoul_l.isra.0+0xd0>
    35f6:	2b00      	cmp	r3, #0
    35f8:	db1a      	blt.n	3630 <_strtoul_l.isra.0+0xcc>
    35fa:	0013      	movs	r3, r2
    35fc:	4286      	cmp	r6, r0
    35fe:	d306      	bcc.n	360e <_strtoul_l.isra.0+0xaa>
    3600:	d102      	bne.n	3608 <_strtoul_l.isra.0+0xa4>
    3602:	9904      	ldr	r1, [sp, #16]
    3604:	42a1      	cmp	r1, r4
    3606:	db02      	blt.n	360e <_strtoul_l.isra.0+0xaa>
    3608:	4663      	mov	r3, ip
    360a:	4378      	muls	r0, r7
    360c:	1820      	adds	r0, r4, r0
    360e:	782c      	ldrb	r4, [r5, #0]
    3610:	3501      	adds	r5, #1
    3612:	e7e9      	b.n	35e8 <_strtoul_l.isra.0+0x84>
    3614:	270a      	movs	r7, #10
    3616:	e7d5      	b.n	35c4 <_strtoul_l.isra.0+0x60>
    3618:	0021      	movs	r1, r4
    361a:	3941      	subs	r1, #65	; 0x41
    361c:	2919      	cmp	r1, #25
    361e:	d801      	bhi.n	3624 <_strtoul_l.isra.0+0xc0>
    3620:	3c37      	subs	r4, #55	; 0x37
    3622:	e7e6      	b.n	35f2 <_strtoul_l.isra.0+0x8e>
    3624:	0021      	movs	r1, r4
    3626:	3961      	subs	r1, #97	; 0x61
    3628:	2919      	cmp	r1, #25
    362a:	d803      	bhi.n	3634 <_strtoul_l.isra.0+0xd0>
    362c:	3c57      	subs	r4, #87	; 0x57
    362e:	e7e0      	b.n	35f2 <_strtoul_l.isra.0+0x8e>
    3630:	0013      	movs	r3, r2
    3632:	e7ec      	b.n	360e <_strtoul_l.isra.0+0xaa>
    3634:	2b00      	cmp	r3, #0
    3636:	da09      	bge.n	364c <_strtoul_l.isra.0+0xe8>
    3638:	2322      	movs	r3, #34	; 0x22
    363a:	2001      	movs	r0, #1
    363c:	9a05      	ldr	r2, [sp, #20]
    363e:	4240      	negs	r0, r0
    3640:	6013      	str	r3, [r2, #0]
    3642:	9b01      	ldr	r3, [sp, #4]
    3644:	2b00      	cmp	r3, #0
    3646:	d10b      	bne.n	3660 <_strtoul_l.isra.0+0xfc>
    3648:	b007      	add	sp, #28
    364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    364c:	9a02      	ldr	r2, [sp, #8]
    364e:	2a00      	cmp	r2, #0
    3650:	d000      	beq.n	3654 <_strtoul_l.isra.0+0xf0>
    3652:	4240      	negs	r0, r0
    3654:	9a01      	ldr	r2, [sp, #4]
    3656:	2a00      	cmp	r2, #0
    3658:	d0f6      	beq.n	3648 <_strtoul_l.isra.0+0xe4>
    365a:	9a03      	ldr	r2, [sp, #12]
    365c:	2b00      	cmp	r3, #0
    365e:	d000      	beq.n	3662 <_strtoul_l.isra.0+0xfe>
    3660:	1e6a      	subs	r2, r5, #1
    3662:	9b01      	ldr	r3, [sp, #4]
    3664:	601a      	str	r2, [r3, #0]
    3666:	e7ef      	b.n	3648 <_strtoul_l.isra.0+0xe4>
    3668:	2430      	movs	r4, #48	; 0x30
    366a:	2f00      	cmp	r7, #0
    366c:	d1aa      	bne.n	35c4 <_strtoul_l.isra.0+0x60>
    366e:	3708      	adds	r7, #8
    3670:	e7a8      	b.n	35c4 <_strtoul_l.isra.0+0x60>
	...

00003674 <_strtoul_r>:
    3674:	b513      	push	{r0, r1, r4, lr}
    3676:	4c05      	ldr	r4, [pc, #20]	; (368c <_strtoul_r+0x18>)
    3678:	6824      	ldr	r4, [r4, #0]
    367a:	6a24      	ldr	r4, [r4, #32]
    367c:	2c00      	cmp	r4, #0
    367e:	d100      	bne.n	3682 <_strtoul_r+0xe>
    3680:	4c03      	ldr	r4, [pc, #12]	; (3690 <_strtoul_r+0x1c>)
    3682:	9400      	str	r4, [sp, #0]
    3684:	f7ff ff6e 	bl	3564 <_strtoul_l.isra.0>
    3688:	bd16      	pop	{r1, r2, r4, pc}
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	2000000c 	.word	0x2000000c
    3690:	20000070 	.word	0x20000070

00003694 <__submore>:
    3694:	000b      	movs	r3, r1
    3696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3698:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    369a:	3344      	adds	r3, #68	; 0x44
    369c:	000c      	movs	r4, r1
    369e:	429d      	cmp	r5, r3
    36a0:	d11c      	bne.n	36dc <__submore+0x48>
    36a2:	2680      	movs	r6, #128	; 0x80
    36a4:	00f6      	lsls	r6, r6, #3
    36a6:	0031      	movs	r1, r6
    36a8:	f7fe fdf8 	bl	229c <_malloc_r>
    36ac:	2800      	cmp	r0, #0
    36ae:	d102      	bne.n	36b6 <__submore+0x22>
    36b0:	2001      	movs	r0, #1
    36b2:	4240      	negs	r0, r0
    36b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    36b6:	0023      	movs	r3, r4
    36b8:	6360      	str	r0, [r4, #52]	; 0x34
    36ba:	63a6      	str	r6, [r4, #56]	; 0x38
    36bc:	3346      	adds	r3, #70	; 0x46
    36be:	781a      	ldrb	r2, [r3, #0]
    36c0:	4b10      	ldr	r3, [pc, #64]	; (3704 <__submore+0x70>)
    36c2:	54c2      	strb	r2, [r0, r3]
    36c4:	0023      	movs	r3, r4
    36c6:	3345      	adds	r3, #69	; 0x45
    36c8:	781a      	ldrb	r2, [r3, #0]
    36ca:	4b0f      	ldr	r3, [pc, #60]	; (3708 <__submore+0x74>)
    36cc:	54c2      	strb	r2, [r0, r3]
    36ce:	782a      	ldrb	r2, [r5, #0]
    36d0:	4b0e      	ldr	r3, [pc, #56]	; (370c <__submore+0x78>)
    36d2:	54c2      	strb	r2, [r0, r3]
    36d4:	18c0      	adds	r0, r0, r3
    36d6:	6020      	str	r0, [r4, #0]
    36d8:	2000      	movs	r0, #0
    36da:	e7eb      	b.n	36b4 <__submore+0x20>
    36dc:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    36de:	0029      	movs	r1, r5
    36e0:	0073      	lsls	r3, r6, #1
    36e2:	001a      	movs	r2, r3
    36e4:	9301      	str	r3, [sp, #4]
    36e6:	f000 f92f 	bl	3948 <_realloc_r>
    36ea:	1e05      	subs	r5, r0, #0
    36ec:	d0e0      	beq.n	36b0 <__submore+0x1c>
    36ee:	1987      	adds	r7, r0, r6
    36f0:	0001      	movs	r1, r0
    36f2:	0032      	movs	r2, r6
    36f4:	0038      	movs	r0, r7
    36f6:	f000 f90a 	bl	390e <memcpy>
    36fa:	9b01      	ldr	r3, [sp, #4]
    36fc:	6027      	str	r7, [r4, #0]
    36fe:	6365      	str	r5, [r4, #52]	; 0x34
    3700:	63a3      	str	r3, [r4, #56]	; 0x38
    3702:	e7e9      	b.n	36d8 <__submore+0x44>
    3704:	000003ff 	.word	0x000003ff
    3708:	000003fe 	.word	0x000003fe
    370c:	000003fd 	.word	0x000003fd

00003710 <_ungetc_r>:
    3710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3712:	0005      	movs	r5, r0
    3714:	000e      	movs	r6, r1
    3716:	0014      	movs	r4, r2
    3718:	1c4b      	adds	r3, r1, #1
    371a:	d103      	bne.n	3724 <_ungetc_r+0x14>
    371c:	2601      	movs	r6, #1
    371e:	4276      	negs	r6, r6
    3720:	0030      	movs	r0, r6
    3722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3724:	2800      	cmp	r0, #0
    3726:	d004      	beq.n	3732 <_ungetc_r+0x22>
    3728:	6983      	ldr	r3, [r0, #24]
    372a:	2b00      	cmp	r3, #0
    372c:	d101      	bne.n	3732 <_ungetc_r+0x22>
    372e:	f7fe fc43 	bl	1fb8 <__sinit>
    3732:	4b2d      	ldr	r3, [pc, #180]	; (37e8 <_ungetc_r+0xd8>)
    3734:	429c      	cmp	r4, r3
    3736:	d12d      	bne.n	3794 <_ungetc_r+0x84>
    3738:	686c      	ldr	r4, [r5, #4]
    373a:	2220      	movs	r2, #32
    373c:	89a3      	ldrh	r3, [r4, #12]
    373e:	4393      	bics	r3, r2
    3740:	b21b      	sxth	r3, r3
    3742:	81a3      	strh	r3, [r4, #12]
    3744:	b29b      	uxth	r3, r3
    3746:	075a      	lsls	r2, r3, #29
    3748:	d413      	bmi.n	3772 <_ungetc_r+0x62>
    374a:	06da      	lsls	r2, r3, #27
    374c:	d5e6      	bpl.n	371c <_ungetc_r+0xc>
    374e:	2708      	movs	r7, #8
    3750:	423b      	tst	r3, r7
    3752:	d00a      	beq.n	376a <_ungetc_r+0x5a>
    3754:	0021      	movs	r1, r4
    3756:	0028      	movs	r0, r5
    3758:	f7fe fbac 	bl	1eb4 <_fflush_r>
    375c:	2800      	cmp	r0, #0
    375e:	d1dd      	bne.n	371c <_ungetc_r+0xc>
    3760:	89a3      	ldrh	r3, [r4, #12]
    3762:	60a0      	str	r0, [r4, #8]
    3764:	43bb      	bics	r3, r7
    3766:	81a3      	strh	r3, [r4, #12]
    3768:	61a0      	str	r0, [r4, #24]
    376a:	2304      	movs	r3, #4
    376c:	89a2      	ldrh	r2, [r4, #12]
    376e:	4313      	orrs	r3, r2
    3770:	81a3      	strh	r3, [r4, #12]
    3772:	6b62      	ldr	r2, [r4, #52]	; 0x34
    3774:	b2f7      	uxtb	r7, r6
    3776:	6863      	ldr	r3, [r4, #4]
    3778:	b2f6      	uxtb	r6, r6
    377a:	2a00      	cmp	r2, #0
    377c:	d01b      	beq.n	37b6 <_ungetc_r+0xa6>
    377e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3780:	4293      	cmp	r3, r2
    3782:	da11      	bge.n	37a8 <_ungetc_r+0x98>
    3784:	6823      	ldr	r3, [r4, #0]
    3786:	3b01      	subs	r3, #1
    3788:	6023      	str	r3, [r4, #0]
    378a:	701f      	strb	r7, [r3, #0]
    378c:	6863      	ldr	r3, [r4, #4]
    378e:	3301      	adds	r3, #1
    3790:	6063      	str	r3, [r4, #4]
    3792:	e7c5      	b.n	3720 <_ungetc_r+0x10>
    3794:	4b15      	ldr	r3, [pc, #84]	; (37ec <_ungetc_r+0xdc>)
    3796:	429c      	cmp	r4, r3
    3798:	d101      	bne.n	379e <_ungetc_r+0x8e>
    379a:	68ac      	ldr	r4, [r5, #8]
    379c:	e7cd      	b.n	373a <_ungetc_r+0x2a>
    379e:	4b14      	ldr	r3, [pc, #80]	; (37f0 <_ungetc_r+0xe0>)
    37a0:	429c      	cmp	r4, r3
    37a2:	d1ca      	bne.n	373a <_ungetc_r+0x2a>
    37a4:	68ec      	ldr	r4, [r5, #12]
    37a6:	e7c8      	b.n	373a <_ungetc_r+0x2a>
    37a8:	0021      	movs	r1, r4
    37aa:	0028      	movs	r0, r5
    37ac:	f7ff ff72 	bl	3694 <__submore>
    37b0:	2800      	cmp	r0, #0
    37b2:	d0e7      	beq.n	3784 <_ungetc_r+0x74>
    37b4:	e7b2      	b.n	371c <_ungetc_r+0xc>
    37b6:	6921      	ldr	r1, [r4, #16]
    37b8:	6822      	ldr	r2, [r4, #0]
    37ba:	2900      	cmp	r1, #0
    37bc:	d007      	beq.n	37ce <_ungetc_r+0xbe>
    37be:	4291      	cmp	r1, r2
    37c0:	d205      	bcs.n	37ce <_ungetc_r+0xbe>
    37c2:	1e51      	subs	r1, r2, #1
    37c4:	7808      	ldrb	r0, [r1, #0]
    37c6:	4286      	cmp	r6, r0
    37c8:	d101      	bne.n	37ce <_ungetc_r+0xbe>
    37ca:	6021      	str	r1, [r4, #0]
    37cc:	e7df      	b.n	378e <_ungetc_r+0x7e>
    37ce:	6423      	str	r3, [r4, #64]	; 0x40
    37d0:	0023      	movs	r3, r4
    37d2:	3344      	adds	r3, #68	; 0x44
    37d4:	6363      	str	r3, [r4, #52]	; 0x34
    37d6:	2303      	movs	r3, #3
    37d8:	63a3      	str	r3, [r4, #56]	; 0x38
    37da:	0023      	movs	r3, r4
    37dc:	3346      	adds	r3, #70	; 0x46
    37de:	63e2      	str	r2, [r4, #60]	; 0x3c
    37e0:	701f      	strb	r7, [r3, #0]
    37e2:	6023      	str	r3, [r4, #0]
    37e4:	2301      	movs	r3, #1
    37e6:	e7d3      	b.n	3790 <_ungetc_r+0x80>
    37e8:	00003b64 	.word	0x00003b64
    37ec:	00003b84 	.word	0x00003b84
    37f0:	00003b44 	.word	0x00003b44

000037f4 <_write_r>:
    37f4:	b570      	push	{r4, r5, r6, lr}
    37f6:	0005      	movs	r5, r0
    37f8:	0008      	movs	r0, r1
    37fa:	0011      	movs	r1, r2
    37fc:	2200      	movs	r2, #0
    37fe:	4c06      	ldr	r4, [pc, #24]	; (3818 <_write_r+0x24>)
    3800:	6022      	str	r2, [r4, #0]
    3802:	001a      	movs	r2, r3
    3804:	f7fd fe6e 	bl	14e4 <_write>
    3808:	1c43      	adds	r3, r0, #1
    380a:	d103      	bne.n	3814 <_write_r+0x20>
    380c:	6823      	ldr	r3, [r4, #0]
    380e:	2b00      	cmp	r3, #0
    3810:	d000      	beq.n	3814 <_write_r+0x20>
    3812:	602b      	str	r3, [r5, #0]
    3814:	bd70      	pop	{r4, r5, r6, pc}
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	200002f0 	.word	0x200002f0

0000381c <_close_r>:
    381c:	2300      	movs	r3, #0
    381e:	b570      	push	{r4, r5, r6, lr}
    3820:	4c06      	ldr	r4, [pc, #24]	; (383c <_close_r+0x20>)
    3822:	0005      	movs	r5, r0
    3824:	0008      	movs	r0, r1
    3826:	6023      	str	r3, [r4, #0]
    3828:	f7fd fe96 	bl	1558 <_close>
    382c:	1c43      	adds	r3, r0, #1
    382e:	d103      	bne.n	3838 <_close_r+0x1c>
    3830:	6823      	ldr	r3, [r4, #0]
    3832:	2b00      	cmp	r3, #0
    3834:	d000      	beq.n	3838 <_close_r+0x1c>
    3836:	602b      	str	r3, [r5, #0]
    3838:	bd70      	pop	{r4, r5, r6, pc}
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	200002f0 	.word	0x200002f0

00003840 <_fstat_r>:
    3840:	2300      	movs	r3, #0
    3842:	b570      	push	{r4, r5, r6, lr}
    3844:	4c06      	ldr	r4, [pc, #24]	; (3860 <_fstat_r+0x20>)
    3846:	0005      	movs	r5, r0
    3848:	0008      	movs	r0, r1
    384a:	0011      	movs	r1, r2
    384c:	6023      	str	r3, [r4, #0]
    384e:	f7fd fe86 	bl	155e <_fstat>
    3852:	1c43      	adds	r3, r0, #1
    3854:	d103      	bne.n	385e <_fstat_r+0x1e>
    3856:	6823      	ldr	r3, [r4, #0]
    3858:	2b00      	cmp	r3, #0
    385a:	d000      	beq.n	385e <_fstat_r+0x1e>
    385c:	602b      	str	r3, [r5, #0]
    385e:	bd70      	pop	{r4, r5, r6, pc}
    3860:	200002f0 	.word	0x200002f0

00003864 <_isatty_r>:
    3864:	2300      	movs	r3, #0
    3866:	b570      	push	{r4, r5, r6, lr}
    3868:	4c06      	ldr	r4, [pc, #24]	; (3884 <_isatty_r+0x20>)
    386a:	0005      	movs	r5, r0
    386c:	0008      	movs	r0, r1
    386e:	6023      	str	r3, [r4, #0]
    3870:	f7fd fe7a 	bl	1568 <_isatty>
    3874:	1c43      	adds	r3, r0, #1
    3876:	d103      	bne.n	3880 <_isatty_r+0x1c>
    3878:	6823      	ldr	r3, [r4, #0]
    387a:	2b00      	cmp	r3, #0
    387c:	d000      	beq.n	3880 <_isatty_r+0x1c>
    387e:	602b      	str	r3, [r5, #0]
    3880:	bd70      	pop	{r4, r5, r6, pc}
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	200002f0 	.word	0x200002f0

00003888 <__locale_ctype_ptr_l>:
    3888:	30ec      	adds	r0, #236	; 0xec
    388a:	6800      	ldr	r0, [r0, #0]
    388c:	4770      	bx	lr
	...

00003890 <__locale_ctype_ptr>:
    3890:	4b04      	ldr	r3, [pc, #16]	; (38a4 <__locale_ctype_ptr+0x14>)
    3892:	681b      	ldr	r3, [r3, #0]
    3894:	6a1b      	ldr	r3, [r3, #32]
    3896:	2b00      	cmp	r3, #0
    3898:	d100      	bne.n	389c <__locale_ctype_ptr+0xc>
    389a:	4b03      	ldr	r3, [pc, #12]	; (38a8 <__locale_ctype_ptr+0x18>)
    389c:	33ec      	adds	r3, #236	; 0xec
    389e:	6818      	ldr	r0, [r3, #0]
    38a0:	4770      	bx	lr
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	2000000c 	.word	0x2000000c
    38a8:	20000070 	.word	0x20000070

000038ac <_lseek_r>:
    38ac:	b570      	push	{r4, r5, r6, lr}
    38ae:	0005      	movs	r5, r0
    38b0:	0008      	movs	r0, r1
    38b2:	0011      	movs	r1, r2
    38b4:	2200      	movs	r2, #0
    38b6:	4c06      	ldr	r4, [pc, #24]	; (38d0 <_lseek_r+0x24>)
    38b8:	6022      	str	r2, [r4, #0]
    38ba:	001a      	movs	r2, r3
    38bc:	f7fd fe56 	bl	156c <_lseek>
    38c0:	1c43      	adds	r3, r0, #1
    38c2:	d103      	bne.n	38cc <_lseek_r+0x20>
    38c4:	6823      	ldr	r3, [r4, #0]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d000      	beq.n	38cc <_lseek_r+0x20>
    38ca:	602b      	str	r3, [r5, #0]
    38cc:	bd70      	pop	{r4, r5, r6, pc}
    38ce:	46c0      	nop			; (mov r8, r8)
    38d0:	200002f0 	.word	0x200002f0

000038d4 <__ascii_mbtowc>:
    38d4:	b082      	sub	sp, #8
    38d6:	2900      	cmp	r1, #0
    38d8:	d100      	bne.n	38dc <__ascii_mbtowc+0x8>
    38da:	a901      	add	r1, sp, #4
    38dc:	1e10      	subs	r0, r2, #0
    38de:	d006      	beq.n	38ee <__ascii_mbtowc+0x1a>
    38e0:	2b00      	cmp	r3, #0
    38e2:	d006      	beq.n	38f2 <__ascii_mbtowc+0x1e>
    38e4:	7813      	ldrb	r3, [r2, #0]
    38e6:	600b      	str	r3, [r1, #0]
    38e8:	7810      	ldrb	r0, [r2, #0]
    38ea:	1e43      	subs	r3, r0, #1
    38ec:	4198      	sbcs	r0, r3
    38ee:	b002      	add	sp, #8
    38f0:	4770      	bx	lr
    38f2:	2002      	movs	r0, #2
    38f4:	4240      	negs	r0, r0
    38f6:	e7fa      	b.n	38ee <__ascii_mbtowc+0x1a>

000038f8 <memchr>:
    38f8:	b2c9      	uxtb	r1, r1
    38fa:	1882      	adds	r2, r0, r2
    38fc:	4290      	cmp	r0, r2
    38fe:	d101      	bne.n	3904 <memchr+0xc>
    3900:	2000      	movs	r0, #0
    3902:	4770      	bx	lr
    3904:	7803      	ldrb	r3, [r0, #0]
    3906:	428b      	cmp	r3, r1
    3908:	d0fb      	beq.n	3902 <memchr+0xa>
    390a:	3001      	adds	r0, #1
    390c:	e7f6      	b.n	38fc <memchr+0x4>

0000390e <memcpy>:
    390e:	2300      	movs	r3, #0
    3910:	b510      	push	{r4, lr}
    3912:	429a      	cmp	r2, r3
    3914:	d100      	bne.n	3918 <memcpy+0xa>
    3916:	bd10      	pop	{r4, pc}
    3918:	5ccc      	ldrb	r4, [r1, r3]
    391a:	54c4      	strb	r4, [r0, r3]
    391c:	3301      	adds	r3, #1
    391e:	e7f8      	b.n	3912 <memcpy+0x4>

00003920 <memmove>:
    3920:	b510      	push	{r4, lr}
    3922:	4288      	cmp	r0, r1
    3924:	d902      	bls.n	392c <memmove+0xc>
    3926:	188b      	adds	r3, r1, r2
    3928:	4298      	cmp	r0, r3
    392a:	d308      	bcc.n	393e <memmove+0x1e>
    392c:	2300      	movs	r3, #0
    392e:	429a      	cmp	r2, r3
    3930:	d007      	beq.n	3942 <memmove+0x22>
    3932:	5ccc      	ldrb	r4, [r1, r3]
    3934:	54c4      	strb	r4, [r0, r3]
    3936:	3301      	adds	r3, #1
    3938:	e7f9      	b.n	392e <memmove+0xe>
    393a:	5c8b      	ldrb	r3, [r1, r2]
    393c:	5483      	strb	r3, [r0, r2]
    393e:	3a01      	subs	r2, #1
    3940:	d2fb      	bcs.n	393a <memmove+0x1a>
    3942:	bd10      	pop	{r4, pc}

00003944 <__malloc_lock>:
    3944:	4770      	bx	lr

00003946 <__malloc_unlock>:
    3946:	4770      	bx	lr

00003948 <_realloc_r>:
    3948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    394a:	0007      	movs	r7, r0
    394c:	000d      	movs	r5, r1
    394e:	0016      	movs	r6, r2
    3950:	2900      	cmp	r1, #0
    3952:	d105      	bne.n	3960 <_realloc_r+0x18>
    3954:	0011      	movs	r1, r2
    3956:	f7fe fca1 	bl	229c <_malloc_r>
    395a:	0004      	movs	r4, r0
    395c:	0020      	movs	r0, r4
    395e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3960:	2a00      	cmp	r2, #0
    3962:	d103      	bne.n	396c <_realloc_r+0x24>
    3964:	f7fe fc50 	bl	2208 <_free_r>
    3968:	0034      	movs	r4, r6
    396a:	e7f7      	b.n	395c <_realloc_r+0x14>
    396c:	f000 f832 	bl	39d4 <_malloc_usable_size_r>
    3970:	002c      	movs	r4, r5
    3972:	4286      	cmp	r6, r0
    3974:	d9f2      	bls.n	395c <_realloc_r+0x14>
    3976:	0031      	movs	r1, r6
    3978:	0038      	movs	r0, r7
    397a:	f7fe fc8f 	bl	229c <_malloc_r>
    397e:	1e04      	subs	r4, r0, #0
    3980:	d0ec      	beq.n	395c <_realloc_r+0x14>
    3982:	0029      	movs	r1, r5
    3984:	0032      	movs	r2, r6
    3986:	f7ff ffc2 	bl	390e <memcpy>
    398a:	0029      	movs	r1, r5
    398c:	0038      	movs	r0, r7
    398e:	f7fe fc3b 	bl	2208 <_free_r>
    3992:	e7e3      	b.n	395c <_realloc_r+0x14>

00003994 <_read_r>:
    3994:	b570      	push	{r4, r5, r6, lr}
    3996:	0005      	movs	r5, r0
    3998:	0008      	movs	r0, r1
    399a:	0011      	movs	r1, r2
    399c:	2200      	movs	r2, #0
    399e:	4c06      	ldr	r4, [pc, #24]	; (39b8 <_read_r+0x24>)
    39a0:	6022      	str	r2, [r4, #0]
    39a2:	001a      	movs	r2, r3
    39a4:	f7fd fd7c 	bl	14a0 <_read>
    39a8:	1c43      	adds	r3, r0, #1
    39aa:	d103      	bne.n	39b4 <_read_r+0x20>
    39ac:	6823      	ldr	r3, [r4, #0]
    39ae:	2b00      	cmp	r3, #0
    39b0:	d000      	beq.n	39b4 <_read_r+0x20>
    39b2:	602b      	str	r3, [r5, #0]
    39b4:	bd70      	pop	{r4, r5, r6, pc}
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	200002f0 	.word	0x200002f0

000039bc <__ascii_wctomb>:
    39bc:	1e0b      	subs	r3, r1, #0
    39be:	d004      	beq.n	39ca <__ascii_wctomb+0xe>
    39c0:	2aff      	cmp	r2, #255	; 0xff
    39c2:	d904      	bls.n	39ce <__ascii_wctomb+0x12>
    39c4:	238a      	movs	r3, #138	; 0x8a
    39c6:	6003      	str	r3, [r0, #0]
    39c8:	3b8b      	subs	r3, #139	; 0x8b
    39ca:	0018      	movs	r0, r3
    39cc:	4770      	bx	lr
    39ce:	700a      	strb	r2, [r1, #0]
    39d0:	2301      	movs	r3, #1
    39d2:	e7fa      	b.n	39ca <__ascii_wctomb+0xe>

000039d4 <_malloc_usable_size_r>:
    39d4:	1f0b      	subs	r3, r1, #4
    39d6:	681b      	ldr	r3, [r3, #0]
    39d8:	1f18      	subs	r0, r3, #4
    39da:	2b00      	cmp	r3, #0
    39dc:	da01      	bge.n	39e2 <_malloc_usable_size_r+0xe>
    39de:	580b      	ldr	r3, [r1, r0]
    39e0:	18c0      	adds	r0, r0, r3
    39e2:	4770      	bx	lr
    39e4:	48202d2d 	.word	0x48202d2d
    39e8:	20706c65 	.word	0x20706c65
    39ec:	756e654d 	.word	0x756e654d
    39f0:	0d2d2d20 	.word	0x0d2d2d20
    39f4:	00000000 	.word	0x00000000
    39f8:	65746f4e 	.word	0x65746f4e
    39fc:	6554203a 	.word	0x6554203a
    3a00:	6e696d72 	.word	0x6e696d72
    3a04:	20657461 	.word	0x20657461
    3a08:	72657375 	.word	0x72657375
    3a0c:	6d6f6320 	.word	0x6d6f6320
    3a10:	646e616d 	.word	0x646e616d
    3a14:	69772073 	.word	0x69772073
    3a18:	6e206874 	.word	0x6e206874
    3a1c:	6c207765 	.word	0x6c207765
    3a20:	20656e69 	.word	0x20656e69
    3a24:	72616863 	.word	0x72616863
    3a28:	65746361 	.word	0x65746361
    3a2c:	00000d72 	.word	0x00000d72
    3a30:	202d2071 	.word	0x202d2071
    3a34:	75746552 	.word	0x75746552
    3a38:	74206e72 	.word	0x74206e72
    3a3c:	616d206f 	.word	0x616d206f
    3a40:	6d206e69 	.word	0x6d206e69
    3a44:	20756e65 	.word	0x20756e65
    3a48:	61207461 	.word	0x61207461
    3a4c:	7420796e 	.word	0x7420796e
    3a50:	0d656d69 	.word	0x0d656d69
    3a54:	00000000 	.word	0x00000000
    3a58:	202d2068 	.word	0x202d2068
    3a5c:	6e697250 	.word	0x6e697250
    3a60:	68742074 	.word	0x68742074
    3a64:	6d207369 	.word	0x6d207369
    3a68:	0d756e65 	.word	0x0d756e65
    3a6c:	00000000 	.word	0x00000000
    3a70:	202d2069 	.word	0x202d2069
    3a74:	20433249 	.word	0x20433249
    3a78:	6d6d6f63 	.word	0x6d6d6f63
    3a7c:	0d646e61 	.word	0x0d646e61
    3a80:	00000000 	.word	0x00000000
    3a84:	0000000d 	.word	0x0000000d
    3a88:	6e69614d 	.word	0x6e69614d
    3a8c:	6e656d20 	.word	0x6e656d20
    3a90:	3e3e2075 	.word	0x3e3e2075
    3a94:	65737520 	.word	0x65737520
    3a98:	6e692072 	.word	0x6e692072
    3a9c:	20747570 	.word	0x20747570
    3aa0:	2e2f685b 	.word	0x2e2f685b
    3aa4:	712f2e2e 	.word	0x712f2e2e
    3aa8:	00203a5d 	.word	0x00203a5d
    3aac:	20433249 	.word	0x20433249
    3ab0:	49203e3e 	.word	0x49203e3e
    3ab4:	65722073 	.word	0x65722073
    3ab8:	6f206461 	.word	0x6f206461
    3abc:	72772072 	.word	0x72772072
    3ac0:	3f657469 	.word	0x3f657469
    3ac4:	2f725b20 	.word	0x2f725b20
    3ac8:	5d712f77 	.word	0x5d712f77
    3acc:	0000203a 	.word	0x0000203a
    3ad0:	64616572 	.word	0x64616572
    3ad4:	00000000 	.word	0x00000000
    3ad8:	61766e49 	.word	0x61766e49
    3adc:	2064696c 	.word	0x2064696c
    3ae0:	72657375 	.word	0x72657375
    3ae4:	706e6920 	.word	0x706e6920
    3ae8:	000d7475 	.word	0x000d7475
    3aec:	74697277 	.word	0x74697277
    3af0:	00000065 	.word	0x00000065
    3af4:	69252525 	.word	0x69252525
    3af8:	00000073 	.word	0x00000073
    3afc:	0a0d7325 	.word	0x0a0d7325
    3b00:	00000000 	.word	0x00000000
    3b04:	42000000 	.word	0x42000000
    3b08:	42000400 	.word	0x42000400
    3b0c:	42000800 	.word	0x42000800
    3b10:	42000c00 	.word	0x42000c00
    3b14:	42001000 	.word	0x42001000
    3b18:	43000400 	.word	0x43000400
    3b1c:	00000e82 	.word	0x00000e82
    3b20:	00000e7e 	.word	0x00000e7e
    3b24:	00000e7e 	.word	0x00000e7e
    3b28:	00000ee8 	.word	0x00000ee8
    3b2c:	00000ee8 	.word	0x00000ee8
    3b30:	00000e98 	.word	0x00000e98
    3b34:	00000e88 	.word	0x00000e88
    3b38:	00000e9e 	.word	0x00000e9e
    3b3c:	00000ed6 	.word	0x00000ed6

00003b40 <_global_impure_ptr>:
    3b40:	20000010                                ... 

00003b44 <__sf_fake_stderr>:
	...

00003b64 <__sf_fake_stdin>:
	...

00003b84 <__sf_fake_stdout>:
	...
    3ba4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3bb4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3bc4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3bd4:	00006665 00003bf6 00003bf9 00003bfc     ef...;...;...;..
    3be4:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    3bf4:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    3c04:	2e005849 20200000                                IX...

00003c09 <_ctype_>:
    3c09:	20202000 20202020 28282020 20282828     .         ((((( 
    3c19:	20202020 20202020 20202020 20202020                     
    3c29:	10108820 10101010 10101010 10101010      ...............
    3c39:	04040410 04040404 10040404 10101010     ................
    3c49:	41411010 41414141 01010101 01010101     ..AAAAAA........
    3c59:	01010101 01010101 01010101 10101010     ................
    3c69:	42421010 42424242 02020202 02020202     ..BBBBBB........
    3c79:	02020202 02020202 02020202 10101010     ................
    3c89:	00000020 00000000 00000000 00000000      ...............
	...

00003d0c <_init>:
    3d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d12:	bc08      	pop	{r3}
    3d14:	469e      	mov	lr, r3
    3d16:	4770      	bx	lr

00003d18 <__init_array_start>:
    3d18:	000000dd 	.word	0x000000dd

00003d1c <_fini>:
    3d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d22:	bc08      	pop	{r3}
    3d24:	469e      	mov	lr, r3
    3d26:	4770      	bx	lr

00003d28 <__fini_array_start>:
    3d28:	000000b5 	.word	0x000000b5
