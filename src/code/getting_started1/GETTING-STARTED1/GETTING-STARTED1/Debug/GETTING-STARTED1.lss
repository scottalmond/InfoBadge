
GETTING-STARTED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a3c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020070  2**0
                  CONTENTS
  3 .bss          00000138  20000070  00002aac  00020070  2**2
                  ALLOC
  4 .stack        00002000  200001a8  00002be4  00020070  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002a614  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000042b8  00000000  00000000  0004a705  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005b35  00000000  00000000  0004e9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005b8  00000000  00000000  000544f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006d8  00000000  00000000  00054aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f7e6  00000000  00000000  00055182  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e745  00000000  00000000  00074968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009e0a9  00000000  00000000  000830ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000134c  00000000  00000000  00121158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 21 00 20 3d 17 00 00 39 17 00 00 39 17 00 00     .!. =...9...9...
	...
      2c:	39 17 00 00 00 00 00 00 00 00 00 00 39 17 00 00     9...........9...
      3c:	39 17 00 00 39 17 00 00 39 17 00 00 39 17 00 00     9...9...9...9...
      4c:	75 02 00 00 39 17 00 00 39 17 00 00 39 17 00 00     u...9...9...9...
      5c:	39 17 00 00 2d 08 00 00 3d 08 00 00 4d 08 00 00     9...-...=...M...
      6c:	5d 08 00 00 6d 08 00 00 7d 08 00 00 39 17 00 00     ]...m...}...9...
      7c:	39 17 00 00 39 17 00 00 8d 13 00 00 9d 13 00 00     9...9...........
      8c:	ad 13 00 00 bd 13 00 00 cd 13 00 00 39 17 00 00     ............9...
      9c:	39 17 00 00 39 17 00 00 39 17 00 00 39 17 00 00     9...9...9...9...
      ac:	39 17 00 00 00 00 00 00                             9.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00002a3c 	.word	0x00002a3c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00002a3c 	.word	0x00002a3c
     10c:	00002a3c 	.word	0x00002a3c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000010bd 	.word	0x000010bd
     140:	00001bad 	.word	0x00001bad
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	2000008c 	.word	0x2000008c
     1b8:	20000090 	.word	0x20000090
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	2000008c 	.word	0x2000008c
     1e8:	20000090 	.word	0x20000090
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	202a      	movs	r0, #42	; 0x2a
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	00d2      	lsls	r2, r2, #3
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

 	/* Set buttons as inputs */
	 pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
     pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
     port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	2002      	movs	r0, #2
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000429 	.word	0x00000429
     224:	40002880 	.word	0x40002880

00000228 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     228:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     22a:	2a00      	cmp	r2, #0
     22c:	d001      	beq.n	232 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     22e:	0018      	movs	r0, r3
     230:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     232:	008b      	lsls	r3, r1, #2
     234:	4a06      	ldr	r2, [pc, #24]	; (250 <extint_register_callback+0x28>)
     236:	589b      	ldr	r3, [r3, r2]
     238:	2b00      	cmp	r3, #0
     23a:	d003      	beq.n	244 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     23c:	4283      	cmp	r3, r0
     23e:	d005      	beq.n	24c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     240:	231d      	movs	r3, #29
     242:	e7f4      	b.n	22e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     244:	0089      	lsls	r1, r1, #2
     246:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     248:	2300      	movs	r3, #0
     24a:	e7f0      	b.n	22e <extint_register_callback+0x6>
		return STATUS_OK;
     24c:	2300      	movs	r3, #0
     24e:	e7ee      	b.n	22e <extint_register_callback+0x6>
     250:	2000012c 	.word	0x2000012c

00000254 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     254:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     256:	2900      	cmp	r1, #0
     258:	d001      	beq.n	25e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     25a:	0018      	movs	r0, r3
     25c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     25e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     260:	281f      	cmp	r0, #31
     262:	d800      	bhi.n	266 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     264:	4a02      	ldr	r2, [pc, #8]	; (270 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     266:	2301      	movs	r3, #1
     268:	4083      	lsls	r3, r0
     26a:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     26c:	2300      	movs	r3, #0
     26e:	e7f4      	b.n	25a <extint_chan_enable_callback+0x6>
     270:	40002400 	.word	0x40002400

00000274 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     274:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     276:	2200      	movs	r2, #0
     278:	4b10      	ldr	r3, [pc, #64]	; (2bc <EIC_Handler+0x48>)
     27a:	701a      	strb	r2, [r3, #0]
     27c:	2300      	movs	r3, #0
     27e:	4910      	ldr	r1, [pc, #64]	; (2c0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     280:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     282:	4e10      	ldr	r6, [pc, #64]	; (2c4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     284:	4c0d      	ldr	r4, [pc, #52]	; (2bc <EIC_Handler+0x48>)
     286:	e00a      	b.n	29e <EIC_Handler+0x2a>
		return eics[eic_index];
     288:	490d      	ldr	r1, [pc, #52]	; (2c0 <EIC_Handler+0x4c>)
     28a:	e008      	b.n	29e <EIC_Handler+0x2a>
     28c:	7823      	ldrb	r3, [r4, #0]
     28e:	3301      	adds	r3, #1
     290:	b2db      	uxtb	r3, r3
     292:	7023      	strb	r3, [r4, #0]
     294:	2b0f      	cmp	r3, #15
     296:	d810      	bhi.n	2ba <EIC_Handler+0x46>
		return NULL;
     298:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     29a:	2b1f      	cmp	r3, #31
     29c:	d9f4      	bls.n	288 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     29e:	0028      	movs	r0, r5
     2a0:	4018      	ands	r0, r3
     2a2:	2201      	movs	r2, #1
     2a4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     2a6:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     2a8:	4210      	tst	r0, r2
     2aa:	d0ef      	beq.n	28c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2ac:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2ae:	009b      	lsls	r3, r3, #2
     2b0:	599b      	ldr	r3, [r3, r6]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d0ea      	beq.n	28c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2b6:	4798      	blx	r3
     2b8:	e7e8      	b.n	28c <EIC_Handler+0x18>
			}
		}
	}
}
     2ba:	bd70      	pop	{r4, r5, r6, pc}
     2bc:	20000128 	.word	0x20000128
     2c0:	40002400 	.word	0x40002400
     2c4:	2000012c 	.word	0x2000012c

000002c8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     2c8:	4a06      	ldr	r2, [pc, #24]	; (2e4 <_extint_enable+0x1c>)
     2ca:	7813      	ldrb	r3, [r2, #0]
     2cc:	2102      	movs	r1, #2
     2ce:	430b      	orrs	r3, r1
     2d0:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2d2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2d4:	6853      	ldr	r3, [r2, #4]
     2d6:	4219      	tst	r1, r3
     2d8:	d1fc      	bne.n	2d4 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2da:	6853      	ldr	r3, [r2, #4]
     2dc:	4218      	tst	r0, r3
     2de:	d1f9      	bne.n	2d4 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2e0:	4770      	bx	lr
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	40002400 	.word	0x40002400

000002e8 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     2e8:	4a06      	ldr	r2, [pc, #24]	; (304 <_extint_disable+0x1c>)
     2ea:	7813      	ldrb	r3, [r2, #0]
     2ec:	2102      	movs	r1, #2
     2ee:	438b      	bics	r3, r1
     2f0:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2f2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2f4:	6853      	ldr	r3, [r2, #4]
     2f6:	4219      	tst	r1, r3
     2f8:	d1fc      	bne.n	2f4 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2fa:	6853      	ldr	r3, [r2, #4]
     2fc:	4218      	tst	r0, r3
     2fe:	d1f9      	bne.n	2f4 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     300:	4770      	bx	lr
     302:	46c0      	nop			; (mov r8, r8)
     304:	40002400 	.word	0x40002400

00000308 <_system_extint_init>:
{
     308:	b500      	push	{lr}
     30a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     30c:	4a17      	ldr	r2, [pc, #92]	; (36c <_system_extint_init+0x64>)
     30e:	6951      	ldr	r1, [r2, #20]
     310:	2380      	movs	r3, #128	; 0x80
     312:	009b      	lsls	r3, r3, #2
     314:	430b      	orrs	r3, r1
     316:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     318:	a901      	add	r1, sp, #4
     31a:	2300      	movs	r3, #0
     31c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     31e:	2003      	movs	r0, #3
     320:	4b13      	ldr	r3, [pc, #76]	; (370 <_system_extint_init+0x68>)
     322:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     324:	2003      	movs	r0, #3
     326:	4b13      	ldr	r3, [pc, #76]	; (374 <_system_extint_init+0x6c>)
     328:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     32a:	4a13      	ldr	r2, [pc, #76]	; (378 <_system_extint_init+0x70>)
     32c:	7813      	ldrb	r3, [r2, #0]
     32e:	2101      	movs	r1, #1
     330:	430b      	orrs	r3, r1
     332:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     334:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     336:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     338:	6853      	ldr	r3, [r2, #4]
     33a:	4219      	tst	r1, r3
     33c:	d1fc      	bne.n	338 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     33e:	6853      	ldr	r3, [r2, #4]
     340:	4218      	tst	r0, r3
     342:	d1f9      	bne.n	338 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     344:	4a0c      	ldr	r2, [pc, #48]	; (378 <_system_extint_init+0x70>)
     346:	7813      	ldrb	r3, [r2, #0]
     348:	2110      	movs	r1, #16
     34a:	438b      	bics	r3, r1
     34c:	7013      	strb	r3, [r2, #0]
     34e:	4b0b      	ldr	r3, [pc, #44]	; (37c <_system_extint_init+0x74>)
     350:	0019      	movs	r1, r3
     352:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     354:	2200      	movs	r2, #0
     356:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     358:	428b      	cmp	r3, r1
     35a:	d1fc      	bne.n	356 <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     35c:	2208      	movs	r2, #8
     35e:	4b08      	ldr	r3, [pc, #32]	; (380 <_system_extint_init+0x78>)
     360:	601a      	str	r2, [r3, #0]
	_extint_enable();
     362:	4b08      	ldr	r3, [pc, #32]	; (384 <_system_extint_init+0x7c>)
     364:	4798      	blx	r3
}
     366:	b003      	add	sp, #12
     368:	bd00      	pop	{pc}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	40000400 	.word	0x40000400
     370:	00001199 	.word	0x00001199
     374:	00001129 	.word	0x00001129
     378:	40002400 	.word	0x40002400
     37c:	2000012c 	.word	0x2000012c
     380:	e000e100 	.word	0xe000e100
     384:	000002c9 	.word	0x000002c9

00000388 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     388:	2300      	movs	r3, #0
     38a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     38c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     38e:	2201      	movs	r2, #1
     390:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     392:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     394:	3201      	adds	r2, #1
     396:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     398:	7243      	strb	r3, [r0, #9]
}
     39a:	4770      	bx	lr

0000039c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     39c:	b5f0      	push	{r4, r5, r6, r7, lr}
     39e:	b083      	sub	sp, #12
     3a0:	0005      	movs	r5, r0
     3a2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     3a4:	4b1c      	ldr	r3, [pc, #112]	; (418 <extint_chan_set_config+0x7c>)
     3a6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3a8:	a901      	add	r1, sp, #4
     3aa:	2300      	movs	r3, #0
     3ac:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3ae:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3b0:	7923      	ldrb	r3, [r4, #4]
     3b2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3b4:	7a23      	ldrb	r3, [r4, #8]
     3b6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3b8:	7820      	ldrb	r0, [r4, #0]
     3ba:	4b18      	ldr	r3, [pc, #96]	; (41c <extint_chan_set_config+0x80>)
     3bc:	4798      	blx	r3
		return NULL;
     3be:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     3c0:	2d1f      	cmp	r5, #31
     3c2:	d800      	bhi.n	3c6 <extint_chan_set_config+0x2a>
		return eics[eic_index];
     3c4:	4916      	ldr	r1, [pc, #88]	; (420 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3c6:	2207      	movs	r2, #7
     3c8:	402a      	ands	r2, r5
     3ca:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3cc:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3ce:	7aa3      	ldrb	r3, [r4, #10]
     3d0:	2b00      	cmp	r3, #0
     3d2:	d001      	beq.n	3d8 <extint_chan_set_config+0x3c>
     3d4:	2308      	movs	r3, #8
     3d6:	431f      	orrs	r7, r3
     3d8:	08eb      	lsrs	r3, r5, #3
     3da:	009b      	lsls	r3, r3, #2
     3dc:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3de:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3e0:	260f      	movs	r6, #15
     3e2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     3e4:	43b0      	bics	r0, r6
			(new_config << config_pos);
     3e6:	4097      	lsls	r7, r2
     3e8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3ea:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     3ec:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     3ee:	7a63      	ldrb	r3, [r4, #9]
     3f0:	2b00      	cmp	r3, #0
     3f2:	d10b      	bne.n	40c <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     3f4:	698a      	ldr	r2, [r1, #24]
     3f6:	2301      	movs	r3, #1
     3f8:	40ab      	lsls	r3, r5
     3fa:	43db      	mvns	r3, r3
     3fc:	041b      	lsls	r3, r3, #16
     3fe:	0c1b      	lsrs	r3, r3, #16
     400:	4013      	ands	r3, r2
     402:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     404:	4b07      	ldr	r3, [pc, #28]	; (424 <extint_chan_set_config+0x88>)
     406:	4798      	blx	r3
}
     408:	b003      	add	sp, #12
     40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     40c:	698a      	ldr	r2, [r1, #24]
     40e:	2301      	movs	r3, #1
     410:	40ab      	lsls	r3, r5
     412:	4313      	orrs	r3, r2
     414:	618b      	str	r3, [r1, #24]
     416:	e7f5      	b.n	404 <extint_chan_set_config+0x68>
     418:	000002e9 	.word	0x000002e9
     41c:	00001295 	.word	0x00001295
     420:	40002400 	.word	0x40002400
     424:	000002c9 	.word	0x000002c9

00000428 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     428:	b500      	push	{lr}
     42a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     42c:	ab01      	add	r3, sp, #4
     42e:	2280      	movs	r2, #128	; 0x80
     430:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     432:	780a      	ldrb	r2, [r1, #0]
     434:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     436:	784a      	ldrb	r2, [r1, #1]
     438:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     43a:	788a      	ldrb	r2, [r1, #2]
     43c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     43e:	0019      	movs	r1, r3
     440:	4b01      	ldr	r3, [pc, #4]	; (448 <port_pin_set_config+0x20>)
     442:	4798      	blx	r3
}
     444:	b003      	add	sp, #12
     446:	bd00      	pop	{pc}
     448:	00001295 	.word	0x00001295

0000044c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     44c:	b5f0      	push	{r4, r5, r6, r7, lr}
     44e:	46de      	mov	lr, fp
     450:	4657      	mov	r7, sl
     452:	464e      	mov	r6, r9
     454:	4645      	mov	r5, r8
     456:	b5e0      	push	{r5, r6, r7, lr}
     458:	b087      	sub	sp, #28
     45a:	4680      	mov	r8, r0
     45c:	9104      	str	r1, [sp, #16]
     45e:	0016      	movs	r6, r2
     460:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     462:	2200      	movs	r2, #0
     464:	2300      	movs	r3, #0
     466:	2100      	movs	r1, #0
     468:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     46a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     46c:	2001      	movs	r0, #1
     46e:	0021      	movs	r1, r4
     470:	9600      	str	r6, [sp, #0]
     472:	9701      	str	r7, [sp, #4]
     474:	465c      	mov	r4, fp
     476:	9403      	str	r4, [sp, #12]
     478:	4644      	mov	r4, r8
     47a:	9405      	str	r4, [sp, #20]
     47c:	e013      	b.n	4a6 <long_division+0x5a>
     47e:	2420      	movs	r4, #32
     480:	1a64      	subs	r4, r4, r1
     482:	0005      	movs	r5, r0
     484:	40e5      	lsrs	r5, r4
     486:	46a8      	mov	r8, r5
     488:	e014      	b.n	4b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     48a:	9c00      	ldr	r4, [sp, #0]
     48c:	9d01      	ldr	r5, [sp, #4]
     48e:	1b12      	subs	r2, r2, r4
     490:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     492:	465c      	mov	r4, fp
     494:	464d      	mov	r5, r9
     496:	432c      	orrs	r4, r5
     498:	46a3      	mov	fp, r4
     49a:	9c03      	ldr	r4, [sp, #12]
     49c:	4645      	mov	r5, r8
     49e:	432c      	orrs	r4, r5
     4a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     4a2:	3901      	subs	r1, #1
     4a4:	d325      	bcc.n	4f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     4a6:	2420      	movs	r4, #32
     4a8:	4264      	negs	r4, r4
     4aa:	190c      	adds	r4, r1, r4
     4ac:	d4e7      	bmi.n	47e <long_division+0x32>
     4ae:	0005      	movs	r5, r0
     4b0:	40a5      	lsls	r5, r4
     4b2:	46a8      	mov	r8, r5
     4b4:	0004      	movs	r4, r0
     4b6:	408c      	lsls	r4, r1
     4b8:	46a1      	mov	r9, r4
		r = r << 1;
     4ba:	1892      	adds	r2, r2, r2
     4bc:	415b      	adcs	r3, r3
     4be:	0014      	movs	r4, r2
     4c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     4c2:	9e05      	ldr	r6, [sp, #20]
     4c4:	464f      	mov	r7, r9
     4c6:	403e      	ands	r6, r7
     4c8:	46b4      	mov	ip, r6
     4ca:	9e04      	ldr	r6, [sp, #16]
     4cc:	4647      	mov	r7, r8
     4ce:	403e      	ands	r6, r7
     4d0:	46b2      	mov	sl, r6
     4d2:	4666      	mov	r6, ip
     4d4:	4657      	mov	r7, sl
     4d6:	433e      	orrs	r6, r7
     4d8:	d003      	beq.n	4e2 <long_division+0x96>
			r |= 0x01;
     4da:	0006      	movs	r6, r0
     4dc:	4326      	orrs	r6, r4
     4de:	0032      	movs	r2, r6
     4e0:	002b      	movs	r3, r5
		if (r >= d) {
     4e2:	9c00      	ldr	r4, [sp, #0]
     4e4:	9d01      	ldr	r5, [sp, #4]
     4e6:	429d      	cmp	r5, r3
     4e8:	d8db      	bhi.n	4a2 <long_division+0x56>
     4ea:	d1ce      	bne.n	48a <long_division+0x3e>
     4ec:	4294      	cmp	r4, r2
     4ee:	d8d8      	bhi.n	4a2 <long_division+0x56>
     4f0:	e7cb      	b.n	48a <long_division+0x3e>
     4f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     4f4:	4658      	mov	r0, fp
     4f6:	0019      	movs	r1, r3
     4f8:	b007      	add	sp, #28
     4fa:	bc3c      	pop	{r2, r3, r4, r5}
     4fc:	4690      	mov	r8, r2
     4fe:	4699      	mov	r9, r3
     500:	46a2      	mov	sl, r4
     502:	46ab      	mov	fp, r5
     504:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000506 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     506:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     508:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     50a:	2340      	movs	r3, #64	; 0x40
     50c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     50e:	4281      	cmp	r1, r0
     510:	d202      	bcs.n	518 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     512:	0018      	movs	r0, r3
     514:	bd10      	pop	{r4, pc}
		baud_calculated++;
     516:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     518:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     51a:	1c63      	adds	r3, r4, #1
     51c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     51e:	4288      	cmp	r0, r1
     520:	d9f9      	bls.n	516 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     522:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     524:	2cff      	cmp	r4, #255	; 0xff
     526:	d8f4      	bhi.n	512 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     528:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     52a:	2300      	movs	r3, #0
     52c:	e7f1      	b.n	512 <_sercom_get_sync_baud_val+0xc>
	...

00000530 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     530:	b5f0      	push	{r4, r5, r6, r7, lr}
     532:	b083      	sub	sp, #12
     534:	000f      	movs	r7, r1
     536:	0016      	movs	r6, r2
     538:	aa08      	add	r2, sp, #32
     53a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     53c:	0004      	movs	r4, r0
     53e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     540:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     542:	42bc      	cmp	r4, r7
     544:	d902      	bls.n	54c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     546:	0010      	movs	r0, r2
     548:	b003      	add	sp, #12
     54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     54c:	2b00      	cmp	r3, #0
     54e:	d114      	bne.n	57a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     550:	0002      	movs	r2, r0
     552:	0008      	movs	r0, r1
     554:	2100      	movs	r1, #0
     556:	4c19      	ldr	r4, [pc, #100]	; (5bc <_sercom_get_async_baud_val+0x8c>)
     558:	47a0      	blx	r4
     55a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     55c:	003a      	movs	r2, r7
     55e:	2300      	movs	r3, #0
     560:	2000      	movs	r0, #0
     562:	4c17      	ldr	r4, [pc, #92]	; (5c0 <_sercom_get_async_baud_val+0x90>)
     564:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     566:	2200      	movs	r2, #0
     568:	2301      	movs	r3, #1
     56a:	1a12      	subs	r2, r2, r0
     56c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     56e:	0c12      	lsrs	r2, r2, #16
     570:	041b      	lsls	r3, r3, #16
     572:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     574:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     576:	2200      	movs	r2, #0
     578:	e7e5      	b.n	546 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     57a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     57c:	2b01      	cmp	r3, #1
     57e:	d1f9      	bne.n	574 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     580:	000a      	movs	r2, r1
     582:	2300      	movs	r3, #0
     584:	2100      	movs	r1, #0
     586:	4c0d      	ldr	r4, [pc, #52]	; (5bc <_sercom_get_async_baud_val+0x8c>)
     588:	47a0      	blx	r4
     58a:	0002      	movs	r2, r0
     58c:	000b      	movs	r3, r1
     58e:	9200      	str	r2, [sp, #0]
     590:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     592:	0038      	movs	r0, r7
     594:	2100      	movs	r1, #0
     596:	4c0a      	ldr	r4, [pc, #40]	; (5c0 <_sercom_get_async_baud_val+0x90>)
     598:	47a0      	blx	r4
     59a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     59c:	2380      	movs	r3, #128	; 0x80
     59e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     5a2:	4298      	cmp	r0, r3
     5a4:	d8cf      	bhi.n	546 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     5a6:	0f79      	lsrs	r1, r7, #29
     5a8:	00f8      	lsls	r0, r7, #3
     5aa:	9a00      	ldr	r2, [sp, #0]
     5ac:	9b01      	ldr	r3, [sp, #4]
     5ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     5b0:	00ea      	lsls	r2, r5, #3
     5b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     5b4:	b2d2      	uxtb	r2, r2
     5b6:	0352      	lsls	r2, r2, #13
     5b8:	432a      	orrs	r2, r5
     5ba:	e7db      	b.n	574 <_sercom_get_async_baud_val+0x44>
     5bc:	00001cc5 	.word	0x00001cc5
     5c0:	0000044d 	.word	0x0000044d

000005c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     5c4:	b510      	push	{r4, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     5ca:	4b0e      	ldr	r3, [pc, #56]	; (604 <sercom_set_gclk_generator+0x40>)
     5cc:	781b      	ldrb	r3, [r3, #0]
     5ce:	2b00      	cmp	r3, #0
     5d0:	d007      	beq.n	5e2 <sercom_set_gclk_generator+0x1e>
     5d2:	2900      	cmp	r1, #0
     5d4:	d105      	bne.n	5e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     5d6:	4b0b      	ldr	r3, [pc, #44]	; (604 <sercom_set_gclk_generator+0x40>)
     5d8:	785b      	ldrb	r3, [r3, #1]
     5da:	4283      	cmp	r3, r0
     5dc:	d010      	beq.n	600 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     5de:	201d      	movs	r0, #29
     5e0:	e00c      	b.n	5fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     5e2:	a901      	add	r1, sp, #4
     5e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     5e6:	2011      	movs	r0, #17
     5e8:	4b07      	ldr	r3, [pc, #28]	; (608 <sercom_set_gclk_generator+0x44>)
     5ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     5ec:	2011      	movs	r0, #17
     5ee:	4b07      	ldr	r3, [pc, #28]	; (60c <sercom_set_gclk_generator+0x48>)
     5f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     5f2:	4b04      	ldr	r3, [pc, #16]	; (604 <sercom_set_gclk_generator+0x40>)
     5f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     5f6:	2201      	movs	r2, #1
     5f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     5fa:	2000      	movs	r0, #0
}
     5fc:	b002      	add	sp, #8
     5fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     600:	2000      	movs	r0, #0
     602:	e7fb      	b.n	5fc <sercom_set_gclk_generator+0x38>
     604:	20000094 	.word	0x20000094
     608:	00001199 	.word	0x00001199
     60c:	00001129 	.word	0x00001129

00000610 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     610:	4b40      	ldr	r3, [pc, #256]	; (714 <_sercom_get_default_pad+0x104>)
     612:	4298      	cmp	r0, r3
     614:	d032      	beq.n	67c <_sercom_get_default_pad+0x6c>
     616:	d90a      	bls.n	62e <_sercom_get_default_pad+0x1e>
     618:	4b3f      	ldr	r3, [pc, #252]	; (718 <_sercom_get_default_pad+0x108>)
     61a:	4298      	cmp	r0, r3
     61c:	d04e      	beq.n	6bc <_sercom_get_default_pad+0xac>
     61e:	4b3f      	ldr	r3, [pc, #252]	; (71c <_sercom_get_default_pad+0x10c>)
     620:	4298      	cmp	r0, r3
     622:	d05b      	beq.n	6dc <_sercom_get_default_pad+0xcc>
     624:	4b3e      	ldr	r3, [pc, #248]	; (720 <_sercom_get_default_pad+0x110>)
     626:	4298      	cmp	r0, r3
     628:	d038      	beq.n	69c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     62a:	2000      	movs	r0, #0
}
     62c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     62e:	2384      	movs	r3, #132	; 0x84
     630:	05db      	lsls	r3, r3, #23
     632:	4298      	cmp	r0, r3
     634:	d00c      	beq.n	650 <_sercom_get_default_pad+0x40>
     636:	4b3b      	ldr	r3, [pc, #236]	; (724 <_sercom_get_default_pad+0x114>)
     638:	4298      	cmp	r0, r3
     63a:	d1f6      	bne.n	62a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     63c:	2901      	cmp	r1, #1
     63e:	d017      	beq.n	670 <_sercom_get_default_pad+0x60>
     640:	2900      	cmp	r1, #0
     642:	d05d      	beq.n	700 <_sercom_get_default_pad+0xf0>
     644:	2902      	cmp	r1, #2
     646:	d015      	beq.n	674 <_sercom_get_default_pad+0x64>
     648:	2903      	cmp	r1, #3
     64a:	d015      	beq.n	678 <_sercom_get_default_pad+0x68>
	return 0;
     64c:	2000      	movs	r0, #0
     64e:	e7ed      	b.n	62c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     650:	2901      	cmp	r1, #1
     652:	d007      	beq.n	664 <_sercom_get_default_pad+0x54>
     654:	2900      	cmp	r1, #0
     656:	d051      	beq.n	6fc <_sercom_get_default_pad+0xec>
     658:	2902      	cmp	r1, #2
     65a:	d005      	beq.n	668 <_sercom_get_default_pad+0x58>
     65c:	2903      	cmp	r1, #3
     65e:	d005      	beq.n	66c <_sercom_get_default_pad+0x5c>
	return 0;
     660:	2000      	movs	r0, #0
     662:	e7e3      	b.n	62c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     664:	4830      	ldr	r0, [pc, #192]	; (728 <_sercom_get_default_pad+0x118>)
     666:	e7e1      	b.n	62c <_sercom_get_default_pad+0x1c>
     668:	4830      	ldr	r0, [pc, #192]	; (72c <_sercom_get_default_pad+0x11c>)
     66a:	e7df      	b.n	62c <_sercom_get_default_pad+0x1c>
     66c:	4830      	ldr	r0, [pc, #192]	; (730 <_sercom_get_default_pad+0x120>)
     66e:	e7dd      	b.n	62c <_sercom_get_default_pad+0x1c>
     670:	4830      	ldr	r0, [pc, #192]	; (734 <_sercom_get_default_pad+0x124>)
     672:	e7db      	b.n	62c <_sercom_get_default_pad+0x1c>
     674:	4830      	ldr	r0, [pc, #192]	; (738 <_sercom_get_default_pad+0x128>)
     676:	e7d9      	b.n	62c <_sercom_get_default_pad+0x1c>
     678:	4830      	ldr	r0, [pc, #192]	; (73c <_sercom_get_default_pad+0x12c>)
     67a:	e7d7      	b.n	62c <_sercom_get_default_pad+0x1c>
     67c:	2901      	cmp	r1, #1
     67e:	d007      	beq.n	690 <_sercom_get_default_pad+0x80>
     680:	2900      	cmp	r1, #0
     682:	d03f      	beq.n	704 <_sercom_get_default_pad+0xf4>
     684:	2902      	cmp	r1, #2
     686:	d005      	beq.n	694 <_sercom_get_default_pad+0x84>
     688:	2903      	cmp	r1, #3
     68a:	d005      	beq.n	698 <_sercom_get_default_pad+0x88>
	return 0;
     68c:	2000      	movs	r0, #0
     68e:	e7cd      	b.n	62c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     690:	482b      	ldr	r0, [pc, #172]	; (740 <_sercom_get_default_pad+0x130>)
     692:	e7cb      	b.n	62c <_sercom_get_default_pad+0x1c>
     694:	482b      	ldr	r0, [pc, #172]	; (744 <_sercom_get_default_pad+0x134>)
     696:	e7c9      	b.n	62c <_sercom_get_default_pad+0x1c>
     698:	482b      	ldr	r0, [pc, #172]	; (748 <_sercom_get_default_pad+0x138>)
     69a:	e7c7      	b.n	62c <_sercom_get_default_pad+0x1c>
     69c:	2901      	cmp	r1, #1
     69e:	d007      	beq.n	6b0 <_sercom_get_default_pad+0xa0>
     6a0:	2900      	cmp	r1, #0
     6a2:	d031      	beq.n	708 <_sercom_get_default_pad+0xf8>
     6a4:	2902      	cmp	r1, #2
     6a6:	d005      	beq.n	6b4 <_sercom_get_default_pad+0xa4>
     6a8:	2903      	cmp	r1, #3
     6aa:	d005      	beq.n	6b8 <_sercom_get_default_pad+0xa8>
	return 0;
     6ac:	2000      	movs	r0, #0
     6ae:	e7bd      	b.n	62c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6b0:	4826      	ldr	r0, [pc, #152]	; (74c <_sercom_get_default_pad+0x13c>)
     6b2:	e7bb      	b.n	62c <_sercom_get_default_pad+0x1c>
     6b4:	4826      	ldr	r0, [pc, #152]	; (750 <_sercom_get_default_pad+0x140>)
     6b6:	e7b9      	b.n	62c <_sercom_get_default_pad+0x1c>
     6b8:	4826      	ldr	r0, [pc, #152]	; (754 <_sercom_get_default_pad+0x144>)
     6ba:	e7b7      	b.n	62c <_sercom_get_default_pad+0x1c>
     6bc:	2901      	cmp	r1, #1
     6be:	d007      	beq.n	6d0 <_sercom_get_default_pad+0xc0>
     6c0:	2900      	cmp	r1, #0
     6c2:	d023      	beq.n	70c <_sercom_get_default_pad+0xfc>
     6c4:	2902      	cmp	r1, #2
     6c6:	d005      	beq.n	6d4 <_sercom_get_default_pad+0xc4>
     6c8:	2903      	cmp	r1, #3
     6ca:	d005      	beq.n	6d8 <_sercom_get_default_pad+0xc8>
	return 0;
     6cc:	2000      	movs	r0, #0
     6ce:	e7ad      	b.n	62c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d0:	4821      	ldr	r0, [pc, #132]	; (758 <_sercom_get_default_pad+0x148>)
     6d2:	e7ab      	b.n	62c <_sercom_get_default_pad+0x1c>
     6d4:	4821      	ldr	r0, [pc, #132]	; (75c <_sercom_get_default_pad+0x14c>)
     6d6:	e7a9      	b.n	62c <_sercom_get_default_pad+0x1c>
     6d8:	4821      	ldr	r0, [pc, #132]	; (760 <_sercom_get_default_pad+0x150>)
     6da:	e7a7      	b.n	62c <_sercom_get_default_pad+0x1c>
     6dc:	2901      	cmp	r1, #1
     6de:	d007      	beq.n	6f0 <_sercom_get_default_pad+0xe0>
     6e0:	2900      	cmp	r1, #0
     6e2:	d015      	beq.n	710 <_sercom_get_default_pad+0x100>
     6e4:	2902      	cmp	r1, #2
     6e6:	d005      	beq.n	6f4 <_sercom_get_default_pad+0xe4>
     6e8:	2903      	cmp	r1, #3
     6ea:	d005      	beq.n	6f8 <_sercom_get_default_pad+0xe8>
	return 0;
     6ec:	2000      	movs	r0, #0
     6ee:	e79d      	b.n	62c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6f0:	481c      	ldr	r0, [pc, #112]	; (764 <_sercom_get_default_pad+0x154>)
     6f2:	e79b      	b.n	62c <_sercom_get_default_pad+0x1c>
     6f4:	481c      	ldr	r0, [pc, #112]	; (768 <_sercom_get_default_pad+0x158>)
     6f6:	e799      	b.n	62c <_sercom_get_default_pad+0x1c>
     6f8:	481c      	ldr	r0, [pc, #112]	; (76c <_sercom_get_default_pad+0x15c>)
     6fa:	e797      	b.n	62c <_sercom_get_default_pad+0x1c>
     6fc:	481c      	ldr	r0, [pc, #112]	; (770 <_sercom_get_default_pad+0x160>)
     6fe:	e795      	b.n	62c <_sercom_get_default_pad+0x1c>
     700:	2003      	movs	r0, #3
     702:	e793      	b.n	62c <_sercom_get_default_pad+0x1c>
     704:	481b      	ldr	r0, [pc, #108]	; (774 <_sercom_get_default_pad+0x164>)
     706:	e791      	b.n	62c <_sercom_get_default_pad+0x1c>
     708:	481b      	ldr	r0, [pc, #108]	; (778 <_sercom_get_default_pad+0x168>)
     70a:	e78f      	b.n	62c <_sercom_get_default_pad+0x1c>
     70c:	481b      	ldr	r0, [pc, #108]	; (77c <_sercom_get_default_pad+0x16c>)
     70e:	e78d      	b.n	62c <_sercom_get_default_pad+0x1c>
     710:	481b      	ldr	r0, [pc, #108]	; (780 <_sercom_get_default_pad+0x170>)
     712:	e78b      	b.n	62c <_sercom_get_default_pad+0x1c>
     714:	42000800 	.word	0x42000800
     718:	42001000 	.word	0x42001000
     71c:	43000400 	.word	0x43000400
     720:	42000c00 	.word	0x42000c00
     724:	42000400 	.word	0x42000400
     728:	00050003 	.word	0x00050003
     72c:	00060003 	.word	0x00060003
     730:	00070003 	.word	0x00070003
     734:	00010003 	.word	0x00010003
     738:	001e0003 	.word	0x001e0003
     73c:	001f0003 	.word	0x001f0003
     740:	00090003 	.word	0x00090003
     744:	000a0003 	.word	0x000a0003
     748:	000b0003 	.word	0x000b0003
     74c:	00110003 	.word	0x00110003
     750:	00120003 	.word	0x00120003
     754:	00130003 	.word	0x00130003
     758:	000d0003 	.word	0x000d0003
     75c:	000e0003 	.word	0x000e0003
     760:	000f0003 	.word	0x000f0003
     764:	00170003 	.word	0x00170003
     768:	00180003 	.word	0x00180003
     76c:	00190003 	.word	0x00190003
     770:	00040003 	.word	0x00040003
     774:	00080003 	.word	0x00080003
     778:	00100003 	.word	0x00100003
     77c:	000c0003 	.word	0x000c0003
     780:	00160003 	.word	0x00160003

00000784 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     784:	b530      	push	{r4, r5, lr}
     786:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     788:	4b0b      	ldr	r3, [pc, #44]	; (7b8 <_sercom_get_sercom_inst_index+0x34>)
     78a:	466a      	mov	r2, sp
     78c:	cb32      	ldmia	r3!, {r1, r4, r5}
     78e:	c232      	stmia	r2!, {r1, r4, r5}
     790:	cb32      	ldmia	r3!, {r1, r4, r5}
     792:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     794:	9b00      	ldr	r3, [sp, #0]
     796:	4283      	cmp	r3, r0
     798:	d00b      	beq.n	7b2 <_sercom_get_sercom_inst_index+0x2e>
     79a:	2301      	movs	r3, #1
     79c:	009a      	lsls	r2, r3, #2
     79e:	4669      	mov	r1, sp
     7a0:	5852      	ldr	r2, [r2, r1]
     7a2:	4282      	cmp	r2, r0
     7a4:	d006      	beq.n	7b4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7a6:	3301      	adds	r3, #1
     7a8:	2b06      	cmp	r3, #6
     7aa:	d1f7      	bne.n	79c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     7ac:	2000      	movs	r0, #0
}
     7ae:	b007      	add	sp, #28
     7b0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7b2:	2300      	movs	r3, #0
			return i;
     7b4:	b2d8      	uxtb	r0, r3
     7b6:	e7fa      	b.n	7ae <_sercom_get_sercom_inst_index+0x2a>
     7b8:	00002844 	.word	0x00002844

000007bc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     7bc:	4770      	bx	lr
	...

000007c0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     7c2:	4b0a      	ldr	r3, [pc, #40]	; (7ec <_sercom_set_handler+0x2c>)
     7c4:	781b      	ldrb	r3, [r3, #0]
     7c6:	2b00      	cmp	r3, #0
     7c8:	d10c      	bne.n	7e4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     7ca:	4f09      	ldr	r7, [pc, #36]	; (7f0 <_sercom_set_handler+0x30>)
     7cc:	4e09      	ldr	r6, [pc, #36]	; (7f4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     7ce:	4d0a      	ldr	r5, [pc, #40]	; (7f8 <_sercom_set_handler+0x38>)
     7d0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     7d2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     7d4:	195a      	adds	r2, r3, r5
     7d6:	6014      	str	r4, [r2, #0]
     7d8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7da:	2b18      	cmp	r3, #24
     7dc:	d1f9      	bne.n	7d2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     7de:	2201      	movs	r2, #1
     7e0:	4b02      	ldr	r3, [pc, #8]	; (7ec <_sercom_set_handler+0x2c>)
     7e2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     7e4:	0080      	lsls	r0, r0, #2
     7e6:	4b02      	ldr	r3, [pc, #8]	; (7f0 <_sercom_set_handler+0x30>)
     7e8:	50c1      	str	r1, [r0, r3]
}
     7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7ec:	20000096 	.word	0x20000096
     7f0:	20000098 	.word	0x20000098
     7f4:	000007bd 	.word	0x000007bd
     7f8:	2000016c 	.word	0x2000016c

000007fc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     7fc:	b500      	push	{lr}
     7fe:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     800:	2308      	movs	r3, #8
     802:	466a      	mov	r2, sp
     804:	7013      	strb	r3, [r2, #0]
     806:	3301      	adds	r3, #1
     808:	7053      	strb	r3, [r2, #1]
     80a:	3301      	adds	r3, #1
     80c:	7093      	strb	r3, [r2, #2]
     80e:	3301      	adds	r3, #1
     810:	70d3      	strb	r3, [r2, #3]
     812:	3301      	adds	r3, #1
     814:	7113      	strb	r3, [r2, #4]
     816:	3301      	adds	r3, #1
     818:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     81a:	4b03      	ldr	r3, [pc, #12]	; (828 <_sercom_get_interrupt_vector+0x2c>)
     81c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     81e:	466b      	mov	r3, sp
     820:	5618      	ldrsb	r0, [r3, r0]
}
     822:	b003      	add	sp, #12
     824:	bd00      	pop	{pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	00000785 	.word	0x00000785

0000082c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     82c:	b510      	push	{r4, lr}
     82e:	4b02      	ldr	r3, [pc, #8]	; (838 <SERCOM0_Handler+0xc>)
     830:	681b      	ldr	r3, [r3, #0]
     832:	2000      	movs	r0, #0
     834:	4798      	blx	r3
     836:	bd10      	pop	{r4, pc}
     838:	20000098 	.word	0x20000098

0000083c <SERCOM1_Handler>:
     83c:	b510      	push	{r4, lr}
     83e:	4b02      	ldr	r3, [pc, #8]	; (848 <SERCOM1_Handler+0xc>)
     840:	685b      	ldr	r3, [r3, #4]
     842:	2001      	movs	r0, #1
     844:	4798      	blx	r3
     846:	bd10      	pop	{r4, pc}
     848:	20000098 	.word	0x20000098

0000084c <SERCOM2_Handler>:
     84c:	b510      	push	{r4, lr}
     84e:	4b02      	ldr	r3, [pc, #8]	; (858 <SERCOM2_Handler+0xc>)
     850:	689b      	ldr	r3, [r3, #8]
     852:	2002      	movs	r0, #2
     854:	4798      	blx	r3
     856:	bd10      	pop	{r4, pc}
     858:	20000098 	.word	0x20000098

0000085c <SERCOM3_Handler>:
     85c:	b510      	push	{r4, lr}
     85e:	4b02      	ldr	r3, [pc, #8]	; (868 <SERCOM3_Handler+0xc>)
     860:	68db      	ldr	r3, [r3, #12]
     862:	2003      	movs	r0, #3
     864:	4798      	blx	r3
     866:	bd10      	pop	{r4, pc}
     868:	20000098 	.word	0x20000098

0000086c <SERCOM4_Handler>:
     86c:	b510      	push	{r4, lr}
     86e:	4b02      	ldr	r3, [pc, #8]	; (878 <SERCOM4_Handler+0xc>)
     870:	691b      	ldr	r3, [r3, #16]
     872:	2004      	movs	r0, #4
     874:	4798      	blx	r3
     876:	bd10      	pop	{r4, pc}
     878:	20000098 	.word	0x20000098

0000087c <SERCOM5_Handler>:
     87c:	b510      	push	{r4, lr}
     87e:	4b02      	ldr	r3, [pc, #8]	; (888 <SERCOM5_Handler+0xc>)
     880:	695b      	ldr	r3, [r3, #20]
     882:	2005      	movs	r0, #5
     884:	4798      	blx	r3
     886:	bd10      	pop	{r4, pc}
     888:	20000098 	.word	0x20000098

0000088c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
     88e:	46de      	mov	lr, fp
     890:	4657      	mov	r7, sl
     892:	464e      	mov	r6, r9
     894:	4645      	mov	r5, r8
     896:	b5e0      	push	{r5, r6, r7, lr}
     898:	b091      	sub	sp, #68	; 0x44
     89a:	0005      	movs	r5, r0
     89c:	000c      	movs	r4, r1
     89e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     8a0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8a2:	0008      	movs	r0, r1
     8a4:	4bc4      	ldr	r3, [pc, #784]	; (bb8 <usart_init+0x32c>)
     8a6:	4798      	blx	r3
     8a8:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
     8aa:	2805      	cmp	r0, #5
     8ac:	d00d      	beq.n	8ca <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8ae:	0007      	movs	r7, r0
     8b0:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     8b2:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     8b4:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     8b6:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     8b8:	07c9      	lsls	r1, r1, #31
     8ba:	d509      	bpl.n	8d0 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     8bc:	b011      	add	sp, #68	; 0x44
     8be:	bc3c      	pop	{r2, r3, r4, r5}
     8c0:	4690      	mov	r8, r2
     8c2:	4699      	mov	r9, r3
     8c4:	46a2      	mov	sl, r4
     8c6:	46ab      	mov	fp, r5
     8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     8ca:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     8cc:	2301      	movs	r3, #1
     8ce:	e7f1      	b.n	8b4 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     8d0:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
     8d2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     8d4:	0789      	lsls	r1, r1, #30
     8d6:	d4f1      	bmi.n	8bc <usart_init+0x30>
	if (sercom_index == 5) {
     8d8:	2a05      	cmp	r2, #5
     8da:	d049      	beq.n	970 <usart_init+0xe4>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     8dc:	49b7      	ldr	r1, [pc, #732]	; (bbc <usart_init+0x330>)
     8de:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
     8e0:	2201      	movs	r2, #1
     8e2:	409a      	lsls	r2, r3
     8e4:	0013      	movs	r3, r2
     8e6:	4303      	orrs	r3, r0
     8e8:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     8ea:	a90f      	add	r1, sp, #60	; 0x3c
     8ec:	232d      	movs	r3, #45	; 0x2d
     8ee:	4698      	mov	r8, r3
     8f0:	5cf3      	ldrb	r3, [r6, r3]
     8f2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     8f4:	b2ff      	uxtb	r7, r7
     8f6:	0038      	movs	r0, r7
     8f8:	4bb1      	ldr	r3, [pc, #708]	; (bc0 <usart_init+0x334>)
     8fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     8fc:	0038      	movs	r0, r7
     8fe:	4bb1      	ldr	r3, [pc, #708]	; (bc4 <usart_init+0x338>)
     900:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     902:	4643      	mov	r3, r8
     904:	5cf0      	ldrb	r0, [r6, r3]
     906:	2100      	movs	r1, #0
     908:	4baf      	ldr	r3, [pc, #700]	; (bc8 <usart_init+0x33c>)
     90a:	4798      	blx	r3
	module->character_size = config->character_size;
     90c:	7af3      	ldrb	r3, [r6, #11]
     90e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     910:	2324      	movs	r3, #36	; 0x24
     912:	5cf3      	ldrb	r3, [r6, r3]
     914:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     916:	2325      	movs	r3, #37	; 0x25
     918:	5cf3      	ldrb	r3, [r6, r3]
     91a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     91c:	7ef3      	ldrb	r3, [r6, #27]
     91e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     920:	7f33      	ldrb	r3, [r6, #28]
     922:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     924:	682b      	ldr	r3, [r5, #0]
     926:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     928:	0018      	movs	r0, r3
     92a:	4ba3      	ldr	r3, [pc, #652]	; (bb8 <usart_init+0x32c>)
     92c:	4798      	blx	r3
	if (sercom_index == 5) {
     92e:	2805      	cmp	r0, #5
     930:	d026      	beq.n	980 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     932:	3012      	adds	r0, #18
	uint16_t baud  = 0;
     934:	2200      	movs	r2, #0
     936:	230e      	movs	r3, #14
     938:	a906      	add	r1, sp, #24
     93a:	468c      	mov	ip, r1
     93c:	4463      	add	r3, ip
     93e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     940:	8a32      	ldrh	r2, [r6, #16]
     942:	9202      	str	r2, [sp, #8]
     944:	2380      	movs	r3, #128	; 0x80
     946:	01db      	lsls	r3, r3, #7
     948:	429a      	cmp	r2, r3
     94a:	d100      	bne.n	94e <usart_init+0xc2>
     94c:	e0a7      	b.n	a9e <usart_init+0x212>
     94e:	d919      	bls.n	984 <usart_init+0xf8>
     950:	23c0      	movs	r3, #192	; 0xc0
     952:	01db      	lsls	r3, r3, #7
     954:	9a02      	ldr	r2, [sp, #8]
     956:	429a      	cmp	r2, r3
     958:	d100      	bne.n	95c <usart_init+0xd0>
     95a:	e09b      	b.n	a94 <usart_init+0x208>
     95c:	2380      	movs	r3, #128	; 0x80
     95e:	021b      	lsls	r3, r3, #8
     960:	429a      	cmp	r2, r3
     962:	d000      	beq.n	966 <usart_init+0xda>
     964:	e123      	b.n	bae <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     966:	2303      	movs	r3, #3
     968:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     96a:	2300      	movs	r3, #0
     96c:	9307      	str	r3, [sp, #28]
     96e:	e012      	b.n	996 <usart_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     970:	4992      	ldr	r1, [pc, #584]	; (bbc <usart_init+0x330>)
     972:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
     974:	3a04      	subs	r2, #4
     976:	409a      	lsls	r2, r3
     978:	0013      	movs	r3, r2
     97a:	4303      	orrs	r3, r0
     97c:	620b      	str	r3, [r1, #32]
     97e:	e7b4      	b.n	8ea <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     980:	2018      	movs	r0, #24
     982:	e7d7      	b.n	934 <usart_init+0xa8>
	switch (config->sample_rate) {
     984:	2380      	movs	r3, #128	; 0x80
     986:	019b      	lsls	r3, r3, #6
     988:	429a      	cmp	r2, r3
     98a:	d000      	beq.n	98e <usart_init+0x102>
     98c:	e10f      	b.n	bae <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     98e:	2310      	movs	r3, #16
     990:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     992:	3b0f      	subs	r3, #15
     994:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     996:	6833      	ldr	r3, [r6, #0]
     998:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     99a:	68f3      	ldr	r3, [r6, #12]
     99c:	469b      	mov	fp, r3
		config->sample_adjustment |
     99e:	6973      	ldr	r3, [r6, #20]
     9a0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9a2:	7e33      	ldrb	r3, [r6, #24]
     9a4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9a6:	2326      	movs	r3, #38	; 0x26
     9a8:	5cf3      	ldrb	r3, [r6, r3]
     9aa:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     9ac:	6873      	ldr	r3, [r6, #4]
     9ae:	4699      	mov	r9, r3
	switch (transfer_mode)
     9b0:	2b00      	cmp	r3, #0
     9b2:	d100      	bne.n	9b6 <usart_init+0x12a>
     9b4:	e09b      	b.n	aee <usart_init+0x262>
     9b6:	2380      	movs	r3, #128	; 0x80
     9b8:	055b      	lsls	r3, r3, #21
     9ba:	4599      	cmp	r9, r3
     9bc:	d104      	bne.n	9c8 <usart_init+0x13c>
			if (!config->use_external_clock) {
     9be:	2327      	movs	r3, #39	; 0x27
     9c0:	5cf3      	ldrb	r3, [r6, r3]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d100      	bne.n	9c8 <usart_init+0x13c>
     9c6:	e080      	b.n	aca <usart_init+0x23e>
	if(config->encoding_format_enable) {
     9c8:	7e73      	ldrb	r3, [r6, #25]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d002      	beq.n	9d4 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     9ce:	7eb3      	ldrb	r3, [r6, #26]
     9d0:	4642      	mov	r2, r8
     9d2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     9d4:	230e      	movs	r3, #14
     9d6:	aa06      	add	r2, sp, #24
     9d8:	4694      	mov	ip, r2
     9da:	4463      	add	r3, ip
     9dc:	881b      	ldrh	r3, [r3, #0]
     9de:	4642      	mov	r2, r8
     9e0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     9e2:	9b05      	ldr	r3, [sp, #20]
     9e4:	465a      	mov	r2, fp
     9e6:	4313      	orrs	r3, r2
     9e8:	9a03      	ldr	r2, [sp, #12]
     9ea:	4313      	orrs	r3, r2
     9ec:	464a      	mov	r2, r9
     9ee:	4313      	orrs	r3, r2
     9f0:	9f02      	ldr	r7, [sp, #8]
     9f2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9f4:	9b04      	ldr	r3, [sp, #16]
     9f6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     9f8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9fa:	4653      	mov	r3, sl
     9fc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     9fe:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     a00:	2327      	movs	r3, #39	; 0x27
     a02:	5cf3      	ldrb	r3, [r6, r3]
     a04:	2b00      	cmp	r3, #0
     a06:	d101      	bne.n	a0c <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     a08:	3304      	adds	r3, #4
     a0a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     a0c:	7e73      	ldrb	r3, [r6, #25]
     a0e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     a10:	7f32      	ldrb	r2, [r6, #28]
     a12:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     a14:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     a16:	7f72      	ldrb	r2, [r6, #29]
     a18:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     a1a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a1c:	2224      	movs	r2, #36	; 0x24
     a1e:	5cb2      	ldrb	r2, [r6, r2]
     a20:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     a22:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     a24:	2225      	movs	r2, #37	; 0x25
     a26:	5cb2      	ldrb	r2, [r6, r2]
     a28:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a2a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     a2c:	7ab1      	ldrb	r1, [r6, #10]
     a2e:	7af2      	ldrb	r2, [r6, #11]
     a30:	4311      	orrs	r1, r2
     a32:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     a34:	8933      	ldrh	r3, [r6, #8]
     a36:	2bff      	cmp	r3, #255	; 0xff
     a38:	d07d      	beq.n	b36 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     a3a:	2280      	movs	r2, #128	; 0x80
     a3c:	0452      	lsls	r2, r2, #17
     a3e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     a40:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     a42:	232c      	movs	r3, #44	; 0x2c
     a44:	5cf3      	ldrb	r3, [r6, r3]
     a46:	2b00      	cmp	r3, #0
     a48:	d103      	bne.n	a52 <usart_init+0x1c6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a4a:	4b60      	ldr	r3, [pc, #384]	; (bcc <usart_init+0x340>)
     a4c:	789b      	ldrb	r3, [r3, #2]
     a4e:	079b      	lsls	r3, r3, #30
     a50:	d501      	bpl.n	a56 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a52:	2380      	movs	r3, #128	; 0x80
     a54:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a56:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a58:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a5a:	2b00      	cmp	r3, #0
     a5c:	d1fc      	bne.n	a58 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
     a5e:	4643      	mov	r3, r8
     a60:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a62:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a64:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     a66:	2b00      	cmp	r3, #0
     a68:	d1fc      	bne.n	a64 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
     a6a:	4643      	mov	r3, r8
     a6c:	601f      	str	r7, [r3, #0]
     a6e:	ab0e      	add	r3, sp, #56	; 0x38
     a70:	2280      	movs	r2, #128	; 0x80
     a72:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a74:	2200      	movs	r2, #0
     a76:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     a78:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a7a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a7c:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a7e:	930a      	str	r3, [sp, #40]	; 0x28
     a80:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a82:	930b      	str	r3, [sp, #44]	; 0x2c
     a84:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     a86:	930c      	str	r3, [sp, #48]	; 0x30
     a88:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     a8a:	9302      	str	r3, [sp, #8]
     a8c:	930d      	str	r3, [sp, #52]	; 0x34
     a8e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a90:	ae0a      	add	r6, sp, #40	; 0x28
     a92:	e05e      	b.n	b52 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a94:	2308      	movs	r3, #8
     a96:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a98:	3b07      	subs	r3, #7
     a9a:	9307      	str	r3, [sp, #28]
     a9c:	e77b      	b.n	996 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
     a9e:	6833      	ldr	r3, [r6, #0]
     aa0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     aa2:	68f3      	ldr	r3, [r6, #12]
     aa4:	469b      	mov	fp, r3
		config->sample_adjustment |
     aa6:	6973      	ldr	r3, [r6, #20]
     aa8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     aaa:	7e33      	ldrb	r3, [r6, #24]
     aac:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     aae:	2326      	movs	r3, #38	; 0x26
     ab0:	5cf3      	ldrb	r3, [r6, r3]
     ab2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     ab4:	6873      	ldr	r3, [r6, #4]
     ab6:	4699      	mov	r9, r3
	switch (transfer_mode)
     ab8:	2b00      	cmp	r3, #0
     aba:	d014      	beq.n	ae6 <usart_init+0x25a>
     abc:	2380      	movs	r3, #128	; 0x80
     abe:	055b      	lsls	r3, r3, #21
     ac0:	4599      	cmp	r9, r3
     ac2:	d100      	bne.n	ac6 <usart_init+0x23a>
     ac4:	e77b      	b.n	9be <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
     ac6:	2000      	movs	r0, #0
     ac8:	e020      	b.n	b0c <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     aca:	6a33      	ldr	r3, [r6, #32]
     acc:	001f      	movs	r7, r3
     ace:	b2c0      	uxtb	r0, r0
     ad0:	4b3f      	ldr	r3, [pc, #252]	; (bd0 <usart_init+0x344>)
     ad2:	4798      	blx	r3
     ad4:	0001      	movs	r1, r0
     ad6:	220e      	movs	r2, #14
     ad8:	ab06      	add	r3, sp, #24
     ada:	469c      	mov	ip, r3
     adc:	4462      	add	r2, ip
     ade:	0038      	movs	r0, r7
     ae0:	4b3c      	ldr	r3, [pc, #240]	; (bd4 <usart_init+0x348>)
     ae2:	4798      	blx	r3
     ae4:	e012      	b.n	b0c <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ae6:	2308      	movs	r3, #8
     ae8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     aea:	2300      	movs	r3, #0
     aec:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     aee:	2327      	movs	r3, #39	; 0x27
     af0:	5cf3      	ldrb	r3, [r6, r3]
     af2:	2b00      	cmp	r3, #0
     af4:	d00e      	beq.n	b14 <usart_init+0x288>
				status_code =
     af6:	9b06      	ldr	r3, [sp, #24]
     af8:	9300      	str	r3, [sp, #0]
     afa:	9b07      	ldr	r3, [sp, #28]
     afc:	220e      	movs	r2, #14
     afe:	a906      	add	r1, sp, #24
     b00:	468c      	mov	ip, r1
     b02:	4462      	add	r2, ip
     b04:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     b06:	6a30      	ldr	r0, [r6, #32]
     b08:	4f33      	ldr	r7, [pc, #204]	; (bd8 <usart_init+0x34c>)
     b0a:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     b0c:	2800      	cmp	r0, #0
     b0e:	d000      	beq.n	b12 <usart_init+0x286>
     b10:	e6d4      	b.n	8bc <usart_init+0x30>
     b12:	e759      	b.n	9c8 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
     b14:	6a33      	ldr	r3, [r6, #32]
     b16:	001f      	movs	r7, r3
     b18:	b2c0      	uxtb	r0, r0
     b1a:	4b2d      	ldr	r3, [pc, #180]	; (bd0 <usart_init+0x344>)
     b1c:	4798      	blx	r3
     b1e:	0001      	movs	r1, r0
				status_code =
     b20:	9b06      	ldr	r3, [sp, #24]
     b22:	9300      	str	r3, [sp, #0]
     b24:	9b07      	ldr	r3, [sp, #28]
     b26:	220e      	movs	r2, #14
     b28:	a806      	add	r0, sp, #24
     b2a:	4684      	mov	ip, r0
     b2c:	4462      	add	r2, ip
     b2e:	0038      	movs	r0, r7
     b30:	4f29      	ldr	r7, [pc, #164]	; (bd8 <usart_init+0x34c>)
     b32:	47b8      	blx	r7
     b34:	e7ea      	b.n	b0c <usart_init+0x280>
		if(config->lin_slave_enable) {
     b36:	7ef3      	ldrb	r3, [r6, #27]
     b38:	2b00      	cmp	r3, #0
     b3a:	d082      	beq.n	a42 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     b3c:	2380      	movs	r3, #128	; 0x80
     b3e:	04db      	lsls	r3, r3, #19
     b40:	431f      	orrs	r7, r3
     b42:	e77e      	b.n	a42 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b44:	0020      	movs	r0, r4
     b46:	4b25      	ldr	r3, [pc, #148]	; (bdc <usart_init+0x350>)
     b48:	4798      	blx	r3
     b4a:	e007      	b.n	b5c <usart_init+0x2d0>
     b4c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     b4e:	2f04      	cmp	r7, #4
     b50:	d00d      	beq.n	b6e <usart_init+0x2e2>
     b52:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b54:	00bb      	lsls	r3, r7, #2
     b56:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     b58:	2800      	cmp	r0, #0
     b5a:	d0f3      	beq.n	b44 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
     b5c:	1c43      	adds	r3, r0, #1
     b5e:	d0f5      	beq.n	b4c <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b60:	a90e      	add	r1, sp, #56	; 0x38
     b62:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b64:	0c00      	lsrs	r0, r0, #16
     b66:	b2c0      	uxtb	r0, r0
     b68:	4b1d      	ldr	r3, [pc, #116]	; (be0 <usart_init+0x354>)
     b6a:	4798      	blx	r3
     b6c:	e7ee      	b.n	b4c <usart_init+0x2c0>
		module->callback[i]            = NULL;
     b6e:	2300      	movs	r3, #0
     b70:	60eb      	str	r3, [r5, #12]
     b72:	612b      	str	r3, [r5, #16]
     b74:	616b      	str	r3, [r5, #20]
     b76:	61ab      	str	r3, [r5, #24]
     b78:	61eb      	str	r3, [r5, #28]
     b7a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     b7c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     b7e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     b80:	2200      	movs	r2, #0
     b82:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     b84:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     b86:	3330      	adds	r3, #48	; 0x30
     b88:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     b8a:	3301      	adds	r3, #1
     b8c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     b8e:	3301      	adds	r3, #1
     b90:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     b92:	3301      	adds	r3, #1
     b94:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     b96:	6828      	ldr	r0, [r5, #0]
     b98:	4b07      	ldr	r3, [pc, #28]	; (bb8 <usart_init+0x32c>)
     b9a:	4798      	blx	r3
     b9c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     b9e:	4911      	ldr	r1, [pc, #68]	; (be4 <usart_init+0x358>)
     ba0:	4b11      	ldr	r3, [pc, #68]	; (be8 <usart_init+0x35c>)
     ba2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     ba4:	00a4      	lsls	r4, r4, #2
     ba6:	4b11      	ldr	r3, [pc, #68]	; (bec <usart_init+0x360>)
     ba8:	50e5      	str	r5, [r4, r3]
	return status_code;
     baa:	2000      	movs	r0, #0
     bac:	e686      	b.n	8bc <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     bae:	2310      	movs	r3, #16
     bb0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     bb2:	2300      	movs	r3, #0
     bb4:	9307      	str	r3, [sp, #28]
     bb6:	e6ee      	b.n	996 <usart_init+0x10a>
     bb8:	00000785 	.word	0x00000785
     bbc:	40000400 	.word	0x40000400
     bc0:	00001199 	.word	0x00001199
     bc4:	00001129 	.word	0x00001129
     bc8:	000005c5 	.word	0x000005c5
     bcc:	41002000 	.word	0x41002000
     bd0:	000011bd 	.word	0x000011bd
     bd4:	00000507 	.word	0x00000507
     bd8:	00000531 	.word	0x00000531
     bdc:	00000611 	.word	0x00000611
     be0:	00001295 	.word	0x00001295
     be4:	00000c81 	.word	0x00000c81
     be8:	000007c1 	.word	0x000007c1
     bec:	2000016c 	.word	0x2000016c

00000bf0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     bf0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     bf2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     bf4:	2a00      	cmp	r2, #0
     bf6:	d101      	bne.n	bfc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     bf8:	0018      	movs	r0, r3
     bfa:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     bfc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     bfe:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     c00:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     c02:	2a00      	cmp	r2, #0
     c04:	d1f8      	bne.n	bf8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     c06:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     c08:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     c0a:	2102      	movs	r1, #2
     c0c:	7e13      	ldrb	r3, [r2, #24]
     c0e:	420b      	tst	r3, r1
     c10:	d0fc      	beq.n	c0c <usart_write_wait+0x1c>
	return STATUS_OK;
     c12:	2300      	movs	r3, #0
     c14:	e7f0      	b.n	bf8 <usart_write_wait+0x8>

00000c16 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     c16:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     c18:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     c1a:	2a00      	cmp	r2, #0
     c1c:	d101      	bne.n	c22 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     c1e:	0018      	movs	r0, r3
     c20:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     c22:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     c24:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     c26:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     c28:	2a00      	cmp	r2, #0
     c2a:	d1f8      	bne.n	c1e <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     c2c:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     c2e:	7e10      	ldrb	r0, [r2, #24]
     c30:	0740      	lsls	r0, r0, #29
     c32:	d5f4      	bpl.n	c1e <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c34:	8b53      	ldrh	r3, [r2, #26]
     c36:	b2db      	uxtb	r3, r3
	if (error_code) {
     c38:	0698      	lsls	r0, r3, #26
     c3a:	d01d      	beq.n	c78 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     c3c:	0798      	lsls	r0, r3, #30
     c3e:	d503      	bpl.n	c48 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     c40:	2302      	movs	r3, #2
     c42:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     c44:	3318      	adds	r3, #24
     c46:	e7ea      	b.n	c1e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     c48:	0758      	lsls	r0, r3, #29
     c4a:	d503      	bpl.n	c54 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     c4c:	2304      	movs	r3, #4
     c4e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     c50:	331a      	adds	r3, #26
     c52:	e7e4      	b.n	c1e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c54:	07d8      	lsls	r0, r3, #31
     c56:	d503      	bpl.n	c60 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     c58:	2301      	movs	r3, #1
     c5a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     c5c:	3312      	adds	r3, #18
     c5e:	e7de      	b.n	c1e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     c60:	06d8      	lsls	r0, r3, #27
     c62:	d503      	bpl.n	c6c <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     c64:	2310      	movs	r3, #16
     c66:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     c68:	3332      	adds	r3, #50	; 0x32
     c6a:	e7d8      	b.n	c1e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     c6c:	069b      	lsls	r3, r3, #26
     c6e:	d503      	bpl.n	c78 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     c70:	2320      	movs	r3, #32
     c72:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     c74:	3321      	adds	r3, #33	; 0x21
     c76:	e7d2      	b.n	c1e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     c78:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     c7a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     c7c:	2300      	movs	r3, #0
     c7e:	e7ce      	b.n	c1e <usart_read_wait+0x8>

00000c80 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c82:	0080      	lsls	r0, r0, #2
     c84:	4b62      	ldr	r3, [pc, #392]	; (e10 <_usart_interrupt_handler+0x190>)
     c86:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c88:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c8a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     c8c:	2b00      	cmp	r3, #0
     c8e:	d1fc      	bne.n	c8a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c90:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     c92:	7da6      	ldrb	r6, [r4, #22]
     c94:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c96:	2330      	movs	r3, #48	; 0x30
     c98:	5ceb      	ldrb	r3, [r5, r3]
     c9a:	2231      	movs	r2, #49	; 0x31
     c9c:	5caf      	ldrb	r7, [r5, r2]
     c9e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     ca0:	07f3      	lsls	r3, r6, #31
     ca2:	d522      	bpl.n	cea <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     ca4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     ca6:	b29b      	uxth	r3, r3
     ca8:	2b00      	cmp	r3, #0
     caa:	d01c      	beq.n	ce6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     cae:	7813      	ldrb	r3, [r2, #0]
     cb0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     cb2:	1c51      	adds	r1, r2, #1
     cb4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cb6:	7969      	ldrb	r1, [r5, #5]
     cb8:	2901      	cmp	r1, #1
     cba:	d00e      	beq.n	cda <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cbc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     cbe:	05db      	lsls	r3, r3, #23
     cc0:	0ddb      	lsrs	r3, r3, #23
     cc2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     cc4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     cc6:	3b01      	subs	r3, #1
     cc8:	b29b      	uxth	r3, r3
     cca:	85eb      	strh	r3, [r5, #46]	; 0x2e
     ccc:	2b00      	cmp	r3, #0
     cce:	d10c      	bne.n	cea <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cd0:	3301      	adds	r3, #1
     cd2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     cd4:	3301      	adds	r3, #1
     cd6:	75a3      	strb	r3, [r4, #22]
     cd8:	e007      	b.n	cea <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     cda:	7851      	ldrb	r1, [r2, #1]
     cdc:	0209      	lsls	r1, r1, #8
     cde:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     ce0:	3202      	adds	r2, #2
     ce2:	62aa      	str	r2, [r5, #40]	; 0x28
     ce4:	e7eb      	b.n	cbe <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ce6:	2301      	movs	r3, #1
     ce8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     cea:	07b3      	lsls	r3, r6, #30
     cec:	d506      	bpl.n	cfc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     cee:	2302      	movs	r3, #2
     cf0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     cf2:	2200      	movs	r2, #0
     cf4:	3331      	adds	r3, #49	; 0x31
     cf6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     cf8:	07fb      	lsls	r3, r7, #31
     cfa:	d41a      	bmi.n	d32 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     cfc:	0773      	lsls	r3, r6, #29
     cfe:	d565      	bpl.n	dcc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     d00:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d02:	b29b      	uxth	r3, r3
     d04:	2b00      	cmp	r3, #0
     d06:	d05f      	beq.n	dc8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d08:	8b63      	ldrh	r3, [r4, #26]
     d0a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     d0c:	071a      	lsls	r2, r3, #28
     d0e:	d414      	bmi.n	d3a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d10:	223f      	movs	r2, #63	; 0x3f
     d12:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d14:	2b00      	cmp	r3, #0
     d16:	d034      	beq.n	d82 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d18:	079a      	lsls	r2, r3, #30
     d1a:	d511      	bpl.n	d40 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d1c:	221a      	movs	r2, #26
     d1e:	2332      	movs	r3, #50	; 0x32
     d20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d22:	3b30      	subs	r3, #48	; 0x30
     d24:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d26:	077b      	lsls	r3, r7, #29
     d28:	d550      	bpl.n	dcc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d2a:	0028      	movs	r0, r5
     d2c:	696b      	ldr	r3, [r5, #20]
     d2e:	4798      	blx	r3
     d30:	e04c      	b.n	dcc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d32:	0028      	movs	r0, r5
     d34:	68eb      	ldr	r3, [r5, #12]
     d36:	4798      	blx	r3
     d38:	e7e0      	b.n	cfc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     d3a:	2237      	movs	r2, #55	; 0x37
     d3c:	4013      	ands	r3, r2
     d3e:	e7e9      	b.n	d14 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d40:	075a      	lsls	r2, r3, #29
     d42:	d505      	bpl.n	d50 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     d44:	221e      	movs	r2, #30
     d46:	2332      	movs	r3, #50	; 0x32
     d48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d4a:	3b2e      	subs	r3, #46	; 0x2e
     d4c:	8363      	strh	r3, [r4, #26]
     d4e:	e7ea      	b.n	d26 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d50:	07da      	lsls	r2, r3, #31
     d52:	d505      	bpl.n	d60 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     d54:	2213      	movs	r2, #19
     d56:	2332      	movs	r3, #50	; 0x32
     d58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d5a:	3b31      	subs	r3, #49	; 0x31
     d5c:	8363      	strh	r3, [r4, #26]
     d5e:	e7e2      	b.n	d26 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     d60:	06da      	lsls	r2, r3, #27
     d62:	d505      	bpl.n	d70 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     d64:	2242      	movs	r2, #66	; 0x42
     d66:	2332      	movs	r3, #50	; 0x32
     d68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     d6a:	3b22      	subs	r3, #34	; 0x22
     d6c:	8363      	strh	r3, [r4, #26]
     d6e:	e7da      	b.n	d26 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     d70:	2220      	movs	r2, #32
     d72:	421a      	tst	r2, r3
     d74:	d0d7      	beq.n	d26 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     d76:	3221      	adds	r2, #33	; 0x21
     d78:	2332      	movs	r3, #50	; 0x32
     d7a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d7c:	3b12      	subs	r3, #18
     d7e:	8363      	strh	r3, [r4, #26]
     d80:	e7d1      	b.n	d26 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d84:	05db      	lsls	r3, r3, #23
     d86:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d88:	b2da      	uxtb	r2, r3
     d8a:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d8c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     d90:	1c51      	adds	r1, r2, #1
     d92:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d94:	7969      	ldrb	r1, [r5, #5]
     d96:	2901      	cmp	r1, #1
     d98:	d010      	beq.n	dbc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d9a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d9c:	3b01      	subs	r3, #1
     d9e:	b29b      	uxth	r3, r3
     da0:	85ab      	strh	r3, [r5, #44]	; 0x2c
     da2:	2b00      	cmp	r3, #0
     da4:	d112      	bne.n	dcc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     da6:	3304      	adds	r3, #4
     da8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     daa:	2200      	movs	r2, #0
     dac:	332e      	adds	r3, #46	; 0x2e
     dae:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     db0:	07bb      	lsls	r3, r7, #30
     db2:	d50b      	bpl.n	dcc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     db4:	0028      	movs	r0, r5
     db6:	692b      	ldr	r3, [r5, #16]
     db8:	4798      	blx	r3
     dba:	e007      	b.n	dcc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     dbc:	0a1b      	lsrs	r3, r3, #8
     dbe:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     dc2:	3301      	adds	r3, #1
     dc4:	626b      	str	r3, [r5, #36]	; 0x24
     dc6:	e7e8      	b.n	d9a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     dc8:	2304      	movs	r3, #4
     dca:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     dcc:	06f3      	lsls	r3, r6, #27
     dce:	d504      	bpl.n	dda <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     dd0:	2310      	movs	r3, #16
     dd2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     dd4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     dd6:	06fb      	lsls	r3, r7, #27
     dd8:	d40e      	bmi.n	df8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     dda:	06b3      	lsls	r3, r6, #26
     ddc:	d504      	bpl.n	de8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     dde:	2320      	movs	r3, #32
     de0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     de2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     de4:	073b      	lsls	r3, r7, #28
     de6:	d40b      	bmi.n	e00 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     de8:	0733      	lsls	r3, r6, #28
     dea:	d504      	bpl.n	df6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     dec:	2308      	movs	r3, #8
     dee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     df0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     df2:	06bb      	lsls	r3, r7, #26
     df4:	d408      	bmi.n	e08 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     df8:	0028      	movs	r0, r5
     dfa:	69eb      	ldr	r3, [r5, #28]
     dfc:	4798      	blx	r3
     dfe:	e7ec      	b.n	dda <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     e00:	0028      	movs	r0, r5
     e02:	69ab      	ldr	r3, [r5, #24]
     e04:	4798      	blx	r3
     e06:	e7ef      	b.n	de8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     e08:	6a2b      	ldr	r3, [r5, #32]
     e0a:	0028      	movs	r0, r5
     e0c:	4798      	blx	r3
}
     e0e:	e7f2      	b.n	df6 <_usart_interrupt_handler+0x176>
     e10:	2000016c 	.word	0x2000016c

00000e14 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e14:	b510      	push	{r4, lr}
	switch (clock_source) {
     e16:	2808      	cmp	r0, #8
     e18:	d803      	bhi.n	e22 <system_clock_source_get_hz+0xe>
     e1a:	0080      	lsls	r0, r0, #2
     e1c:	4b1d      	ldr	r3, [pc, #116]	; (e94 <system_clock_source_get_hz+0x80>)
     e1e:	581b      	ldr	r3, [r3, r0]
     e20:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     e22:	2000      	movs	r0, #0
     e24:	e034      	b.n	e90 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
     e26:	4b1c      	ldr	r3, [pc, #112]	; (e98 <system_clock_source_get_hz+0x84>)
     e28:	6918      	ldr	r0, [r3, #16]
     e2a:	e031      	b.n	e90 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     e2c:	4b1b      	ldr	r3, [pc, #108]	; (e9c <system_clock_source_get_hz+0x88>)
     e2e:	7d18      	ldrb	r0, [r3, #20]
     e30:	0700      	lsls	r0, r0, #28
     e32:	0f80      	lsrs	r0, r0, #30
     e34:	1c43      	adds	r3, r0, #1
     e36:	481a      	ldr	r0, [pc, #104]	; (ea0 <system_clock_source_get_hz+0x8c>)
     e38:	4358      	muls	r0, r3
     e3a:	e029      	b.n	e90 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
     e3c:	4b16      	ldr	r3, [pc, #88]	; (e98 <system_clock_source_get_hz+0x84>)
     e3e:	6958      	ldr	r0, [r3, #20]
     e40:	e026      	b.n	e90 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     e42:	4b15      	ldr	r3, [pc, #84]	; (e98 <system_clock_source_get_hz+0x84>)
     e44:	681b      	ldr	r3, [r3, #0]
			return 0;
     e46:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     e48:	079b      	lsls	r3, r3, #30
     e4a:	d521      	bpl.n	e90 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     e4c:	4913      	ldr	r1, [pc, #76]	; (e9c <system_clock_source_get_hz+0x88>)
     e4e:	2280      	movs	r2, #128	; 0x80
     e50:	0052      	lsls	r2, r2, #1
     e52:	68cb      	ldr	r3, [r1, #12]
     e54:	4213      	tst	r3, r2
     e56:	d0fc      	beq.n	e52 <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
     e58:	4b0f      	ldr	r3, [pc, #60]	; (e98 <system_clock_source_get_hz+0x84>)
     e5a:	681a      	ldr	r2, [r3, #0]
     e5c:	2324      	movs	r3, #36	; 0x24
     e5e:	4013      	ands	r3, r2
     e60:	2b04      	cmp	r3, #4
     e62:	d001      	beq.n	e68 <system_clock_source_get_hz+0x54>
			return 48000000UL;
     e64:	480f      	ldr	r0, [pc, #60]	; (ea4 <system_clock_source_get_hz+0x90>)
     e66:	e013      	b.n	e90 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     e68:	2000      	movs	r0, #0
     e6a:	4b0f      	ldr	r3, [pc, #60]	; (ea8 <system_clock_source_get_hz+0x94>)
     e6c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     e6e:	4b0a      	ldr	r3, [pc, #40]	; (e98 <system_clock_source_get_hz+0x84>)
     e70:	689b      	ldr	r3, [r3, #8]
     e72:	041b      	lsls	r3, r3, #16
     e74:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     e76:	4358      	muls	r0, r3
     e78:	e00a      	b.n	e90 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     e7a:	2328      	movs	r3, #40	; 0x28
     e7c:	4a07      	ldr	r2, [pc, #28]	; (e9c <system_clock_source_get_hz+0x88>)
     e7e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     e80:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     e82:	079b      	lsls	r3, r3, #30
     e84:	d504      	bpl.n	e90 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
     e86:	4b04      	ldr	r3, [pc, #16]	; (e98 <system_clock_source_get_hz+0x84>)
     e88:	68d8      	ldr	r0, [r3, #12]
     e8a:	e001      	b.n	e90 <system_clock_source_get_hz+0x7c>
		return 32768UL;
     e8c:	2080      	movs	r0, #128	; 0x80
     e8e:	0200      	lsls	r0, r0, #8
	}
}
     e90:	bd10      	pop	{r4, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	0000285c 	.word	0x0000285c
     e98:	200000b0 	.word	0x200000b0
     e9c:	40000c00 	.word	0x40000c00
     ea0:	003d0900 	.word	0x003d0900
     ea4:	02dc6c00 	.word	0x02dc6c00
     ea8:	000011bd 	.word	0x000011bd

00000eac <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     eac:	b510      	push	{r4, lr}
     eae:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     eb0:	2280      	movs	r2, #128	; 0x80
     eb2:	0052      	lsls	r2, r2, #1
     eb4:	4b32      	ldr	r3, [pc, #200]	; (f80 <system_clock_init+0xd4>)
     eb6:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     eb8:	3afd      	subs	r2, #253	; 0xfd
     eba:	4b32      	ldr	r3, [pc, #200]	; (f84 <system_clock_init+0xd8>)
     ebc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ebe:	4a32      	ldr	r2, [pc, #200]	; (f88 <system_clock_init+0xdc>)
     ec0:	6853      	ldr	r3, [r2, #4]
     ec2:	211e      	movs	r1, #30
     ec4:	438b      	bics	r3, r1
     ec6:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     ec8:	2380      	movs	r3, #128	; 0x80
     eca:	05db      	lsls	r3, r3, #23
     ecc:	789b      	ldrb	r3, [r3, #2]
     ece:	2b02      	cmp	r3, #2
     ed0:	d00f      	beq.n	ef2 <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     ed2:	2380      	movs	r3, #128	; 0x80
     ed4:	05db      	lsls	r3, r3, #23
     ed6:	789b      	ldrb	r3, [r3, #2]
     ed8:	b25b      	sxtb	r3, r3
     eda:	2b00      	cmp	r3, #0
     edc:	db09      	blt.n	ef2 <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     ede:	2380      	movs	r3, #128	; 0x80
     ee0:	05db      	lsls	r3, r3, #23
     ee2:	2201      	movs	r2, #1
     ee4:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     ee6:	3201      	adds	r2, #1
     ee8:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     eea:	001a      	movs	r2, r3
     eec:	7993      	ldrb	r3, [r2, #6]
     eee:	2b00      	cmp	r3, #0
     ef0:	d0fc      	beq.n	eec <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     ef2:	4b23      	ldr	r3, [pc, #140]	; (f80 <system_clock_init+0xd4>)
     ef4:	7d19      	ldrb	r1, [r3, #20]
     ef6:	2280      	movs	r2, #128	; 0x80
     ef8:	4252      	negs	r2, r2
     efa:	430a      	orrs	r2, r1
     efc:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     efe:	7d1a      	ldrb	r2, [r3, #20]
     f00:	2140      	movs	r1, #64	; 0x40
     f02:	438a      	bics	r2, r1
     f04:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     f06:	4b21      	ldr	r3, [pc, #132]	; (f8c <system_clock_init+0xe0>)
     f08:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     f0a:	4c21      	ldr	r4, [pc, #132]	; (f90 <system_clock_init+0xe4>)
     f0c:	2301      	movs	r3, #1
     f0e:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     f10:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     f12:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
     f14:	a901      	add	r1, sp, #4
     f16:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     f18:	2300      	movs	r3, #0
     f1a:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
     f1c:	2206      	movs	r2, #6
     f1e:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
     f20:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     f22:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f24:	2000      	movs	r0, #0
     f26:	4b1b      	ldr	r3, [pc, #108]	; (f94 <system_clock_init+0xe8>)
     f28:	4798      	blx	r3
     f2a:	2000      	movs	r0, #0
     f2c:	4b1a      	ldr	r3, [pc, #104]	; (f98 <system_clock_init+0xec>)
     f2e:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
     f30:	2000      	movs	r0, #0
     f32:	4b1a      	ldr	r3, [pc, #104]	; (f9c <system_clock_init+0xf0>)
     f34:	4798      	blx	r3
     f36:	7921      	ldrb	r1, [r4, #4]
     f38:	b2c9      	uxtb	r1, r1
     f3a:	4b19      	ldr	r3, [pc, #100]	; (fa0 <system_clock_init+0xf4>)
     f3c:	4798      	blx	r3
	uint32_t cpu_freq = system_cpu_clock_get_hz();

	/* Set the BUPDIV & LPDIV value such that backup & low power domain clock 
	 * does not exceed their max clock freq even if CPU is configured to it's 
	 * maximum frequency */
	if ((cpu_freq > 6000000) && ((CONF_CLOCK_BACKUP_DIVIDER == SYSTEM_MAIN_CLOCK_DIV_1) \
     f3e:	4b19      	ldr	r3, [pc, #100]	; (fa4 <system_clock_init+0xf8>)
     f40:	4298      	cmp	r0, r3
     f42:	d902      	bls.n	f4a <system_clock_init+0x9e>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     f44:	2208      	movs	r2, #8
     f46:	71a2      	strb	r2, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     f48:	7162      	strb	r2, [r4, #5]
		system_backup_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
		system_low_power_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
	}

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */	
	if (cpu_freq <= 12000000) {
     f4a:	4b17      	ldr	r3, [pc, #92]	; (fa8 <system_clock_init+0xfc>)
     f4c:	4298      	cmp	r0, r3
     f4e:	d814      	bhi.n	f7a <system_clock_init+0xce>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     f50:	2380      	movs	r3, #128	; 0x80
     f52:	05db      	lsls	r3, r3, #23
     f54:	789b      	ldrb	r3, [r3, #2]
     f56:	2b00      	cmp	r3, #0
     f58:	d00f      	beq.n	f7a <system_clock_init+0xce>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     f5a:	2380      	movs	r3, #128	; 0x80
     f5c:	05db      	lsls	r3, r3, #23
     f5e:	789b      	ldrb	r3, [r3, #2]
     f60:	b25b      	sxtb	r3, r3
     f62:	2b00      	cmp	r3, #0
     f64:	db09      	blt.n	f7a <system_clock_init+0xce>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     f66:	2380      	movs	r3, #128	; 0x80
     f68:	05db      	lsls	r3, r3, #23
     f6a:	2201      	movs	r2, #1
     f6c:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
     f6e:	2200      	movs	r2, #0
     f70:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
     f72:	001a      	movs	r2, r3
     f74:	7993      	ldrb	r3, [r2, #6]
     f76:	2b00      	cmp	r3, #0
     f78:	d0fc      	beq.n	f74 <system_clock_init+0xc8>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     f7a:	b004      	add	sp, #16
     f7c:	bd10      	pop	{r4, pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	40000c00 	.word	0x40000c00
     f84:	40001400 	.word	0x40001400
     f88:	41004000 	.word	0x41004000
     f8c:	00000fad 	.word	0x00000fad
     f90:	40000400 	.word	0x40000400
     f94:	00000fd1 	.word	0x00000fd1
     f98:	0000107d 	.word	0x0000107d
     f9c:	000010bd 	.word	0x000010bd
     fa0:	00001bad 	.word	0x00001bad
     fa4:	005b8d80 	.word	0x005b8d80
     fa8:	00b71b00 	.word	0x00b71b00

00000fac <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     fac:	4a06      	ldr	r2, [pc, #24]	; (fc8 <system_gclk_init+0x1c>)
     fae:	6953      	ldr	r3, [r2, #20]
     fb0:	2140      	movs	r1, #64	; 0x40
     fb2:	430b      	orrs	r3, r1
     fb4:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     fb6:	2201      	movs	r2, #1
     fb8:	4b04      	ldr	r3, [pc, #16]	; (fcc <system_gclk_init+0x20>)
     fba:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     fbc:	0019      	movs	r1, r3
     fbe:	780b      	ldrb	r3, [r1, #0]
     fc0:	4213      	tst	r3, r2
     fc2:	d1fc      	bne.n	fbe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     fc4:	4770      	bx	lr
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	40000400 	.word	0x40000400
     fcc:	40001800 	.word	0x40001800

00000fd0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     fd4:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     fd6:	784b      	ldrb	r3, [r1, #1]
     fd8:	2b00      	cmp	r3, #0
     fda:	d002      	beq.n	fe2 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     fdc:	2380      	movs	r3, #128	; 0x80
     fde:	00db      	lsls	r3, r3, #3
     fe0:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     fe2:	7a4b      	ldrb	r3, [r1, #9]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d002      	beq.n	fee <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     fe8:	2380      	movs	r3, #128	; 0x80
     fea:	011b      	lsls	r3, r3, #4
     fec:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     fee:	6848      	ldr	r0, [r1, #4]
     ff0:	2801      	cmp	r0, #1
     ff2:	d90f      	bls.n	1014 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     ff4:	1e43      	subs	r3, r0, #1
     ff6:	4218      	tst	r0, r3
     ff8:	d131      	bne.n	105e <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     ffa:	2802      	cmp	r0, #2
     ffc:	d92d      	bls.n	105a <system_gclk_gen_set_config+0x8a>
     ffe:	2302      	movs	r3, #2
    1000:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1002:	3201      	adds	r2, #1
						mask <<= 1) {
    1004:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1006:	4298      	cmp	r0, r3
    1008:	d8fb      	bhi.n	1002 <system_gclk_gen_set_config+0x32>
    100a:	2380      	movs	r3, #128	; 0x80
    100c:	015b      	lsls	r3, r3, #5
    100e:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1010:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1012:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1014:	7a0b      	ldrb	r3, [r1, #8]
    1016:	2b00      	cmp	r3, #0
    1018:	d002      	beq.n	1020 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    101a:	2380      	movs	r3, #128	; 0x80
    101c:	019b      	lsls	r3, r3, #6
    101e:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1020:	2604      	movs	r6, #4
    1022:	40a6      	lsls	r6, r4
    1024:	4911      	ldr	r1, [pc, #68]	; (106c <system_gclk_gen_set_config+0x9c>)
    1026:	4a12      	ldr	r2, [pc, #72]	; (1070 <system_gclk_gen_set_config+0xa0>)
    1028:	684b      	ldr	r3, [r1, #4]
    102a:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    102c:	421e      	tst	r6, r3
    102e:	d1fb      	bne.n	1028 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    1030:	4b10      	ldr	r3, [pc, #64]	; (1074 <system_gclk_gen_set_config+0xa4>)
    1032:	4798      	blx	r3
    1034:	00a4      	lsls	r4, r4, #2
    1036:	4b0d      	ldr	r3, [pc, #52]	; (106c <system_gclk_gen_set_config+0x9c>)
    1038:	469c      	mov	ip, r3
    103a:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    103c:	6a22      	ldr	r2, [r4, #32]
    103e:	2380      	movs	r3, #128	; 0x80
    1040:	005b      	lsls	r3, r3, #1
    1042:	401a      	ands	r2, r3
    1044:	432a      	orrs	r2, r5
    1046:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1048:	4661      	mov	r1, ip
    104a:	4a09      	ldr	r2, [pc, #36]	; (1070 <system_gclk_gen_set_config+0xa0>)
    104c:	684b      	ldr	r3, [r1, #4]
    104e:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    1050:	421e      	tst	r6, r3
    1052:	d1fb      	bne.n	104c <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    1054:	4b08      	ldr	r3, [pc, #32]	; (1078 <system_gclk_gen_set_config+0xa8>)
    1056:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1058:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    105a:	2200      	movs	r2, #0
    105c:	e7d5      	b.n	100a <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    105e:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1060:	2380      	movs	r3, #128	; 0x80
    1062:	009b      	lsls	r3, r3, #2
    1064:	4318      	orrs	r0, r3
    1066:	4305      	orrs	r5, r0
    1068:	e7d4      	b.n	1014 <system_gclk_gen_set_config+0x44>
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	40001800 	.word	0x40001800
    1070:	000007fc 	.word	0x000007fc
    1074:	00000181 	.word	0x00000181
    1078:	000001c1 	.word	0x000001c1

0000107c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    107c:	b510      	push	{r4, lr}
    107e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1080:	2204      	movs	r2, #4
    1082:	4082      	lsls	r2, r0
    1084:	4809      	ldr	r0, [pc, #36]	; (10ac <system_gclk_gen_enable+0x30>)
    1086:	490a      	ldr	r1, [pc, #40]	; (10b0 <system_gclk_gen_enable+0x34>)
    1088:	6843      	ldr	r3, [r0, #4]
    108a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    108c:	421a      	tst	r2, r3
    108e:	d1fb      	bne.n	1088 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    1090:	4b08      	ldr	r3, [pc, #32]	; (10b4 <system_gclk_gen_enable+0x38>)
    1092:	4798      	blx	r3
    1094:	00a4      	lsls	r4, r4, #2
    1096:	4b05      	ldr	r3, [pc, #20]	; (10ac <system_gclk_gen_enable+0x30>)
    1098:	469c      	mov	ip, r3
    109a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    109c:	6a22      	ldr	r2, [r4, #32]
    109e:	2380      	movs	r3, #128	; 0x80
    10a0:	005b      	lsls	r3, r3, #1
    10a2:	4313      	orrs	r3, r2
    10a4:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    10a6:	4b04      	ldr	r3, [pc, #16]	; (10b8 <system_gclk_gen_enable+0x3c>)
    10a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10aa:	bd10      	pop	{r4, pc}
    10ac:	40001800 	.word	0x40001800
    10b0:	000007fc 	.word	0x000007fc
    10b4:	00000181 	.word	0x00000181
    10b8:	000001c1 	.word	0x000001c1

000010bc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    10bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10be:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    10c0:	2204      	movs	r2, #4
    10c2:	4082      	lsls	r2, r0
    10c4:	4812      	ldr	r0, [pc, #72]	; (1110 <system_gclk_gen_get_hz+0x54>)
    10c6:	4913      	ldr	r1, [pc, #76]	; (1114 <system_gclk_gen_get_hz+0x58>)
    10c8:	6843      	ldr	r3, [r0, #4]
    10ca:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    10cc:	421a      	tst	r2, r3
    10ce:	d1fb      	bne.n	10c8 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    10d0:	4b11      	ldr	r3, [pc, #68]	; (1118 <system_gclk_gen_get_hz+0x5c>)
    10d2:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    10d4:	4f0e      	ldr	r7, [pc, #56]	; (1110 <system_gclk_gen_get_hz+0x54>)
    10d6:	3408      	adds	r4, #8
    10d8:	00a4      	lsls	r4, r4, #2
    10da:	59e0      	ldr	r0, [r4, r7]
    10dc:	0700      	lsls	r0, r0, #28
    10de:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    10e0:	4b0e      	ldr	r3, [pc, #56]	; (111c <system_gclk_gen_get_hz+0x60>)
    10e2:	4798      	blx	r3
    10e4:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    10e6:	59e5      	ldr	r5, [r4, r7]
    10e8:	04ed      	lsls	r5, r5, #19
    10ea:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    10ec:	59e4      	ldr	r4, [r4, r7]
    10ee:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    10f0:	4b0b      	ldr	r3, [pc, #44]	; (1120 <system_gclk_gen_get_hz+0x64>)
    10f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    10f4:	2d00      	cmp	r5, #0
    10f6:	d107      	bne.n	1108 <system_gclk_gen_get_hz+0x4c>
    10f8:	2c01      	cmp	r4, #1
    10fa:	d907      	bls.n	110c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    10fc:	0021      	movs	r1, r4
    10fe:	0030      	movs	r0, r6
    1100:	4b08      	ldr	r3, [pc, #32]	; (1124 <system_gclk_gen_get_hz+0x68>)
    1102:	4798      	blx	r3
    1104:	0006      	movs	r6, r0
    1106:	e001      	b.n	110c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1108:	3401      	adds	r4, #1
    110a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    110c:	0030      	movs	r0, r6
    110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1110:	40001800 	.word	0x40001800
    1114:	000007fc 	.word	0x000007fc
    1118:	00000181 	.word	0x00000181
    111c:	00000e15 	.word	0x00000e15
    1120:	000001c1 	.word	0x000001c1
    1124:	00001bad 	.word	0x00001bad

00001128 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1128:	b510      	push	{r4, lr}
    112a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    112c:	4b09      	ldr	r3, [pc, #36]	; (1154 <system_gclk_chan_enable+0x2c>)
    112e:	4798      	blx	r3
    1130:	00a0      	lsls	r0, r4, #2
    1132:	4b09      	ldr	r3, [pc, #36]	; (1158 <system_gclk_chan_enable+0x30>)
    1134:	469c      	mov	ip, r3
    1136:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1138:	2280      	movs	r2, #128	; 0x80
    113a:	5883      	ldr	r3, [r0, r2]
    113c:	2140      	movs	r1, #64	; 0x40
    113e:	430b      	orrs	r3, r1
    1140:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1142:	3140      	adds	r1, #64	; 0x40
    1144:	3a40      	subs	r2, #64	; 0x40
    1146:	5843      	ldr	r3, [r0, r1]
    1148:	421a      	tst	r2, r3
    114a:	d0fc      	beq.n	1146 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    114c:	4b03      	ldr	r3, [pc, #12]	; (115c <system_gclk_chan_enable+0x34>)
    114e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1150:	bd10      	pop	{r4, pc}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	00000181 	.word	0x00000181
    1158:	40001800 	.word	0x40001800
    115c:	000001c1 	.word	0x000001c1

00001160 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1160:	b510      	push	{r4, lr}
    1162:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1164:	4b09      	ldr	r3, [pc, #36]	; (118c <system_gclk_chan_disable+0x2c>)
    1166:	4798      	blx	r3
    1168:	00a0      	lsls	r0, r4, #2
    116a:	4b09      	ldr	r3, [pc, #36]	; (1190 <system_gclk_chan_disable+0x30>)
    116c:	469c      	mov	ip, r3
    116e:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1170:	2280      	movs	r2, #128	; 0x80
    1172:	5883      	ldr	r3, [r0, r2]
    1174:	2140      	movs	r1, #64	; 0x40
    1176:	438b      	bics	r3, r1
    1178:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    117a:	3140      	adds	r1, #64	; 0x40
    117c:	3a40      	subs	r2, #64	; 0x40
    117e:	5843      	ldr	r3, [r0, r1]
    1180:	421a      	tst	r2, r3
    1182:	d1fc      	bne.n	117e <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <system_gclk_chan_disable+0x34>)
    1186:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1188:	bd10      	pop	{r4, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00000181 	.word	0x00000181
    1190:	40001800 	.word	0x40001800
    1194:	000001c1 	.word	0x000001c1

00001198 <system_gclk_chan_set_config>:
{
    1198:	b570      	push	{r4, r5, r6, lr}
    119a:	0004      	movs	r4, r0
    119c:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    119e:	4b05      	ldr	r3, [pc, #20]	; (11b4 <system_gclk_chan_set_config+0x1c>)
    11a0:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    11a2:	782a      	ldrb	r2, [r5, #0]
    11a4:	230f      	movs	r3, #15
    11a6:	4013      	ands	r3, r2
    11a8:	3420      	adds	r4, #32
    11aa:	00a4      	lsls	r4, r4, #2
    11ac:	4a02      	ldr	r2, [pc, #8]	; (11b8 <system_gclk_chan_set_config+0x20>)
    11ae:	50a3      	str	r3, [r4, r2]
}
    11b0:	bd70      	pop	{r4, r5, r6, pc}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	00001161 	.word	0x00001161
    11b8:	40001800 	.word	0x40001800

000011bc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    11bc:	b510      	push	{r4, lr}
    11be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11c0:	4b06      	ldr	r3, [pc, #24]	; (11dc <system_gclk_chan_get_hz+0x20>)
    11c2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    11c4:	3420      	adds	r4, #32
    11c6:	00a4      	lsls	r4, r4, #2
    11c8:	4b05      	ldr	r3, [pc, #20]	; (11e0 <system_gclk_chan_get_hz+0x24>)
    11ca:	58e4      	ldr	r4, [r4, r3]
    11cc:	0724      	lsls	r4, r4, #28
    11ce:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    11d0:	4b04      	ldr	r3, [pc, #16]	; (11e4 <system_gclk_chan_get_hz+0x28>)
    11d2:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    11d4:	0020      	movs	r0, r4
    11d6:	4b04      	ldr	r3, [pc, #16]	; (11e8 <system_gclk_chan_get_hz+0x2c>)
    11d8:	4798      	blx	r3
}
    11da:	bd10      	pop	{r4, pc}
    11dc:	00000181 	.word	0x00000181
    11e0:	40001800 	.word	0x40001800
    11e4:	000001c1 	.word	0x000001c1
    11e8:	000010bd 	.word	0x000010bd

000011ec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    11ec:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11ee:	78d3      	ldrb	r3, [r2, #3]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d135      	bne.n	1260 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    11f4:	7813      	ldrb	r3, [r2, #0]
    11f6:	2b80      	cmp	r3, #128	; 0x80
    11f8:	d029      	beq.n	124e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    11fa:	061b      	lsls	r3, r3, #24
    11fc:	2480      	movs	r4, #128	; 0x80
    11fe:	0264      	lsls	r4, r4, #9
    1200:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1202:	7854      	ldrb	r4, [r2, #1]
    1204:	2502      	movs	r5, #2
    1206:	43ac      	bics	r4, r5
    1208:	d106      	bne.n	1218 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    120a:	7894      	ldrb	r4, [r2, #2]
    120c:	2c00      	cmp	r4, #0
    120e:	d120      	bne.n	1252 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1210:	2480      	movs	r4, #128	; 0x80
    1212:	02a4      	lsls	r4, r4, #10
    1214:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1216:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1218:	7854      	ldrb	r4, [r2, #1]
    121a:	3c01      	subs	r4, #1
    121c:	2c01      	cmp	r4, #1
    121e:	d91c      	bls.n	125a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1220:	040d      	lsls	r5, r1, #16
    1222:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1224:	24a0      	movs	r4, #160	; 0xa0
    1226:	05e4      	lsls	r4, r4, #23
    1228:	432c      	orrs	r4, r5
    122a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    122c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    122e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1230:	24d0      	movs	r4, #208	; 0xd0
    1232:	0624      	lsls	r4, r4, #24
    1234:	432c      	orrs	r4, r5
    1236:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1238:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    123a:	78d4      	ldrb	r4, [r2, #3]
    123c:	2c00      	cmp	r4, #0
    123e:	d122      	bne.n	1286 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1240:	035b      	lsls	r3, r3, #13
    1242:	d51c      	bpl.n	127e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1244:	7893      	ldrb	r3, [r2, #2]
    1246:	2b01      	cmp	r3, #1
    1248:	d01e      	beq.n	1288 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    124a:	6141      	str	r1, [r0, #20]
    124c:	e017      	b.n	127e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    124e:	2300      	movs	r3, #0
    1250:	e7d7      	b.n	1202 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1252:	24c0      	movs	r4, #192	; 0xc0
    1254:	02e4      	lsls	r4, r4, #11
    1256:	4323      	orrs	r3, r4
    1258:	e7dd      	b.n	1216 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    125a:	4c0d      	ldr	r4, [pc, #52]	; (1290 <_system_pinmux_config+0xa4>)
    125c:	4023      	ands	r3, r4
    125e:	e7df      	b.n	1220 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1260:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1262:	040c      	lsls	r4, r1, #16
    1264:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1266:	23a0      	movs	r3, #160	; 0xa0
    1268:	05db      	lsls	r3, r3, #23
    126a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    126c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    126e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1270:	23d0      	movs	r3, #208	; 0xd0
    1272:	061b      	lsls	r3, r3, #24
    1274:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1276:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1278:	78d3      	ldrb	r3, [r2, #3]
    127a:	2b00      	cmp	r3, #0
    127c:	d103      	bne.n	1286 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    127e:	7853      	ldrb	r3, [r2, #1]
    1280:	3b01      	subs	r3, #1
    1282:	2b01      	cmp	r3, #1
    1284:	d902      	bls.n	128c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1286:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1288:	6181      	str	r1, [r0, #24]
    128a:	e7f8      	b.n	127e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    128c:	6081      	str	r1, [r0, #8]
}
    128e:	e7fa      	b.n	1286 <_system_pinmux_config+0x9a>
    1290:	fffbffff 	.word	0xfffbffff

00001294 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1294:	b510      	push	{r4, lr}
    1296:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1298:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    129a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    129c:	2900      	cmp	r1, #0
    129e:	d104      	bne.n	12aa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    12a0:	0943      	lsrs	r3, r0, #5
    12a2:	01db      	lsls	r3, r3, #7
    12a4:	4905      	ldr	r1, [pc, #20]	; (12bc <system_pinmux_pin_set_config+0x28>)
    12a6:	468c      	mov	ip, r1
    12a8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    12aa:	241f      	movs	r4, #31
    12ac:	4020      	ands	r0, r4
    12ae:	2101      	movs	r1, #1
    12b0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    12b2:	0018      	movs	r0, r3
    12b4:	4b02      	ldr	r3, [pc, #8]	; (12c0 <system_pinmux_pin_set_config+0x2c>)
    12b6:	4798      	blx	r3
}
    12b8:	bd10      	pop	{r4, pc}
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	40002800 	.word	0x40002800
    12c0:	000011ed 	.word	0x000011ed

000012c4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    12c4:	4770      	bx	lr
	...

000012c8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    12c8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <system_init+0x18>)
    12cc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    12ce:	4b05      	ldr	r3, [pc, #20]	; (12e4 <system_init+0x1c>)
    12d0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    12d2:	4b05      	ldr	r3, [pc, #20]	; (12e8 <system_init+0x20>)
    12d4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <system_init+0x24>)
    12d8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    12da:	4b05      	ldr	r3, [pc, #20]	; (12f0 <system_init+0x28>)
    12dc:	4798      	blx	r3
}
    12de:	bd10      	pop	{r4, pc}
    12e0:	00000ead 	.word	0x00000ead
    12e4:	000001f1 	.word	0x000001f1
    12e8:	000012c5 	.word	0x000012c5
    12ec:	00000309 	.word	0x00000309
    12f0:	000012c5 	.word	0x000012c5

000012f4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    12f4:	1c93      	adds	r3, r2, #2
    12f6:	009b      	lsls	r3, r3, #2
    12f8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    12fa:	2a02      	cmp	r2, #2
    12fc:	d009      	beq.n	1312 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    12fe:	2a03      	cmp	r2, #3
    1300:	d00c      	beq.n	131c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1302:	2301      	movs	r3, #1
    1304:	4093      	lsls	r3, r2
    1306:	001a      	movs	r2, r3
    1308:	7e03      	ldrb	r3, [r0, #24]
    130a:	4313      	orrs	r3, r2
    130c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    130e:	2000      	movs	r0, #0
    1310:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1312:	7e03      	ldrb	r3, [r0, #24]
    1314:	2210      	movs	r2, #16
    1316:	4313      	orrs	r3, r2
    1318:	7603      	strb	r3, [r0, #24]
    131a:	e7f8      	b.n	130e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    131c:	7e03      	ldrb	r3, [r0, #24]
    131e:	2220      	movs	r2, #32
    1320:	4313      	orrs	r3, r2
    1322:	7603      	strb	r3, [r0, #24]
    1324:	e7f3      	b.n	130e <tc_register_callback+0x1a>
	...

00001328 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1328:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    132a:	0080      	lsls	r0, r0, #2
    132c:	4b16      	ldr	r3, [pc, #88]	; (1388 <_tc_interrupt_handler+0x60>)
    132e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1330:	6823      	ldr	r3, [r4, #0]
    1332:	7a9d      	ldrb	r5, [r3, #10]
    1334:	7e22      	ldrb	r2, [r4, #24]
    1336:	7e63      	ldrb	r3, [r4, #25]
    1338:	4013      	ands	r3, r2
    133a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    133c:	07eb      	lsls	r3, r5, #31
    133e:	d406      	bmi.n	134e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1340:	07ab      	lsls	r3, r5, #30
    1342:	d40b      	bmi.n	135c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1344:	06eb      	lsls	r3, r5, #27
    1346:	d410      	bmi.n	136a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1348:	06ab      	lsls	r3, r5, #26
    134a:	d415      	bmi.n	1378 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    134c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    134e:	0020      	movs	r0, r4
    1350:	68a3      	ldr	r3, [r4, #8]
    1352:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1354:	2301      	movs	r3, #1
    1356:	6822      	ldr	r2, [r4, #0]
    1358:	7293      	strb	r3, [r2, #10]
    135a:	e7f1      	b.n	1340 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    135c:	0020      	movs	r0, r4
    135e:	68e3      	ldr	r3, [r4, #12]
    1360:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1362:	2302      	movs	r3, #2
    1364:	6822      	ldr	r2, [r4, #0]
    1366:	7293      	strb	r3, [r2, #10]
    1368:	e7ec      	b.n	1344 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    136a:	0020      	movs	r0, r4
    136c:	6923      	ldr	r3, [r4, #16]
    136e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1370:	2310      	movs	r3, #16
    1372:	6822      	ldr	r2, [r4, #0]
    1374:	7293      	strb	r3, [r2, #10]
    1376:	e7e7      	b.n	1348 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1378:	0020      	movs	r0, r4
    137a:	6963      	ldr	r3, [r4, #20]
    137c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    137e:	6823      	ldr	r3, [r4, #0]
    1380:	2220      	movs	r2, #32
    1382:	729a      	strb	r2, [r3, #10]
}
    1384:	e7e2      	b.n	134c <_tc_interrupt_handler+0x24>
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	20000184 	.word	0x20000184

0000138c <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    138c:	b510      	push	{r4, lr}
    138e:	2000      	movs	r0, #0
    1390:	4b01      	ldr	r3, [pc, #4]	; (1398 <TC0_Handler+0xc>)
    1392:	4798      	blx	r3
    1394:	bd10      	pop	{r4, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	00001329 	.word	0x00001329

0000139c <TC1_Handler>:
    139c:	b510      	push	{r4, lr}
    139e:	2001      	movs	r0, #1
    13a0:	4b01      	ldr	r3, [pc, #4]	; (13a8 <TC1_Handler+0xc>)
    13a2:	4798      	blx	r3
    13a4:	bd10      	pop	{r4, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	00001329 	.word	0x00001329

000013ac <TC2_Handler>:
    13ac:	b510      	push	{r4, lr}
    13ae:	2002      	movs	r0, #2
    13b0:	4b01      	ldr	r3, [pc, #4]	; (13b8 <TC2_Handler+0xc>)
    13b2:	4798      	blx	r3
    13b4:	bd10      	pop	{r4, pc}
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	00001329 	.word	0x00001329

000013bc <TC3_Handler>:
    13bc:	b510      	push	{r4, lr}
    13be:	2003      	movs	r0, #3
    13c0:	4b01      	ldr	r3, [pc, #4]	; (13c8 <TC3_Handler+0xc>)
    13c2:	4798      	blx	r3
    13c4:	bd10      	pop	{r4, pc}
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	00001329 	.word	0x00001329

000013cc <TC4_Handler>:
    13cc:	b510      	push	{r4, lr}
    13ce:	2004      	movs	r0, #4
    13d0:	4b01      	ldr	r3, [pc, #4]	; (13d8 <TC4_Handler+0xc>)
    13d2:	4798      	blx	r3
    13d4:	bd10      	pop	{r4, pc}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00001329 	.word	0x00001329

000013dc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    13dc:	b530      	push	{r4, r5, lr}
    13de:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    13e0:	a901      	add	r1, sp, #4
    13e2:	4b0c      	ldr	r3, [pc, #48]	; (1414 <_tc_get_inst_index+0x38>)
    13e4:	000a      	movs	r2, r1
    13e6:	cb32      	ldmia	r3!, {r1, r4, r5}
    13e8:	c232      	stmia	r2!, {r1, r4, r5}
    13ea:	cb12      	ldmia	r3!, {r1, r4}
    13ec:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    13ee:	9b01      	ldr	r3, [sp, #4]
    13f0:	4298      	cmp	r0, r3
    13f2:	d00b      	beq.n	140c <_tc_get_inst_index+0x30>
    13f4:	2301      	movs	r3, #1
    13f6:	a901      	add	r1, sp, #4
    13f8:	009a      	lsls	r2, r3, #2
    13fa:	5852      	ldr	r2, [r2, r1]
    13fc:	4282      	cmp	r2, r0
    13fe:	d006      	beq.n	140e <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1400:	3301      	adds	r3, #1
    1402:	2b05      	cmp	r3, #5
    1404:	d1f8      	bne.n	13f8 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1406:	2000      	movs	r0, #0
}
    1408:	b007      	add	sp, #28
    140a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    140c:	2300      	movs	r3, #0
			return i;
    140e:	b2d8      	uxtb	r0, r3
    1410:	e7fa      	b.n	1408 <_tc_get_inst_index+0x2c>
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	000028a8 	.word	0x000028a8

00001418 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1418:	b5f0      	push	{r4, r5, r6, r7, lr}
    141a:	46c6      	mov	lr, r8
    141c:	b500      	push	{lr}
    141e:	b08e      	sub	sp, #56	; 0x38
    1420:	0004      	movs	r4, r0
    1422:	000d      	movs	r5, r1
    1424:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1426:	0008      	movs	r0, r1
    1428:	4bae      	ldr	r3, [pc, #696]	; (16e4 <tc_init+0x2cc>)
    142a:	4798      	blx	r3
    142c:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    142e:	ab0c      	add	r3, sp, #48	; 0x30
    1430:	221b      	movs	r2, #27
    1432:	701a      	strb	r2, [r3, #0]
    1434:	705a      	strb	r2, [r3, #1]
    1436:	3201      	adds	r2, #1
    1438:	709a      	strb	r2, [r3, #2]
    143a:	70da      	strb	r2, [r3, #3]
    143c:	3201      	adds	r2, #1
    143e:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    1440:	a902      	add	r1, sp, #8
    1442:	4ba9      	ldr	r3, [pc, #676]	; (16e8 <tc_init+0x2d0>)
    1444:	3314      	adds	r3, #20
    1446:	000a      	movs	r2, r1
    1448:	cb83      	ldmia	r3!, {r0, r1, r7}
    144a:	c283      	stmia	r2!, {r0, r1, r7}
    144c:	cb83      	ldmia	r3!, {r0, r1, r7}
    144e:	c283      	stmia	r2!, {r0, r1, r7}
    1450:	cb83      	ldmia	r3!, {r0, r1, r7}
    1452:	c283      	stmia	r2!, {r0, r1, r7}
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1458:	2300      	movs	r3, #0
    145a:	60a3      	str	r3, [r4, #8]
    145c:	60e3      	str	r3, [r4, #12]
    145e:	6123      	str	r3, [r4, #16]
    1460:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1462:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1464:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1466:	4643      	mov	r3, r8
    1468:	009a      	lsls	r2, r3, #2
    146a:	4ba0      	ldr	r3, [pc, #640]	; (16ec <tc_init+0x2d4>)
    146c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    146e:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1470:	2334      	movs	r3, #52	; 0x34
    1472:	5cf3      	ldrb	r3, [r6, r3]
    1474:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1476:	78f3      	ldrb	r3, [r6, #3]
    1478:	2b08      	cmp	r3, #8
    147a:	d008      	beq.n	148e <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    147c:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    147e:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1480:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1482:	07db      	lsls	r3, r3, #31
    1484:	d508      	bpl.n	1498 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1486:	b00e      	add	sp, #56	; 0x38
    1488:	bc04      	pop	{r2}
    148a:	4690      	mov	r8, r2
    148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    148e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1490:	4642      	mov	r2, r8
    1492:	07d2      	lsls	r2, r2, #31
    1494:	d4f7      	bmi.n	1486 <tc_init+0x6e>
    1496:	e7f1      	b.n	147c <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1498:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    149a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    149c:	079b      	lsls	r3, r3, #30
    149e:	d4f2      	bmi.n	1486 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    14a0:	682b      	ldr	r3, [r5, #0]
    14a2:	079b      	lsls	r3, r3, #30
    14a4:	d4ef      	bmi.n	1486 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    14a6:	7c33      	ldrb	r3, [r6, #16]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d112      	bne.n	14d2 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    14ac:	7f33      	ldrb	r3, [r6, #28]
    14ae:	2b00      	cmp	r3, #0
    14b0:	d11b      	bne.n	14ea <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    14b2:	4643      	mov	r3, r8
    14b4:	005a      	lsls	r2, r3, #1
    14b6:	a902      	add	r1, sp, #8
    14b8:	1c53      	adds	r3, r2, #1
    14ba:	009b      	lsls	r3, r3, #2
    14bc:	5858      	ldr	r0, [r3, r1]
    14be:	4643      	mov	r3, r8
    14c0:	00db      	lsls	r3, r3, #3
    14c2:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    14c4:	b2d9      	uxtb	r1, r3
    14c6:	2904      	cmp	r1, #4
    14c8:	d823      	bhi.n	1512 <tc_init+0xfa>
    14ca:	008b      	lsls	r3, r1, #2
    14cc:	4988      	ldr	r1, [pc, #544]	; (16f0 <tc_init+0x2d8>)
    14ce:	58cb      	ldr	r3, [r1, r3]
    14d0:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14d2:	a901      	add	r1, sp, #4
    14d4:	2301      	movs	r3, #1
    14d6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    14d8:	2200      	movs	r2, #0
    14da:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    14dc:	7e32      	ldrb	r2, [r6, #24]
    14de:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    14e0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    14e2:	7d30      	ldrb	r0, [r6, #20]
    14e4:	4b83      	ldr	r3, [pc, #524]	; (16f4 <tc_init+0x2dc>)
    14e6:	4798      	blx	r3
    14e8:	e7e0      	b.n	14ac <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14ea:	a901      	add	r1, sp, #4
    14ec:	2301      	movs	r3, #1
    14ee:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    14f0:	2200      	movs	r2, #0
    14f2:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    14f4:	3224      	adds	r2, #36	; 0x24
    14f6:	18b2      	adds	r2, r6, r2
    14f8:	7812      	ldrb	r2, [r2, #0]
    14fa:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    14fc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    14fe:	331f      	adds	r3, #31
    1500:	18f3      	adds	r3, r6, r3
    1502:	7818      	ldrb	r0, [r3, #0]
    1504:	4b7b      	ldr	r3, [pc, #492]	; (16f4 <tc_init+0x2dc>)
    1506:	4798      	blx	r3
    1508:	e7d3      	b.n	14b2 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    150a:	497b      	ldr	r1, [pc, #492]	; (16f8 <tc_init+0x2e0>)
    150c:	694b      	ldr	r3, [r1, #20]
    150e:	4318      	orrs	r0, r3
    1510:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1512:	78f3      	ldrb	r3, [r6, #3]
    1514:	2b08      	cmp	r3, #8
    1516:	d100      	bne.n	151a <tc_init+0x102>
    1518:	e086      	b.n	1628 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    151a:	7833      	ldrb	r3, [r6, #0]
    151c:	466a      	mov	r2, sp
    151e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1520:	ab0c      	add	r3, sp, #48	; 0x30
    1522:	4642      	mov	r2, r8
    1524:	5c9f      	ldrb	r7, [r3, r2]
    1526:	4669      	mov	r1, sp
    1528:	0038      	movs	r0, r7
    152a:	4b74      	ldr	r3, [pc, #464]	; (16fc <tc_init+0x2e4>)
    152c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    152e:	0038      	movs	r0, r7
    1530:	4b73      	ldr	r3, [pc, #460]	; (1700 <tc_init+0x2e8>)
    1532:	4798      	blx	r3
			(uint32_t)config->counter_size |
    1534:	78f3      	ldrb	r3, [r6, #3]
    1536:	79f2      	ldrb	r2, [r6, #7]
    1538:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    153a:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    153c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    153e:	7a72      	ldrb	r2, [r6, #9]
    1540:	2a00      	cmp	r2, #0
    1542:	d002      	beq.n	154a <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1544:	2280      	movs	r2, #128	; 0x80
    1546:	0252      	lsls	r2, r2, #9
    1548:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    154a:	7ab2      	ldrb	r2, [r6, #10]
    154c:	2a00      	cmp	r2, #0
    154e:	d002      	beq.n	1556 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1550:	2280      	movs	r2, #128	; 0x80
    1552:	0292      	lsls	r2, r2, #10
    1554:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    1556:	7af2      	ldrb	r2, [r6, #11]
    1558:	2a00      	cmp	r2, #0
    155a:	d002      	beq.n	1562 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    155c:	2280      	movs	r2, #128	; 0x80
    155e:	0352      	lsls	r2, r2, #13
    1560:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    1562:	7b32      	ldrb	r2, [r6, #12]
    1564:	2a00      	cmp	r2, #0
    1566:	d002      	beq.n	156e <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    1568:	2280      	movs	r2, #128	; 0x80
    156a:	0392      	lsls	r2, r2, #14
    156c:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    156e:	7871      	ldrb	r1, [r6, #1]
    1570:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    1572:	78b2      	ldrb	r2, [r6, #2]
    1574:	01d2      	lsls	r2, r2, #7
    1576:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    1578:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    157a:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    157c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    157e:	2b00      	cmp	r3, #0
    1580:	d1fc      	bne.n	157c <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1582:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1584:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1586:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    1588:	2b00      	cmp	r3, #0
    158a:	d1fc      	bne.n	1586 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    158c:	79b3      	ldrb	r3, [r6, #6]
    158e:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    1590:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1592:	1e4b      	subs	r3, r1, #1
    1594:	4199      	sbcs	r1, r3
    1596:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1598:	7bb3      	ldrb	r3, [r6, #14]
    159a:	2b00      	cmp	r3, #0
    159c:	d001      	beq.n	15a2 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    159e:	2301      	movs	r3, #1
    15a0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    15a4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    15a6:	2b00      	cmp	r3, #0
    15a8:	d1fc      	bne.n	15a4 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    15aa:	33ff      	adds	r3, #255	; 0xff
    15ac:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    15ae:	2900      	cmp	r1, #0
    15b0:	d004      	beq.n	15bc <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15b2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    15b4:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    15b6:	2b00      	cmp	r3, #0
    15b8:	d1fc      	bne.n	15b4 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    15ba:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    15bc:	7a33      	ldrb	r3, [r6, #8]
    15be:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    15c2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    15c4:	2b00      	cmp	r3, #0
    15c6:	d1fc      	bne.n	15c2 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    15c8:	7923      	ldrb	r3, [r4, #4]
    15ca:	2b04      	cmp	r3, #4
    15cc:	d059      	beq.n	1682 <tc_init+0x26a>
    15ce:	2b08      	cmp	r3, #8
    15d0:	d074      	beq.n	16bc <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    15d2:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    15d4:	2b00      	cmp	r3, #0
    15d6:	d000      	beq.n	15da <tc_init+0x1c2>
    15d8:	e755      	b.n	1486 <tc_init+0x6e>
    15da:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    15dc:	2b00      	cmp	r3, #0
    15de:	d1fc      	bne.n	15da <tc_init+0x1c2>
				= config->counter_16_bit.value;
    15e0:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    15e2:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15e4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    15e6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    15e8:	2b00      	cmp	r3, #0
    15ea:	d1fc      	bne.n	15e6 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    15ec:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    15ee:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    15f2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    15f4:	2b00      	cmp	r3, #0
    15f6:	d1fc      	bne.n	15f2 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    15f8:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    15fa:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    15fc:	2000      	movs	r0, #0
    15fe:	e742      	b.n	1486 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    1600:	493d      	ldr	r1, [pc, #244]	; (16f8 <tc_init+0x2e0>)
    1602:	698b      	ldr	r3, [r1, #24]
    1604:	4318      	orrs	r0, r3
    1606:	6188      	str	r0, [r1, #24]
    1608:	e783      	b.n	1512 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    160a:	493b      	ldr	r1, [pc, #236]	; (16f8 <tc_init+0x2e0>)
    160c:	69cb      	ldr	r3, [r1, #28]
    160e:	4318      	orrs	r0, r3
    1610:	61c8      	str	r0, [r1, #28]
    1612:	e77e      	b.n	1512 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    1614:	4938      	ldr	r1, [pc, #224]	; (16f8 <tc_init+0x2e0>)
    1616:	6a0b      	ldr	r3, [r1, #32]
    1618:	4318      	orrs	r0, r3
    161a:	6208      	str	r0, [r1, #32]
    161c:	e779      	b.n	1512 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    161e:	4b36      	ldr	r3, [pc, #216]	; (16f8 <tc_init+0x2e0>)
    1620:	6a59      	ldr	r1, [r3, #36]	; 0x24
    1622:	4308      	orrs	r0, r1
    1624:	6258      	str	r0, [r3, #36]	; 0x24
    1626:	e774      	b.n	1512 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1628:	4643      	mov	r3, r8
    162a:	3301      	adds	r3, #1
    162c:	2b04      	cmp	r3, #4
    162e:	dd00      	ble.n	1632 <tc_init+0x21a>
    1630:	e773      	b.n	151a <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    1632:	ab02      	add	r3, sp, #8
    1634:	1cd1      	adds	r1, r2, #3
    1636:	0089      	lsls	r1, r1, #2
    1638:	58c9      	ldr	r1, [r1, r3]
    163a:	3202      	adds	r2, #2
    163c:	0092      	lsls	r2, r2, #2
    163e:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    1640:	b2da      	uxtb	r2, r3
    1642:	2a04      	cmp	r2, #4
    1644:	d900      	bls.n	1648 <tc_init+0x230>
    1646:	e768      	b.n	151a <tc_init+0x102>
    1648:	0093      	lsls	r3, r2, #2
    164a:	4a2e      	ldr	r2, [pc, #184]	; (1704 <tc_init+0x2ec>)
    164c:	58d3      	ldr	r3, [r2, r3]
    164e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1650:	4a29      	ldr	r2, [pc, #164]	; (16f8 <tc_init+0x2e0>)
    1652:	6953      	ldr	r3, [r2, #20]
    1654:	4319      	orrs	r1, r3
    1656:	6151      	str	r1, [r2, #20]
    1658:	e75f      	b.n	151a <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    165a:	4a27      	ldr	r2, [pc, #156]	; (16f8 <tc_init+0x2e0>)
    165c:	6993      	ldr	r3, [r2, #24]
    165e:	4319      	orrs	r1, r3
    1660:	6191      	str	r1, [r2, #24]
    1662:	e75a      	b.n	151a <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    1664:	4a24      	ldr	r2, [pc, #144]	; (16f8 <tc_init+0x2e0>)
    1666:	69d3      	ldr	r3, [r2, #28]
    1668:	4319      	orrs	r1, r3
    166a:	61d1      	str	r1, [r2, #28]
    166c:	e755      	b.n	151a <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    166e:	4a22      	ldr	r2, [pc, #136]	; (16f8 <tc_init+0x2e0>)
    1670:	6a13      	ldr	r3, [r2, #32]
    1672:	4319      	orrs	r1, r3
    1674:	6211      	str	r1, [r2, #32]
    1676:	e750      	b.n	151a <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    1678:	4b1f      	ldr	r3, [pc, #124]	; (16f8 <tc_init+0x2e0>)
    167a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    167c:	4311      	orrs	r1, r2
    167e:	6259      	str	r1, [r3, #36]	; 0x24
    1680:	e74b      	b.n	151a <tc_init+0x102>
    1682:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1684:	2b00      	cmp	r3, #0
    1686:	d1fc      	bne.n	1682 <tc_init+0x26a>
					config->counter_8_bit.value;
    1688:	3328      	adds	r3, #40	; 0x28
    168a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    168c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    168e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1690:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1692:	2b00      	cmp	r3, #0
    1694:	d1fc      	bne.n	1690 <tc_init+0x278>
					config->counter_8_bit.period;
    1696:	3329      	adds	r3, #41	; 0x29
    1698:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    169a:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    169c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    169e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    16a0:	2b00      	cmp	r3, #0
    16a2:	d1fc      	bne.n	169e <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    16a4:	332a      	adds	r3, #42	; 0x2a
    16a6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    16a8:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16aa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    16ac:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    16ae:	2b00      	cmp	r3, #0
    16b0:	d1fc      	bne.n	16ac <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    16b2:	332b      	adds	r3, #43	; 0x2b
    16b4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    16b6:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    16b8:	2000      	movs	r0, #0
    16ba:	e6e4      	b.n	1486 <tc_init+0x6e>
    16bc:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    16be:	2b00      	cmp	r3, #0
    16c0:	d1fc      	bne.n	16bc <tc_init+0x2a4>
				= config->counter_32_bit.value;
    16c2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    16c4:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16c6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    16c8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    16ca:	2b00      	cmp	r3, #0
    16cc:	d1fc      	bne.n	16c8 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    16ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    16d0:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    16d4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    16d6:	2b00      	cmp	r3, #0
    16d8:	d1fc      	bne.n	16d4 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    16da:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    16dc:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    16de:	2000      	movs	r0, #0
    16e0:	e6d1      	b.n	1486 <tc_init+0x6e>
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	000013dd 	.word	0x000013dd
    16e8:	000028a8 	.word	0x000028a8
    16ec:	20000184 	.word	0x20000184
    16f0:	00002880 	.word	0x00002880
    16f4:	00001295 	.word	0x00001295
    16f8:	40000400 	.word	0x40000400
    16fc:	00001199 	.word	0x00001199
    1700:	00001129 	.word	0x00001129
    1704:	00002894 	.word	0x00002894

00001708 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1708:	6802      	ldr	r2, [r0, #0]
    170a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    170c:	2b00      	cmp	r3, #0
    170e:	d1fc      	bne.n	170a <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1710:	7903      	ldrb	r3, [r0, #4]
    1712:	2b04      	cmp	r3, #4
    1714:	d005      	beq.n	1722 <tc_set_count_value+0x1a>
    1716:	2b08      	cmp	r3, #8
    1718:	d00b      	beq.n	1732 <tc_set_count_value+0x2a>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    171a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    171c:	2b00      	cmp	r3, #0
    171e:	d004      	beq.n	172a <tc_set_count_value+0x22>
	}
}
    1720:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1722:	b2c9      	uxtb	r1, r1
    1724:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    1726:	2000      	movs	r0, #0
    1728:	e7fa      	b.n	1720 <tc_set_count_value+0x18>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    172a:	b289      	uxth	r1, r1
    172c:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    172e:	2000      	movs	r0, #0
    1730:	e7f6      	b.n	1720 <tc_set_count_value+0x18>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1732:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    1734:	2000      	movs	r0, #0
    1736:	e7f3      	b.n	1720 <tc_set_count_value+0x18>

00001738 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1738:	e7fe      	b.n	1738 <Dummy_Handler>
	...

0000173c <Reset_Handler>:
{
    173c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    173e:	4a1a      	ldr	r2, [pc, #104]	; (17a8 <Reset_Handler+0x6c>)
    1740:	4b1a      	ldr	r3, [pc, #104]	; (17ac <Reset_Handler+0x70>)
    1742:	429a      	cmp	r2, r3
    1744:	d011      	beq.n	176a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1746:	001a      	movs	r2, r3
    1748:	4b19      	ldr	r3, [pc, #100]	; (17b0 <Reset_Handler+0x74>)
    174a:	429a      	cmp	r2, r3
    174c:	d20d      	bcs.n	176a <Reset_Handler+0x2e>
    174e:	4a19      	ldr	r2, [pc, #100]	; (17b4 <Reset_Handler+0x78>)
    1750:	3303      	adds	r3, #3
    1752:	1a9b      	subs	r3, r3, r2
    1754:	089b      	lsrs	r3, r3, #2
    1756:	3301      	adds	r3, #1
    1758:	009b      	lsls	r3, r3, #2
    175a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    175c:	4813      	ldr	r0, [pc, #76]	; (17ac <Reset_Handler+0x70>)
    175e:	4912      	ldr	r1, [pc, #72]	; (17a8 <Reset_Handler+0x6c>)
    1760:	588c      	ldr	r4, [r1, r2]
    1762:	5084      	str	r4, [r0, r2]
    1764:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1766:	429a      	cmp	r2, r3
    1768:	d1fa      	bne.n	1760 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    176a:	4a13      	ldr	r2, [pc, #76]	; (17b8 <Reset_Handler+0x7c>)
    176c:	4b13      	ldr	r3, [pc, #76]	; (17bc <Reset_Handler+0x80>)
    176e:	429a      	cmp	r2, r3
    1770:	d20a      	bcs.n	1788 <Reset_Handler+0x4c>
    1772:	43d3      	mvns	r3, r2
    1774:	4911      	ldr	r1, [pc, #68]	; (17bc <Reset_Handler+0x80>)
    1776:	185b      	adds	r3, r3, r1
    1778:	2103      	movs	r1, #3
    177a:	438b      	bics	r3, r1
    177c:	3304      	adds	r3, #4
    177e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1780:	2100      	movs	r1, #0
    1782:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1784:	4293      	cmp	r3, r2
    1786:	d1fc      	bne.n	1782 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1788:	4a0d      	ldr	r2, [pc, #52]	; (17c0 <Reset_Handler+0x84>)
    178a:	21ff      	movs	r1, #255	; 0xff
    178c:	4b0d      	ldr	r3, [pc, #52]	; (17c4 <Reset_Handler+0x88>)
    178e:	438b      	bics	r3, r1
    1790:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1792:	4a0d      	ldr	r2, [pc, #52]	; (17c8 <Reset_Handler+0x8c>)
    1794:	6853      	ldr	r3, [r2, #4]
    1796:	397f      	subs	r1, #127	; 0x7f
    1798:	430b      	orrs	r3, r1
    179a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    179c:	4b0b      	ldr	r3, [pc, #44]	; (17cc <Reset_Handler+0x90>)
    179e:	4798      	blx	r3
        main();
    17a0:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <Reset_Handler+0x94>)
    17a2:	4798      	blx	r3
    17a4:	e7fe      	b.n	17a4 <Reset_Handler+0x68>
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	00002a3c 	.word	0x00002a3c
    17ac:	20000000 	.word	0x20000000
    17b0:	20000070 	.word	0x20000070
    17b4:	20000004 	.word	0x20000004
    17b8:	20000070 	.word	0x20000070
    17bc:	200001a8 	.word	0x200001a8
    17c0:	e000ed00 	.word	0xe000ed00
    17c4:	00000000 	.word	0x00000000
    17c8:	41004000 	.word	0x41004000
    17cc:	00001d19 	.word	0x00001d19
    17d0:	00001951 	.word	0x00001951

000017d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    17d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17d6:	46c6      	mov	lr, r8
    17d8:	b500      	push	{lr}
    17da:	000c      	movs	r4, r1
    17dc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    17de:	2800      	cmp	r0, #0
    17e0:	d10f      	bne.n	1802 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    17e2:	2a00      	cmp	r2, #0
    17e4:	dd11      	ble.n	180a <_read+0x36>
    17e6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    17e8:	4e09      	ldr	r6, [pc, #36]	; (1810 <_read+0x3c>)
    17ea:	4d0a      	ldr	r5, [pc, #40]	; (1814 <_read+0x40>)
    17ec:	6830      	ldr	r0, [r6, #0]
    17ee:	0021      	movs	r1, r4
    17f0:	682b      	ldr	r3, [r5, #0]
    17f2:	4798      	blx	r3
		ptr++;
    17f4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    17f6:	42bc      	cmp	r4, r7
    17f8:	d1f8      	bne.n	17ec <_read+0x18>
		nChars++;
	}
	return nChars;
}
    17fa:	4640      	mov	r0, r8
    17fc:	bc04      	pop	{r2}
    17fe:	4690      	mov	r8, r2
    1800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1802:	2301      	movs	r3, #1
    1804:	425b      	negs	r3, r3
    1806:	4698      	mov	r8, r3
    1808:	e7f7      	b.n	17fa <_read+0x26>
	for (; len > 0; --len) {
    180a:	4680      	mov	r8, r0
    180c:	e7f5      	b.n	17fa <_read+0x26>
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	200001a0 	.word	0x200001a0
    1814:	20000198 	.word	0x20000198

00001818 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1818:	b5f0      	push	{r4, r5, r6, r7, lr}
    181a:	46c6      	mov	lr, r8
    181c:	b500      	push	{lr}
    181e:	000e      	movs	r6, r1
    1820:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1822:	3801      	subs	r0, #1
    1824:	2802      	cmp	r0, #2
    1826:	d810      	bhi.n	184a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1828:	2a00      	cmp	r2, #0
    182a:	d011      	beq.n	1850 <_write+0x38>
    182c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    182e:	4b0c      	ldr	r3, [pc, #48]	; (1860 <_write+0x48>)
    1830:	4698      	mov	r8, r3
    1832:	4f0c      	ldr	r7, [pc, #48]	; (1864 <_write+0x4c>)
    1834:	4643      	mov	r3, r8
    1836:	6818      	ldr	r0, [r3, #0]
    1838:	5d31      	ldrb	r1, [r6, r4]
    183a:	683b      	ldr	r3, [r7, #0]
    183c:	4798      	blx	r3
    183e:	2800      	cmp	r0, #0
    1840:	db08      	blt.n	1854 <_write+0x3c>
			return -1;
		}
		++nChars;
    1842:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1844:	42a5      	cmp	r5, r4
    1846:	d1f5      	bne.n	1834 <_write+0x1c>
    1848:	e006      	b.n	1858 <_write+0x40>
		return -1;
    184a:	2401      	movs	r4, #1
    184c:	4264      	negs	r4, r4
    184e:	e003      	b.n	1858 <_write+0x40>
	for (; len != 0; --len) {
    1850:	0014      	movs	r4, r2
    1852:	e001      	b.n	1858 <_write+0x40>
			return -1;
    1854:	2401      	movs	r4, #1
    1856:	4264      	negs	r4, r4
	}
	return nChars;
}
    1858:	0020      	movs	r0, r4
    185a:	bc04      	pop	{r2}
    185c:	4690      	mov	r8, r2
    185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1860:	200001a0 	.word	0x200001a0
    1864:	2000019c 	.word	0x2000019c

00001868 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1868:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    186a:	4a06      	ldr	r2, [pc, #24]	; (1884 <_sbrk+0x1c>)
    186c:	6812      	ldr	r2, [r2, #0]
    186e:	2a00      	cmp	r2, #0
    1870:	d004      	beq.n	187c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1872:	4a04      	ldr	r2, [pc, #16]	; (1884 <_sbrk+0x1c>)
    1874:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1876:	18c3      	adds	r3, r0, r3
    1878:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    187a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    187c:	4902      	ldr	r1, [pc, #8]	; (1888 <_sbrk+0x20>)
    187e:	4a01      	ldr	r2, [pc, #4]	; (1884 <_sbrk+0x1c>)
    1880:	6011      	str	r1, [r2, #0]
    1882:	e7f6      	b.n	1872 <_sbrk+0xa>
    1884:	200000c8 	.word	0x200000c8
    1888:	200021a8 	.word	0x200021a8

0000188c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    188c:	2001      	movs	r0, #1
    188e:	4240      	negs	r0, r0
    1890:	4770      	bx	lr

00001892 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1892:	2380      	movs	r3, #128	; 0x80
    1894:	019b      	lsls	r3, r3, #6
    1896:	604b      	str	r3, [r1, #4]

	return 0;
}
    1898:	2000      	movs	r0, #0
    189a:	4770      	bx	lr

0000189c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    189c:	2001      	movs	r0, #1
    189e:	4770      	bx	lr

000018a0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    18a0:	2000      	movs	r0, #0
    18a2:	4770      	bx	lr

000018a4 <extint_callback>:
	return (port_base->IN.reg & pin_mask);
    18a4:	4b06      	ldr	r3, [pc, #24]	; (18c0 <extint_callback+0x1c>)
    18a6:	6a1b      	ldr	r3, [r3, #32]

/* Updates the board LED to the current button state. */
static void update_led_state(void)
{
	bool pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	if (pin_state) {
    18a8:	075b      	lsls	r3, r3, #29
    18aa:	d404      	bmi.n	18b6 <extint_callback+0x12>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    18ac:	2280      	movs	r2, #128	; 0x80
    18ae:	00d2      	lsls	r2, r2, #3
    18b0:	4b04      	ldr	r3, [pc, #16]	; (18c4 <extint_callback+0x20>)
    18b2:	615a      	str	r2, [r3, #20]
 *  detection occurs.
 */
static void extint_callback(void)
{
	update_led_state();
}
    18b4:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    18b6:	2280      	movs	r2, #128	; 0x80
    18b8:	00d2      	lsls	r2, r2, #3
    18ba:	4b02      	ldr	r3, [pc, #8]	; (18c4 <extint_callback+0x20>)
    18bc:	619a      	str	r2, [r3, #24]
    18be:	e7f9      	b.n	18b4 <extint_callback+0x10>
    18c0:	40002800 	.word	0x40002800
    18c4:	40002880 	.word	0x40002880

000018c8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    18c8:	b570      	push	{r4, r5, r6, lr}
    18ca:	b082      	sub	sp, #8
    18cc:	0005      	movs	r5, r0
    18ce:	000e      	movs	r6, r1
	uint16_t temp = 0;
    18d0:	2200      	movs	r2, #0
    18d2:	466b      	mov	r3, sp
    18d4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    18d6:	4c06      	ldr	r4, [pc, #24]	; (18f0 <usart_serial_getchar+0x28>)
    18d8:	466b      	mov	r3, sp
    18da:	1d99      	adds	r1, r3, #6
    18dc:	0028      	movs	r0, r5
    18de:	47a0      	blx	r4
    18e0:	2800      	cmp	r0, #0
    18e2:	d1f9      	bne.n	18d8 <usart_serial_getchar+0x10>

	*c = temp;
    18e4:	466b      	mov	r3, sp
    18e6:	3306      	adds	r3, #6
    18e8:	881b      	ldrh	r3, [r3, #0]
    18ea:	7033      	strb	r3, [r6, #0]
}
    18ec:	b002      	add	sp, #8
    18ee:	bd70      	pop	{r4, r5, r6, pc}
    18f0:	00000c17 	.word	0x00000c17

000018f4 <usart_serial_putchar>:
{
    18f4:	b570      	push	{r4, r5, r6, lr}
    18f6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    18f8:	b28c      	uxth	r4, r1
    18fa:	4e03      	ldr	r6, [pc, #12]	; (1908 <usart_serial_putchar+0x14>)
    18fc:	0021      	movs	r1, r4
    18fe:	0028      	movs	r0, r5
    1900:	47b0      	blx	r6
    1902:	2800      	cmp	r0, #0
    1904:	d1fa      	bne.n	18fc <usart_serial_putchar+0x8>
}
    1906:	bd70      	pop	{r4, r5, r6, pc}
    1908:	00000bf1 	.word	0x00000bf1

0000190c <tc_callback_to_counter>:

/** TC Callback function.
 */
static void tc_callback_to_counter(
		struct tc_module *const module_inst)
{
    190c:	b510      	push	{r4, lr}
    190e:	0004      	movs	r4, r0
	static uint32_t count = 0;
	count ++;
    1910:	4b09      	ldr	r3, [pc, #36]	; (1938 <tc_callback_to_counter+0x2c>)
    1912:	681a      	ldr	r2, [r3, #0]
    1914:	1c50      	adds	r0, r2, #1
    1916:	6018      	str	r0, [r3, #0]
	if(count%800 == 0){
    1918:	21c8      	movs	r1, #200	; 0xc8
    191a:	0089      	lsls	r1, r1, #2
    191c:	4b07      	ldr	r3, [pc, #28]	; (193c <tc_callback_to_counter+0x30>)
    191e:	4798      	blx	r3
    1920:	2900      	cmp	r1, #0
    1922:	d004      	beq.n	192e <tc_callback_to_counter+0x22>
		printf("The output is triggered by TC counter\r\n");
	}

	tc_set_count_value(module_inst,TC_COUNT_VALUE);
    1924:	4906      	ldr	r1, [pc, #24]	; (1940 <tc_callback_to_counter+0x34>)
    1926:	0020      	movs	r0, r4
    1928:	4b06      	ldr	r3, [pc, #24]	; (1944 <tc_callback_to_counter+0x38>)
    192a:	4798      	blx	r3
}
    192c:	bd10      	pop	{r4, pc}
		printf("The output is triggered by TC counter\r\n");
    192e:	4806      	ldr	r0, [pc, #24]	; (1948 <tc_callback_to_counter+0x3c>)
    1930:	4b06      	ldr	r3, [pc, #24]	; (194c <tc_callback_to_counter+0x40>)
    1932:	4798      	blx	r3
    1934:	e7f6      	b.n	1924 <tc_callback_to_counter+0x18>
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	20000100 	.word	0x20000100
    193c:	00001cb9 	.word	0x00001cb9
    1940:	0000d8ef 	.word	0x0000d8ef
    1944:	00001709 	.word	0x00001709
    1948:	00002988 	.word	0x00002988
    194c:	00001e31 	.word	0x00001e31

00001950 <main>:
 *  \brief getting-started Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
*/
int main(void)
{
    1950:	b5f0      	push	{r4, r5, r6, r7, lr}
    1952:	b093      	sub	sp, #76	; 0x4c
	struct port_config pin;

	system_init();
    1954:	4b72      	ldr	r3, [pc, #456]	; (1b20 <main+0x1d0>)
    1956:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1958:	aa01      	add	r2, sp, #4
    195a:	2380      	movs	r3, #128	; 0x80
    195c:	05db      	lsls	r3, r3, #23
    195e:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1960:	2300      	movs	r3, #0
    1962:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    1964:	21ff      	movs	r1, #255	; 0xff
    1966:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    1968:	2100      	movs	r1, #0
    196a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    196c:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    196e:	2401      	movs	r4, #1
    1970:	2024      	movs	r0, #36	; 0x24
    1972:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    1974:	3001      	adds	r0, #1
    1976:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    1978:	3001      	adds	r0, #1
    197a:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    197c:	3001      	adds	r0, #1
    197e:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    1980:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1982:	3005      	adds	r0, #5
    1984:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    1986:	3001      	adds	r0, #1
    1988:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    198a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    198c:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    198e:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1990:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1992:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1994:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    1996:	2313      	movs	r3, #19
    1998:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    199a:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    199c:	2380      	movs	r3, #128	; 0x80
    199e:	035b      	lsls	r3, r3, #13
    19a0:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    19a2:	4b60      	ldr	r3, [pc, #384]	; (1b24 <main+0x1d4>)
    19a4:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    19a6:	4b60      	ldr	r3, [pc, #384]	; (1b28 <main+0x1d8>)
    19a8:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    19aa:	2301      	movs	r3, #1
    19ac:	425b      	negs	r3, r3
    19ae:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    19b0:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    19b2:	2396      	movs	r3, #150	; 0x96
    19b4:	021b      	lsls	r3, r3, #8
    19b6:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    19b8:	4d5c      	ldr	r5, [pc, #368]	; (1b2c <main+0x1dc>)
    19ba:	4b5d      	ldr	r3, [pc, #372]	; (1b30 <main+0x1e0>)
    19bc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    19be:	495d      	ldr	r1, [pc, #372]	; (1b34 <main+0x1e4>)
    19c0:	4b5d      	ldr	r3, [pc, #372]	; (1b38 <main+0x1e8>)
    19c2:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    19c4:	495d      	ldr	r1, [pc, #372]	; (1b3c <main+0x1ec>)
    19c6:	4b5e      	ldr	r3, [pc, #376]	; (1b40 <main+0x1f0>)
    19c8:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    19ca:	495e      	ldr	r1, [pc, #376]	; (1b44 <main+0x1f4>)
    19cc:	0028      	movs	r0, r5
    19ce:	4b5e      	ldr	r3, [pc, #376]	; (1b48 <main+0x1f8>)
    19d0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    19d2:	4f5e      	ldr	r7, [pc, #376]	; (1b4c <main+0x1fc>)
    19d4:	683b      	ldr	r3, [r7, #0]
    19d6:	6898      	ldr	r0, [r3, #8]
    19d8:	2100      	movs	r1, #0
    19da:	4e5d      	ldr	r6, [pc, #372]	; (1b50 <main+0x200>)
    19dc:	47b0      	blx	r6
	setbuf(stdin, NULL);
    19de:	683b      	ldr	r3, [r7, #0]
    19e0:	6858      	ldr	r0, [r3, #4]
    19e2:	2100      	movs	r1, #0
    19e4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    19e6:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    19e8:	0030      	movs	r0, r6
    19ea:	4b5a      	ldr	r3, [pc, #360]	; (1b54 <main+0x204>)
    19ec:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    19ee:	231f      	movs	r3, #31
    19f0:	4018      	ands	r0, r3
    19f2:	4084      	lsls	r4, r0
    19f4:	4b58      	ldr	r3, [pc, #352]	; (1b58 <main+0x208>)
    19f6:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    19f8:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    19fa:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    19fc:	2a00      	cmp	r2, #0
    19fe:	d1fc      	bne.n	19fa <main+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1a00:	6833      	ldr	r3, [r6, #0]
    1a02:	2502      	movs	r5, #2
    1a04:	432b      	orrs	r3, r5
    1a06:	6033      	str	r3, [r6, #0]
	extint_chan_get_config_defaults(&eint_chan_conf);
    1a08:	ac01      	add	r4, sp, #4
    1a0a:	0020      	movs	r0, r4
    1a0c:	4b53      	ldr	r3, [pc, #332]	; (1b5c <main+0x20c>)
    1a0e:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    1a10:	9501      	str	r5, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    1a12:	2500      	movs	r5, #0
    1a14:	6065      	str	r5, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    1a16:	2303      	movs	r3, #3
    1a18:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    1a1a:	3b02      	subs	r3, #2
    1a1c:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    1a1e:	0021      	movs	r1, r4
    1a20:	2002      	movs	r0, #2
    1a22:	4b4f      	ldr	r3, [pc, #316]	; (1b60 <main+0x210>)
    1a24:	4798      	blx	r3
	extint_register_callback(extint_callback,
    1a26:	2200      	movs	r2, #0
    1a28:	2102      	movs	r1, #2
    1a2a:	484e      	ldr	r0, [pc, #312]	; (1b64 <main+0x214>)
    1a2c:	4b4e      	ldr	r3, [pc, #312]	; (1b68 <main+0x218>)
    1a2e:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    1a30:	2100      	movs	r1, #0
    1a32:	2002      	movs	r0, #2
    1a34:	4b4d      	ldr	r3, [pc, #308]	; (1b6c <main+0x21c>)
    1a36:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1a38:	2300      	movs	r3, #0
    1a3a:	7025      	strb	r5, [r4, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1a3c:	70e5      	strb	r5, [r4, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1a3e:	2200      	movs	r2, #0
    1a40:	80a5      	strh	r5, [r4, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1a42:	71a2      	strb	r2, [r4, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1a44:	71e3      	strb	r3, [r4, #7]
	config->run_in_standby             = false;
    1a46:	7063      	strb	r3, [r4, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->on_demand                  = false;
    1a48:	70a3      	strb	r3, [r4, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1a4a:	7223      	strb	r3, [r4, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1a4c:	7263      	strb	r3, [r4, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1a4e:	72a3      	strb	r3, [r4, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1a50:	72e3      	strb	r3, [r4, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1a52:	7323      	strb	r3, [r4, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1a54:	73a3      	strb	r3, [r4, #14]
	config->oneshot                    = false;
    1a56:	7363      	strb	r3, [r4, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1a58:	7423      	strb	r3, [r4, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1a5a:	6165      	str	r5, [r4, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1a5c:	61a5      	str	r5, [r4, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1a5e:	7723      	strb	r3, [r4, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1a60:	6225      	str	r5, [r4, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1a62:	6265      	str	r5, [r4, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1a64:	8565      	strh	r5, [r4, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1a66:	85a5      	strh	r5, [r4, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    1a68:	2334      	movs	r3, #52	; 0x34
    1a6a:	54e2      	strb	r2, [r4, r3]
	config_tc.counter_16_bit.value = TC_COUNT_VALUE;
    1a6c:	4b40      	ldr	r3, [pc, #256]	; (1b70 <main+0x220>)
    1a6e:	8523      	strh	r3, [r4, #40]	; 0x28
	tc_init(&tc_instance, CONF_TC_INSTANCE, &config_tc);
    1a70:	4d40      	ldr	r5, [pc, #256]	; (1b74 <main+0x224>)
    1a72:	0022      	movs	r2, r4
    1a74:	4940      	ldr	r1, [pc, #256]	; (1b78 <main+0x228>)
    1a76:	0028      	movs	r0, r5
    1a78:	4b40      	ldr	r3, [pc, #256]	; (1b7c <main+0x22c>)
    1a7a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a7c:	682b      	ldr	r3, [r5, #0]
	return (tc_module->SYNCBUSY.reg);
    1a7e:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
    1a80:	2a00      	cmp	r2, #0
    1a82:	d1fc      	bne.n	1a7e <main+0x12e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1a84:	681a      	ldr	r2, [r3, #0]
    1a86:	2102      	movs	r1, #2
    1a88:	430a      	orrs	r2, r1
    1a8a:	601a      	str	r2, [r3, #0]
	tc_register_callback(
    1a8c:	4d39      	ldr	r5, [pc, #228]	; (1b74 <main+0x224>)
    1a8e:	2200      	movs	r2, #0
    1a90:	493b      	ldr	r1, [pc, #236]	; (1b80 <main+0x230>)
    1a92:	0028      	movs	r0, r5
    1a94:	4b3b      	ldr	r3, [pc, #236]	; (1b84 <main+0x234>)
    1a96:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1a98:	6828      	ldr	r0, [r5, #0]
    1a9a:	4b3b      	ldr	r3, [pc, #236]	; (1b88 <main+0x238>)
    1a9c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1a9e:	4b3b      	ldr	r3, [pc, #236]	; (1b8c <main+0x23c>)
    1aa0:	5c1a      	ldrb	r2, [r3, r0]
    1aa2:	231f      	movs	r3, #31
    1aa4:	4013      	ands	r3, r2
    1aa6:	2401      	movs	r4, #1
    1aa8:	0022      	movs	r2, r4
    1aaa:	409a      	lsls	r2, r3
    1aac:	4b2a      	ldr	r3, [pc, #168]	; (1b58 <main+0x208>)
    1aae:	601a      	str	r2, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1ab0:	7e6b      	ldrb	r3, [r5, #25]
    1ab2:	2201      	movs	r2, #1
    1ab4:	4313      	orrs	r3, r2
    1ab6:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1ab8:	682b      	ldr	r3, [r5, #0]
    1aba:	725c      	strb	r4, [r3, #9]

	/*Configures TC callback*/
	configure_tc_callbacks();

	/*Initialize the delay driver*/
	delay_init();
    1abc:	4b34      	ldr	r3, [pc, #208]	; (1b90 <main+0x240>)
    1abe:	4798      	blx	r3


	/* Output example information */
	puts(STRING_HEADER);
    1ac0:	4834      	ldr	r0, [pc, #208]	; (1b94 <main+0x244>)
    1ac2:	4b35      	ldr	r3, [pc, #212]	; (1b98 <main+0x248>)
    1ac4:	4798      	blx	r3
	cpu_irq_enable();
    1ac6:	4b35      	ldr	r3, [pc, #212]	; (1b9c <main+0x24c>)
    1ac8:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1aca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1ace:	b662      	cpsie	i
	config->input_pull = PORT_PIN_PULL_UP;
    1ad0:	a911      	add	r1, sp, #68	; 0x44
    1ad2:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
    1ad4:	2300      	movs	r3, #0
    1ad6:	708b      	strb	r3, [r1, #2]
	system_interrupt_enable_global();


    /*Configures PORT for LED0*/
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1ad8:	700c      	strb	r4, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
    1ada:	202a      	movs	r0, #42	; 0x2a
    1adc:	4b30      	ldr	r3, [pc, #192]	; (1ba0 <main+0x250>)
    1ade:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1ae0:	4c30      	ldr	r4, [pc, #192]	; (1ba4 <main+0x254>)
    1ae2:	2580      	movs	r5, #128	; 0x80
    1ae4:	00ed      	lsls	r5, r5, #3
    1ae6:	61a5      	str	r5, [r4, #24]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1ae8:	61e5      	str	r5, [r4, #28]

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	for (int i = 0; i < 3; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_s(1);
    1aea:	27fa      	movs	r7, #250	; 0xfa
    1aec:	00bf      	lsls	r7, r7, #2
    1aee:	0038      	movs	r0, r7
    1af0:	4e2d      	ldr	r6, [pc, #180]	; (1ba8 <main+0x258>)
    1af2:	47b0      	blx	r6
    1af4:	61e5      	str	r5, [r4, #28]
    1af6:	0038      	movs	r0, r7
    1af8:	47b0      	blx	r6
    1afa:	61e5      	str	r5, [r4, #28]
    1afc:	0038      	movs	r0, r7
    1afe:	47b0      	blx	r6
    1b00:	2414      	movs	r4, #20
    1b02:	4f28      	ldr	r7, [pc, #160]	; (1ba4 <main+0x254>)
    1b04:	002e      	movs	r6, r5
	}

	for (int i = 0; i < 20; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_ms(100);
    1b06:	4d28      	ldr	r5, [pc, #160]	; (1ba8 <main+0x258>)
    1b08:	61fe      	str	r6, [r7, #28]
    1b0a:	2064      	movs	r0, #100	; 0x64
    1b0c:	47a8      	blx	r5
    1b0e:	3c01      	subs	r4, #1
	for (int i = 0; i < 20; i++) {
    1b10:	2c00      	cmp	r4, #0
    1b12:	d1f9      	bne.n	1b08 <main+0x1b8>
		port_base->OUTSET.reg = pin_mask;
    1b14:	2280      	movs	r2, #128	; 0x80
    1b16:	00d2      	lsls	r2, r2, #3
    1b18:	4b22      	ldr	r3, [pc, #136]	; (1ba4 <main+0x254>)
    1b1a:	619a      	str	r2, [r3, #24]
    1b1c:	e7fe      	b.n	1b1c <main+0x1cc>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	000012c9 	.word	0x000012c9
    1b24:	00160002 	.word	0x00160002
    1b28:	00170002 	.word	0x00170002
    1b2c:	200000cc 	.word	0x200000cc
    1b30:	200001a0 	.word	0x200001a0
    1b34:	000018f5 	.word	0x000018f5
    1b38:	2000019c 	.word	0x2000019c
    1b3c:	000018c9 	.word	0x000018c9
    1b40:	20000198 	.word	0x20000198
    1b44:	42000c00 	.word	0x42000c00
    1b48:	0000088d 	.word	0x0000088d
    1b4c:	2000000c 	.word	0x2000000c
    1b50:	00001e45 	.word	0x00001e45
    1b54:	000007fd 	.word	0x000007fd
    1b58:	e000e100 	.word	0xe000e100
    1b5c:	00000389 	.word	0x00000389
    1b60:	0000039d 	.word	0x0000039d
    1b64:	000018a5 	.word	0x000018a5
    1b68:	00000229 	.word	0x00000229
    1b6c:	00000255 	.word	0x00000255
    1b70:	ffffd8ef 	.word	0xffffd8ef
    1b74:	20000104 	.word	0x20000104
    1b78:	42002c00 	.word	0x42002c00
    1b7c:	00001419 	.word	0x00001419
    1b80:	0000190d 	.word	0x0000190d
    1b84:	000012f5 	.word	0x000012f5
    1b88:	000013dd 	.word	0x000013dd
    1b8c:	000029b0 	.word	0x000029b0
    1b90:	00000115 	.word	0x00000115
    1b94:	000028e4 	.word	0x000028e4
    1b98:	00001e31 	.word	0x00001e31
    1b9c:	20000008 	.word	0x20000008
    1ba0:	00000429 	.word	0x00000429
    1ba4:	40002880 	.word	0x40002880
    1ba8:	00000155 	.word	0x00000155

00001bac <__udivsi3>:
    1bac:	2200      	movs	r2, #0
    1bae:	0843      	lsrs	r3, r0, #1
    1bb0:	428b      	cmp	r3, r1
    1bb2:	d374      	bcc.n	1c9e <__udivsi3+0xf2>
    1bb4:	0903      	lsrs	r3, r0, #4
    1bb6:	428b      	cmp	r3, r1
    1bb8:	d35f      	bcc.n	1c7a <__udivsi3+0xce>
    1bba:	0a03      	lsrs	r3, r0, #8
    1bbc:	428b      	cmp	r3, r1
    1bbe:	d344      	bcc.n	1c4a <__udivsi3+0x9e>
    1bc0:	0b03      	lsrs	r3, r0, #12
    1bc2:	428b      	cmp	r3, r1
    1bc4:	d328      	bcc.n	1c18 <__udivsi3+0x6c>
    1bc6:	0c03      	lsrs	r3, r0, #16
    1bc8:	428b      	cmp	r3, r1
    1bca:	d30d      	bcc.n	1be8 <__udivsi3+0x3c>
    1bcc:	22ff      	movs	r2, #255	; 0xff
    1bce:	0209      	lsls	r1, r1, #8
    1bd0:	ba12      	rev	r2, r2
    1bd2:	0c03      	lsrs	r3, r0, #16
    1bd4:	428b      	cmp	r3, r1
    1bd6:	d302      	bcc.n	1bde <__udivsi3+0x32>
    1bd8:	1212      	asrs	r2, r2, #8
    1bda:	0209      	lsls	r1, r1, #8
    1bdc:	d065      	beq.n	1caa <__udivsi3+0xfe>
    1bde:	0b03      	lsrs	r3, r0, #12
    1be0:	428b      	cmp	r3, r1
    1be2:	d319      	bcc.n	1c18 <__udivsi3+0x6c>
    1be4:	e000      	b.n	1be8 <__udivsi3+0x3c>
    1be6:	0a09      	lsrs	r1, r1, #8
    1be8:	0bc3      	lsrs	r3, r0, #15
    1bea:	428b      	cmp	r3, r1
    1bec:	d301      	bcc.n	1bf2 <__udivsi3+0x46>
    1bee:	03cb      	lsls	r3, r1, #15
    1bf0:	1ac0      	subs	r0, r0, r3
    1bf2:	4152      	adcs	r2, r2
    1bf4:	0b83      	lsrs	r3, r0, #14
    1bf6:	428b      	cmp	r3, r1
    1bf8:	d301      	bcc.n	1bfe <__udivsi3+0x52>
    1bfa:	038b      	lsls	r3, r1, #14
    1bfc:	1ac0      	subs	r0, r0, r3
    1bfe:	4152      	adcs	r2, r2
    1c00:	0b43      	lsrs	r3, r0, #13
    1c02:	428b      	cmp	r3, r1
    1c04:	d301      	bcc.n	1c0a <__udivsi3+0x5e>
    1c06:	034b      	lsls	r3, r1, #13
    1c08:	1ac0      	subs	r0, r0, r3
    1c0a:	4152      	adcs	r2, r2
    1c0c:	0b03      	lsrs	r3, r0, #12
    1c0e:	428b      	cmp	r3, r1
    1c10:	d301      	bcc.n	1c16 <__udivsi3+0x6a>
    1c12:	030b      	lsls	r3, r1, #12
    1c14:	1ac0      	subs	r0, r0, r3
    1c16:	4152      	adcs	r2, r2
    1c18:	0ac3      	lsrs	r3, r0, #11
    1c1a:	428b      	cmp	r3, r1
    1c1c:	d301      	bcc.n	1c22 <__udivsi3+0x76>
    1c1e:	02cb      	lsls	r3, r1, #11
    1c20:	1ac0      	subs	r0, r0, r3
    1c22:	4152      	adcs	r2, r2
    1c24:	0a83      	lsrs	r3, r0, #10
    1c26:	428b      	cmp	r3, r1
    1c28:	d301      	bcc.n	1c2e <__udivsi3+0x82>
    1c2a:	028b      	lsls	r3, r1, #10
    1c2c:	1ac0      	subs	r0, r0, r3
    1c2e:	4152      	adcs	r2, r2
    1c30:	0a43      	lsrs	r3, r0, #9
    1c32:	428b      	cmp	r3, r1
    1c34:	d301      	bcc.n	1c3a <__udivsi3+0x8e>
    1c36:	024b      	lsls	r3, r1, #9
    1c38:	1ac0      	subs	r0, r0, r3
    1c3a:	4152      	adcs	r2, r2
    1c3c:	0a03      	lsrs	r3, r0, #8
    1c3e:	428b      	cmp	r3, r1
    1c40:	d301      	bcc.n	1c46 <__udivsi3+0x9a>
    1c42:	020b      	lsls	r3, r1, #8
    1c44:	1ac0      	subs	r0, r0, r3
    1c46:	4152      	adcs	r2, r2
    1c48:	d2cd      	bcs.n	1be6 <__udivsi3+0x3a>
    1c4a:	09c3      	lsrs	r3, r0, #7
    1c4c:	428b      	cmp	r3, r1
    1c4e:	d301      	bcc.n	1c54 <__udivsi3+0xa8>
    1c50:	01cb      	lsls	r3, r1, #7
    1c52:	1ac0      	subs	r0, r0, r3
    1c54:	4152      	adcs	r2, r2
    1c56:	0983      	lsrs	r3, r0, #6
    1c58:	428b      	cmp	r3, r1
    1c5a:	d301      	bcc.n	1c60 <__udivsi3+0xb4>
    1c5c:	018b      	lsls	r3, r1, #6
    1c5e:	1ac0      	subs	r0, r0, r3
    1c60:	4152      	adcs	r2, r2
    1c62:	0943      	lsrs	r3, r0, #5
    1c64:	428b      	cmp	r3, r1
    1c66:	d301      	bcc.n	1c6c <__udivsi3+0xc0>
    1c68:	014b      	lsls	r3, r1, #5
    1c6a:	1ac0      	subs	r0, r0, r3
    1c6c:	4152      	adcs	r2, r2
    1c6e:	0903      	lsrs	r3, r0, #4
    1c70:	428b      	cmp	r3, r1
    1c72:	d301      	bcc.n	1c78 <__udivsi3+0xcc>
    1c74:	010b      	lsls	r3, r1, #4
    1c76:	1ac0      	subs	r0, r0, r3
    1c78:	4152      	adcs	r2, r2
    1c7a:	08c3      	lsrs	r3, r0, #3
    1c7c:	428b      	cmp	r3, r1
    1c7e:	d301      	bcc.n	1c84 <__udivsi3+0xd8>
    1c80:	00cb      	lsls	r3, r1, #3
    1c82:	1ac0      	subs	r0, r0, r3
    1c84:	4152      	adcs	r2, r2
    1c86:	0883      	lsrs	r3, r0, #2
    1c88:	428b      	cmp	r3, r1
    1c8a:	d301      	bcc.n	1c90 <__udivsi3+0xe4>
    1c8c:	008b      	lsls	r3, r1, #2
    1c8e:	1ac0      	subs	r0, r0, r3
    1c90:	4152      	adcs	r2, r2
    1c92:	0843      	lsrs	r3, r0, #1
    1c94:	428b      	cmp	r3, r1
    1c96:	d301      	bcc.n	1c9c <__udivsi3+0xf0>
    1c98:	004b      	lsls	r3, r1, #1
    1c9a:	1ac0      	subs	r0, r0, r3
    1c9c:	4152      	adcs	r2, r2
    1c9e:	1a41      	subs	r1, r0, r1
    1ca0:	d200      	bcs.n	1ca4 <__udivsi3+0xf8>
    1ca2:	4601      	mov	r1, r0
    1ca4:	4152      	adcs	r2, r2
    1ca6:	4610      	mov	r0, r2
    1ca8:	4770      	bx	lr
    1caa:	e7ff      	b.n	1cac <__udivsi3+0x100>
    1cac:	b501      	push	{r0, lr}
    1cae:	2000      	movs	r0, #0
    1cb0:	f000 f806 	bl	1cc0 <__aeabi_idiv0>
    1cb4:	bd02      	pop	{r1, pc}
    1cb6:	46c0      	nop			; (mov r8, r8)

00001cb8 <__aeabi_uidivmod>:
    1cb8:	2900      	cmp	r1, #0
    1cba:	d0f7      	beq.n	1cac <__udivsi3+0x100>
    1cbc:	e776      	b.n	1bac <__udivsi3>
    1cbe:	4770      	bx	lr

00001cc0 <__aeabi_idiv0>:
    1cc0:	4770      	bx	lr
    1cc2:	46c0      	nop			; (mov r8, r8)

00001cc4 <__aeabi_lmul>:
    1cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc6:	46ce      	mov	lr, r9
    1cc8:	4647      	mov	r7, r8
    1cca:	0415      	lsls	r5, r2, #16
    1ccc:	0c2d      	lsrs	r5, r5, #16
    1cce:	002e      	movs	r6, r5
    1cd0:	b580      	push	{r7, lr}
    1cd2:	0407      	lsls	r7, r0, #16
    1cd4:	0c14      	lsrs	r4, r2, #16
    1cd6:	0c3f      	lsrs	r7, r7, #16
    1cd8:	4699      	mov	r9, r3
    1cda:	0c03      	lsrs	r3, r0, #16
    1cdc:	437e      	muls	r6, r7
    1cde:	435d      	muls	r5, r3
    1ce0:	4367      	muls	r7, r4
    1ce2:	4363      	muls	r3, r4
    1ce4:	197f      	adds	r7, r7, r5
    1ce6:	0c34      	lsrs	r4, r6, #16
    1ce8:	19e4      	adds	r4, r4, r7
    1cea:	469c      	mov	ip, r3
    1cec:	42a5      	cmp	r5, r4
    1cee:	d903      	bls.n	1cf8 <__aeabi_lmul+0x34>
    1cf0:	2380      	movs	r3, #128	; 0x80
    1cf2:	025b      	lsls	r3, r3, #9
    1cf4:	4698      	mov	r8, r3
    1cf6:	44c4      	add	ip, r8
    1cf8:	464b      	mov	r3, r9
    1cfa:	4351      	muls	r1, r2
    1cfc:	4343      	muls	r3, r0
    1cfe:	0436      	lsls	r6, r6, #16
    1d00:	0c36      	lsrs	r6, r6, #16
    1d02:	0c25      	lsrs	r5, r4, #16
    1d04:	0424      	lsls	r4, r4, #16
    1d06:	4465      	add	r5, ip
    1d08:	19a4      	adds	r4, r4, r6
    1d0a:	1859      	adds	r1, r3, r1
    1d0c:	1949      	adds	r1, r1, r5
    1d0e:	0020      	movs	r0, r4
    1d10:	bc0c      	pop	{r2, r3}
    1d12:	4690      	mov	r8, r2
    1d14:	4699      	mov	r9, r3
    1d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d18 <__libc_init_array>:
    1d18:	b570      	push	{r4, r5, r6, lr}
    1d1a:	2600      	movs	r6, #0
    1d1c:	4d0c      	ldr	r5, [pc, #48]	; (1d50 <__libc_init_array+0x38>)
    1d1e:	4c0d      	ldr	r4, [pc, #52]	; (1d54 <__libc_init_array+0x3c>)
    1d20:	1b64      	subs	r4, r4, r5
    1d22:	10a4      	asrs	r4, r4, #2
    1d24:	42a6      	cmp	r6, r4
    1d26:	d109      	bne.n	1d3c <__libc_init_array+0x24>
    1d28:	2600      	movs	r6, #0
    1d2a:	f000 fe77 	bl	2a1c <_init>
    1d2e:	4d0a      	ldr	r5, [pc, #40]	; (1d58 <__libc_init_array+0x40>)
    1d30:	4c0a      	ldr	r4, [pc, #40]	; (1d5c <__libc_init_array+0x44>)
    1d32:	1b64      	subs	r4, r4, r5
    1d34:	10a4      	asrs	r4, r4, #2
    1d36:	42a6      	cmp	r6, r4
    1d38:	d105      	bne.n	1d46 <__libc_init_array+0x2e>
    1d3a:	bd70      	pop	{r4, r5, r6, pc}
    1d3c:	00b3      	lsls	r3, r6, #2
    1d3e:	58eb      	ldr	r3, [r5, r3]
    1d40:	4798      	blx	r3
    1d42:	3601      	adds	r6, #1
    1d44:	e7ee      	b.n	1d24 <__libc_init_array+0xc>
    1d46:	00b3      	lsls	r3, r6, #2
    1d48:	58eb      	ldr	r3, [r5, r3]
    1d4a:	4798      	blx	r3
    1d4c:	3601      	adds	r6, #1
    1d4e:	e7f2      	b.n	1d36 <__libc_init_array+0x1e>
    1d50:	00002a28 	.word	0x00002a28
    1d54:	00002a28 	.word	0x00002a28
    1d58:	00002a28 	.word	0x00002a28
    1d5c:	00002a2c 	.word	0x00002a2c

00001d60 <memset>:
    1d60:	0003      	movs	r3, r0
    1d62:	1882      	adds	r2, r0, r2
    1d64:	4293      	cmp	r3, r2
    1d66:	d100      	bne.n	1d6a <memset+0xa>
    1d68:	4770      	bx	lr
    1d6a:	7019      	strb	r1, [r3, #0]
    1d6c:	3301      	adds	r3, #1
    1d6e:	e7f9      	b.n	1d64 <memset+0x4>

00001d70 <_puts_r>:
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	0005      	movs	r5, r0
    1d74:	000e      	movs	r6, r1
    1d76:	2800      	cmp	r0, #0
    1d78:	d004      	beq.n	1d84 <_puts_r+0x14>
    1d7a:	6983      	ldr	r3, [r0, #24]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d101      	bne.n	1d84 <_puts_r+0x14>
    1d80:	f000 fada 	bl	2338 <__sinit>
    1d84:	69ab      	ldr	r3, [r5, #24]
    1d86:	68ac      	ldr	r4, [r5, #8]
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d102      	bne.n	1d92 <_puts_r+0x22>
    1d8c:	0028      	movs	r0, r5
    1d8e:	f000 fad3 	bl	2338 <__sinit>
    1d92:	4b24      	ldr	r3, [pc, #144]	; (1e24 <_puts_r+0xb4>)
    1d94:	429c      	cmp	r4, r3
    1d96:	d10f      	bne.n	1db8 <_puts_r+0x48>
    1d98:	686c      	ldr	r4, [r5, #4]
    1d9a:	89a3      	ldrh	r3, [r4, #12]
    1d9c:	071b      	lsls	r3, r3, #28
    1d9e:	d502      	bpl.n	1da6 <_puts_r+0x36>
    1da0:	6923      	ldr	r3, [r4, #16]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d120      	bne.n	1de8 <_puts_r+0x78>
    1da6:	0021      	movs	r1, r4
    1da8:	0028      	movs	r0, r5
    1daa:	f000 f957 	bl	205c <__swsetup_r>
    1dae:	2800      	cmp	r0, #0
    1db0:	d01a      	beq.n	1de8 <_puts_r+0x78>
    1db2:	2001      	movs	r0, #1
    1db4:	4240      	negs	r0, r0
    1db6:	bd70      	pop	{r4, r5, r6, pc}
    1db8:	4b1b      	ldr	r3, [pc, #108]	; (1e28 <_puts_r+0xb8>)
    1dba:	429c      	cmp	r4, r3
    1dbc:	d101      	bne.n	1dc2 <_puts_r+0x52>
    1dbe:	68ac      	ldr	r4, [r5, #8]
    1dc0:	e7eb      	b.n	1d9a <_puts_r+0x2a>
    1dc2:	4b1a      	ldr	r3, [pc, #104]	; (1e2c <_puts_r+0xbc>)
    1dc4:	429c      	cmp	r4, r3
    1dc6:	d1e8      	bne.n	1d9a <_puts_r+0x2a>
    1dc8:	68ec      	ldr	r4, [r5, #12]
    1dca:	e7e6      	b.n	1d9a <_puts_r+0x2a>
    1dcc:	3b01      	subs	r3, #1
    1dce:	3601      	adds	r6, #1
    1dd0:	60a3      	str	r3, [r4, #8]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	da04      	bge.n	1de0 <_puts_r+0x70>
    1dd6:	69a2      	ldr	r2, [r4, #24]
    1dd8:	4293      	cmp	r3, r2
    1dda:	db16      	blt.n	1e0a <_puts_r+0x9a>
    1ddc:	290a      	cmp	r1, #10
    1dde:	d014      	beq.n	1e0a <_puts_r+0x9a>
    1de0:	6823      	ldr	r3, [r4, #0]
    1de2:	1c5a      	adds	r2, r3, #1
    1de4:	6022      	str	r2, [r4, #0]
    1de6:	7019      	strb	r1, [r3, #0]
    1de8:	7831      	ldrb	r1, [r6, #0]
    1dea:	68a3      	ldr	r3, [r4, #8]
    1dec:	2900      	cmp	r1, #0
    1dee:	d1ed      	bne.n	1dcc <_puts_r+0x5c>
    1df0:	3b01      	subs	r3, #1
    1df2:	60a3      	str	r3, [r4, #8]
    1df4:	2b00      	cmp	r3, #0
    1df6:	da0f      	bge.n	1e18 <_puts_r+0xa8>
    1df8:	0022      	movs	r2, r4
    1dfa:	310a      	adds	r1, #10
    1dfc:	0028      	movs	r0, r5
    1dfe:	f000 f8d7 	bl	1fb0 <__swbuf_r>
    1e02:	1c43      	adds	r3, r0, #1
    1e04:	d0d5      	beq.n	1db2 <_puts_r+0x42>
    1e06:	200a      	movs	r0, #10
    1e08:	e7d5      	b.n	1db6 <_puts_r+0x46>
    1e0a:	0022      	movs	r2, r4
    1e0c:	0028      	movs	r0, r5
    1e0e:	f000 f8cf 	bl	1fb0 <__swbuf_r>
    1e12:	1c43      	adds	r3, r0, #1
    1e14:	d1e8      	bne.n	1de8 <_puts_r+0x78>
    1e16:	e7cc      	b.n	1db2 <_puts_r+0x42>
    1e18:	200a      	movs	r0, #10
    1e1a:	6823      	ldr	r3, [r4, #0]
    1e1c:	1c5a      	adds	r2, r3, #1
    1e1e:	6022      	str	r2, [r4, #0]
    1e20:	7018      	strb	r0, [r3, #0]
    1e22:	e7c8      	b.n	1db6 <_puts_r+0x46>
    1e24:	000029dc 	.word	0x000029dc
    1e28:	000029fc 	.word	0x000029fc
    1e2c:	000029bc 	.word	0x000029bc

00001e30 <puts>:
    1e30:	b510      	push	{r4, lr}
    1e32:	4b03      	ldr	r3, [pc, #12]	; (1e40 <puts+0x10>)
    1e34:	0001      	movs	r1, r0
    1e36:	6818      	ldr	r0, [r3, #0]
    1e38:	f7ff ff9a 	bl	1d70 <_puts_r>
    1e3c:	bd10      	pop	{r4, pc}
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	2000000c 	.word	0x2000000c

00001e44 <setbuf>:
    1e44:	424a      	negs	r2, r1
    1e46:	414a      	adcs	r2, r1
    1e48:	2380      	movs	r3, #128	; 0x80
    1e4a:	b510      	push	{r4, lr}
    1e4c:	0052      	lsls	r2, r2, #1
    1e4e:	00db      	lsls	r3, r3, #3
    1e50:	f000 f802 	bl	1e58 <setvbuf>
    1e54:	bd10      	pop	{r4, pc}
	...

00001e58 <setvbuf>:
    1e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5a:	001d      	movs	r5, r3
    1e5c:	4b4f      	ldr	r3, [pc, #316]	; (1f9c <setvbuf+0x144>)
    1e5e:	b085      	sub	sp, #20
    1e60:	681e      	ldr	r6, [r3, #0]
    1e62:	0004      	movs	r4, r0
    1e64:	000f      	movs	r7, r1
    1e66:	9200      	str	r2, [sp, #0]
    1e68:	2e00      	cmp	r6, #0
    1e6a:	d005      	beq.n	1e78 <setvbuf+0x20>
    1e6c:	69b3      	ldr	r3, [r6, #24]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d102      	bne.n	1e78 <setvbuf+0x20>
    1e72:	0030      	movs	r0, r6
    1e74:	f000 fa60 	bl	2338 <__sinit>
    1e78:	4b49      	ldr	r3, [pc, #292]	; (1fa0 <setvbuf+0x148>)
    1e7a:	429c      	cmp	r4, r3
    1e7c:	d150      	bne.n	1f20 <setvbuf+0xc8>
    1e7e:	6874      	ldr	r4, [r6, #4]
    1e80:	9b00      	ldr	r3, [sp, #0]
    1e82:	2b02      	cmp	r3, #2
    1e84:	d005      	beq.n	1e92 <setvbuf+0x3a>
    1e86:	2b01      	cmp	r3, #1
    1e88:	d900      	bls.n	1e8c <setvbuf+0x34>
    1e8a:	e084      	b.n	1f96 <setvbuf+0x13e>
    1e8c:	2d00      	cmp	r5, #0
    1e8e:	da00      	bge.n	1e92 <setvbuf+0x3a>
    1e90:	e081      	b.n	1f96 <setvbuf+0x13e>
    1e92:	0021      	movs	r1, r4
    1e94:	0030      	movs	r0, r6
    1e96:	f000 f9e1 	bl	225c <_fflush_r>
    1e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e9c:	2900      	cmp	r1, #0
    1e9e:	d008      	beq.n	1eb2 <setvbuf+0x5a>
    1ea0:	0023      	movs	r3, r4
    1ea2:	3344      	adds	r3, #68	; 0x44
    1ea4:	4299      	cmp	r1, r3
    1ea6:	d002      	beq.n	1eae <setvbuf+0x56>
    1ea8:	0030      	movs	r0, r6
    1eaa:	f000 fb51 	bl	2550 <_free_r>
    1eae:	2300      	movs	r3, #0
    1eb0:	6363      	str	r3, [r4, #52]	; 0x34
    1eb2:	2300      	movs	r3, #0
    1eb4:	61a3      	str	r3, [r4, #24]
    1eb6:	6063      	str	r3, [r4, #4]
    1eb8:	89a3      	ldrh	r3, [r4, #12]
    1eba:	061b      	lsls	r3, r3, #24
    1ebc:	d503      	bpl.n	1ec6 <setvbuf+0x6e>
    1ebe:	6921      	ldr	r1, [r4, #16]
    1ec0:	0030      	movs	r0, r6
    1ec2:	f000 fb45 	bl	2550 <_free_r>
    1ec6:	89a3      	ldrh	r3, [r4, #12]
    1ec8:	4a36      	ldr	r2, [pc, #216]	; (1fa4 <setvbuf+0x14c>)
    1eca:	4013      	ands	r3, r2
    1ecc:	81a3      	strh	r3, [r4, #12]
    1ece:	9b00      	ldr	r3, [sp, #0]
    1ed0:	2b02      	cmp	r3, #2
    1ed2:	d05a      	beq.n	1f8a <setvbuf+0x132>
    1ed4:	ab03      	add	r3, sp, #12
    1ed6:	aa02      	add	r2, sp, #8
    1ed8:	0021      	movs	r1, r4
    1eda:	0030      	movs	r0, r6
    1edc:	f000 fac2 	bl	2464 <__swhatbuf_r>
    1ee0:	89a3      	ldrh	r3, [r4, #12]
    1ee2:	4318      	orrs	r0, r3
    1ee4:	81a0      	strh	r0, [r4, #12]
    1ee6:	2d00      	cmp	r5, #0
    1ee8:	d124      	bne.n	1f34 <setvbuf+0xdc>
    1eea:	9d02      	ldr	r5, [sp, #8]
    1eec:	0028      	movs	r0, r5
    1eee:	f000 fb25 	bl	253c <malloc>
    1ef2:	9501      	str	r5, [sp, #4]
    1ef4:	1e07      	subs	r7, r0, #0
    1ef6:	d142      	bne.n	1f7e <setvbuf+0x126>
    1ef8:	9b02      	ldr	r3, [sp, #8]
    1efa:	9301      	str	r3, [sp, #4]
    1efc:	42ab      	cmp	r3, r5
    1efe:	d139      	bne.n	1f74 <setvbuf+0x11c>
    1f00:	2001      	movs	r0, #1
    1f02:	4240      	negs	r0, r0
    1f04:	2302      	movs	r3, #2
    1f06:	89a2      	ldrh	r2, [r4, #12]
    1f08:	4313      	orrs	r3, r2
    1f0a:	81a3      	strh	r3, [r4, #12]
    1f0c:	2300      	movs	r3, #0
    1f0e:	60a3      	str	r3, [r4, #8]
    1f10:	0023      	movs	r3, r4
    1f12:	3347      	adds	r3, #71	; 0x47
    1f14:	6023      	str	r3, [r4, #0]
    1f16:	6123      	str	r3, [r4, #16]
    1f18:	2301      	movs	r3, #1
    1f1a:	6163      	str	r3, [r4, #20]
    1f1c:	b005      	add	sp, #20
    1f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f20:	4b21      	ldr	r3, [pc, #132]	; (1fa8 <setvbuf+0x150>)
    1f22:	429c      	cmp	r4, r3
    1f24:	d101      	bne.n	1f2a <setvbuf+0xd2>
    1f26:	68b4      	ldr	r4, [r6, #8]
    1f28:	e7aa      	b.n	1e80 <setvbuf+0x28>
    1f2a:	4b20      	ldr	r3, [pc, #128]	; (1fac <setvbuf+0x154>)
    1f2c:	429c      	cmp	r4, r3
    1f2e:	d1a7      	bne.n	1e80 <setvbuf+0x28>
    1f30:	68f4      	ldr	r4, [r6, #12]
    1f32:	e7a5      	b.n	1e80 <setvbuf+0x28>
    1f34:	2f00      	cmp	r7, #0
    1f36:	d0d9      	beq.n	1eec <setvbuf+0x94>
    1f38:	69b3      	ldr	r3, [r6, #24]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d102      	bne.n	1f44 <setvbuf+0xec>
    1f3e:	0030      	movs	r0, r6
    1f40:	f000 f9fa 	bl	2338 <__sinit>
    1f44:	9b00      	ldr	r3, [sp, #0]
    1f46:	2b01      	cmp	r3, #1
    1f48:	d103      	bne.n	1f52 <setvbuf+0xfa>
    1f4a:	89a3      	ldrh	r3, [r4, #12]
    1f4c:	9a00      	ldr	r2, [sp, #0]
    1f4e:	431a      	orrs	r2, r3
    1f50:	81a2      	strh	r2, [r4, #12]
    1f52:	2008      	movs	r0, #8
    1f54:	89a3      	ldrh	r3, [r4, #12]
    1f56:	6027      	str	r7, [r4, #0]
    1f58:	6127      	str	r7, [r4, #16]
    1f5a:	6165      	str	r5, [r4, #20]
    1f5c:	4018      	ands	r0, r3
    1f5e:	d018      	beq.n	1f92 <setvbuf+0x13a>
    1f60:	2001      	movs	r0, #1
    1f62:	4018      	ands	r0, r3
    1f64:	2300      	movs	r3, #0
    1f66:	4298      	cmp	r0, r3
    1f68:	d011      	beq.n	1f8e <setvbuf+0x136>
    1f6a:	426d      	negs	r5, r5
    1f6c:	60a3      	str	r3, [r4, #8]
    1f6e:	61a5      	str	r5, [r4, #24]
    1f70:	0018      	movs	r0, r3
    1f72:	e7d3      	b.n	1f1c <setvbuf+0xc4>
    1f74:	9801      	ldr	r0, [sp, #4]
    1f76:	f000 fae1 	bl	253c <malloc>
    1f7a:	1e07      	subs	r7, r0, #0
    1f7c:	d0c0      	beq.n	1f00 <setvbuf+0xa8>
    1f7e:	2380      	movs	r3, #128	; 0x80
    1f80:	89a2      	ldrh	r2, [r4, #12]
    1f82:	9d01      	ldr	r5, [sp, #4]
    1f84:	4313      	orrs	r3, r2
    1f86:	81a3      	strh	r3, [r4, #12]
    1f88:	e7d6      	b.n	1f38 <setvbuf+0xe0>
    1f8a:	2000      	movs	r0, #0
    1f8c:	e7ba      	b.n	1f04 <setvbuf+0xac>
    1f8e:	60a5      	str	r5, [r4, #8]
    1f90:	e7c4      	b.n	1f1c <setvbuf+0xc4>
    1f92:	60a0      	str	r0, [r4, #8]
    1f94:	e7c2      	b.n	1f1c <setvbuf+0xc4>
    1f96:	2001      	movs	r0, #1
    1f98:	4240      	negs	r0, r0
    1f9a:	e7bf      	b.n	1f1c <setvbuf+0xc4>
    1f9c:	2000000c 	.word	0x2000000c
    1fa0:	000029dc 	.word	0x000029dc
    1fa4:	fffff35c 	.word	0xfffff35c
    1fa8:	000029fc 	.word	0x000029fc
    1fac:	000029bc 	.word	0x000029bc

00001fb0 <__swbuf_r>:
    1fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fb2:	0005      	movs	r5, r0
    1fb4:	000e      	movs	r6, r1
    1fb6:	0014      	movs	r4, r2
    1fb8:	2800      	cmp	r0, #0
    1fba:	d004      	beq.n	1fc6 <__swbuf_r+0x16>
    1fbc:	6983      	ldr	r3, [r0, #24]
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d101      	bne.n	1fc6 <__swbuf_r+0x16>
    1fc2:	f000 f9b9 	bl	2338 <__sinit>
    1fc6:	4b22      	ldr	r3, [pc, #136]	; (2050 <STACK_SIZE+0x50>)
    1fc8:	429c      	cmp	r4, r3
    1fca:	d12d      	bne.n	2028 <STACK_SIZE+0x28>
    1fcc:	686c      	ldr	r4, [r5, #4]
    1fce:	69a3      	ldr	r3, [r4, #24]
    1fd0:	60a3      	str	r3, [r4, #8]
    1fd2:	89a3      	ldrh	r3, [r4, #12]
    1fd4:	071b      	lsls	r3, r3, #28
    1fd6:	d531      	bpl.n	203c <STACK_SIZE+0x3c>
    1fd8:	6923      	ldr	r3, [r4, #16]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d02e      	beq.n	203c <STACK_SIZE+0x3c>
    1fde:	6823      	ldr	r3, [r4, #0]
    1fe0:	6922      	ldr	r2, [r4, #16]
    1fe2:	b2f7      	uxtb	r7, r6
    1fe4:	1a98      	subs	r0, r3, r2
    1fe6:	6963      	ldr	r3, [r4, #20]
    1fe8:	b2f6      	uxtb	r6, r6
    1fea:	4298      	cmp	r0, r3
    1fec:	db05      	blt.n	1ffa <__swbuf_r+0x4a>
    1fee:	0021      	movs	r1, r4
    1ff0:	0028      	movs	r0, r5
    1ff2:	f000 f933 	bl	225c <_fflush_r>
    1ff6:	2800      	cmp	r0, #0
    1ff8:	d126      	bne.n	2048 <STACK_SIZE+0x48>
    1ffa:	68a3      	ldr	r3, [r4, #8]
    1ffc:	3001      	adds	r0, #1
    1ffe:	3b01      	subs	r3, #1
    2000:	60a3      	str	r3, [r4, #8]
    2002:	6823      	ldr	r3, [r4, #0]
    2004:	1c5a      	adds	r2, r3, #1
    2006:	6022      	str	r2, [r4, #0]
    2008:	701f      	strb	r7, [r3, #0]
    200a:	6963      	ldr	r3, [r4, #20]
    200c:	4298      	cmp	r0, r3
    200e:	d004      	beq.n	201a <STACK_SIZE+0x1a>
    2010:	89a3      	ldrh	r3, [r4, #12]
    2012:	07db      	lsls	r3, r3, #31
    2014:	d51a      	bpl.n	204c <STACK_SIZE+0x4c>
    2016:	2e0a      	cmp	r6, #10
    2018:	d118      	bne.n	204c <STACK_SIZE+0x4c>
    201a:	0021      	movs	r1, r4
    201c:	0028      	movs	r0, r5
    201e:	f000 f91d 	bl	225c <_fflush_r>
    2022:	2800      	cmp	r0, #0
    2024:	d012      	beq.n	204c <STACK_SIZE+0x4c>
    2026:	e00f      	b.n	2048 <STACK_SIZE+0x48>
    2028:	4b0a      	ldr	r3, [pc, #40]	; (2054 <STACK_SIZE+0x54>)
    202a:	429c      	cmp	r4, r3
    202c:	d101      	bne.n	2032 <STACK_SIZE+0x32>
    202e:	68ac      	ldr	r4, [r5, #8]
    2030:	e7cd      	b.n	1fce <__swbuf_r+0x1e>
    2032:	4b09      	ldr	r3, [pc, #36]	; (2058 <STACK_SIZE+0x58>)
    2034:	429c      	cmp	r4, r3
    2036:	d1ca      	bne.n	1fce <__swbuf_r+0x1e>
    2038:	68ec      	ldr	r4, [r5, #12]
    203a:	e7c8      	b.n	1fce <__swbuf_r+0x1e>
    203c:	0021      	movs	r1, r4
    203e:	0028      	movs	r0, r5
    2040:	f000 f80c 	bl	205c <__swsetup_r>
    2044:	2800      	cmp	r0, #0
    2046:	d0ca      	beq.n	1fde <__swbuf_r+0x2e>
    2048:	2601      	movs	r6, #1
    204a:	4276      	negs	r6, r6
    204c:	0030      	movs	r0, r6
    204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2050:	000029dc 	.word	0x000029dc
    2054:	000029fc 	.word	0x000029fc
    2058:	000029bc 	.word	0x000029bc

0000205c <__swsetup_r>:
    205c:	4b36      	ldr	r3, [pc, #216]	; (2138 <__swsetup_r+0xdc>)
    205e:	b570      	push	{r4, r5, r6, lr}
    2060:	681d      	ldr	r5, [r3, #0]
    2062:	0006      	movs	r6, r0
    2064:	000c      	movs	r4, r1
    2066:	2d00      	cmp	r5, #0
    2068:	d005      	beq.n	2076 <__swsetup_r+0x1a>
    206a:	69ab      	ldr	r3, [r5, #24]
    206c:	2b00      	cmp	r3, #0
    206e:	d102      	bne.n	2076 <__swsetup_r+0x1a>
    2070:	0028      	movs	r0, r5
    2072:	f000 f961 	bl	2338 <__sinit>
    2076:	4b31      	ldr	r3, [pc, #196]	; (213c <__swsetup_r+0xe0>)
    2078:	429c      	cmp	r4, r3
    207a:	d10f      	bne.n	209c <__swsetup_r+0x40>
    207c:	686c      	ldr	r4, [r5, #4]
    207e:	230c      	movs	r3, #12
    2080:	5ee2      	ldrsh	r2, [r4, r3]
    2082:	b293      	uxth	r3, r2
    2084:	0719      	lsls	r1, r3, #28
    2086:	d42d      	bmi.n	20e4 <__swsetup_r+0x88>
    2088:	06d9      	lsls	r1, r3, #27
    208a:	d411      	bmi.n	20b0 <__swsetup_r+0x54>
    208c:	2309      	movs	r3, #9
    208e:	2001      	movs	r0, #1
    2090:	6033      	str	r3, [r6, #0]
    2092:	3337      	adds	r3, #55	; 0x37
    2094:	4313      	orrs	r3, r2
    2096:	81a3      	strh	r3, [r4, #12]
    2098:	4240      	negs	r0, r0
    209a:	bd70      	pop	{r4, r5, r6, pc}
    209c:	4b28      	ldr	r3, [pc, #160]	; (2140 <__swsetup_r+0xe4>)
    209e:	429c      	cmp	r4, r3
    20a0:	d101      	bne.n	20a6 <__swsetup_r+0x4a>
    20a2:	68ac      	ldr	r4, [r5, #8]
    20a4:	e7eb      	b.n	207e <__swsetup_r+0x22>
    20a6:	4b27      	ldr	r3, [pc, #156]	; (2144 <__swsetup_r+0xe8>)
    20a8:	429c      	cmp	r4, r3
    20aa:	d1e8      	bne.n	207e <__swsetup_r+0x22>
    20ac:	68ec      	ldr	r4, [r5, #12]
    20ae:	e7e6      	b.n	207e <__swsetup_r+0x22>
    20b0:	075b      	lsls	r3, r3, #29
    20b2:	d513      	bpl.n	20dc <__swsetup_r+0x80>
    20b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    20b6:	2900      	cmp	r1, #0
    20b8:	d008      	beq.n	20cc <__swsetup_r+0x70>
    20ba:	0023      	movs	r3, r4
    20bc:	3344      	adds	r3, #68	; 0x44
    20be:	4299      	cmp	r1, r3
    20c0:	d002      	beq.n	20c8 <__swsetup_r+0x6c>
    20c2:	0030      	movs	r0, r6
    20c4:	f000 fa44 	bl	2550 <_free_r>
    20c8:	2300      	movs	r3, #0
    20ca:	6363      	str	r3, [r4, #52]	; 0x34
    20cc:	2224      	movs	r2, #36	; 0x24
    20ce:	89a3      	ldrh	r3, [r4, #12]
    20d0:	4393      	bics	r3, r2
    20d2:	81a3      	strh	r3, [r4, #12]
    20d4:	2300      	movs	r3, #0
    20d6:	6063      	str	r3, [r4, #4]
    20d8:	6923      	ldr	r3, [r4, #16]
    20da:	6023      	str	r3, [r4, #0]
    20dc:	2308      	movs	r3, #8
    20de:	89a2      	ldrh	r2, [r4, #12]
    20e0:	4313      	orrs	r3, r2
    20e2:	81a3      	strh	r3, [r4, #12]
    20e4:	6923      	ldr	r3, [r4, #16]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d10b      	bne.n	2102 <__swsetup_r+0xa6>
    20ea:	21a0      	movs	r1, #160	; 0xa0
    20ec:	2280      	movs	r2, #128	; 0x80
    20ee:	89a3      	ldrh	r3, [r4, #12]
    20f0:	0089      	lsls	r1, r1, #2
    20f2:	0092      	lsls	r2, r2, #2
    20f4:	400b      	ands	r3, r1
    20f6:	4293      	cmp	r3, r2
    20f8:	d003      	beq.n	2102 <__swsetup_r+0xa6>
    20fa:	0021      	movs	r1, r4
    20fc:	0030      	movs	r0, r6
    20fe:	f000 f9d9 	bl	24b4 <__smakebuf_r>
    2102:	2301      	movs	r3, #1
    2104:	89a2      	ldrh	r2, [r4, #12]
    2106:	4013      	ands	r3, r2
    2108:	d011      	beq.n	212e <__swsetup_r+0xd2>
    210a:	2300      	movs	r3, #0
    210c:	60a3      	str	r3, [r4, #8]
    210e:	6963      	ldr	r3, [r4, #20]
    2110:	425b      	negs	r3, r3
    2112:	61a3      	str	r3, [r4, #24]
    2114:	2000      	movs	r0, #0
    2116:	6923      	ldr	r3, [r4, #16]
    2118:	4283      	cmp	r3, r0
    211a:	d1be      	bne.n	209a <__swsetup_r+0x3e>
    211c:	230c      	movs	r3, #12
    211e:	5ee2      	ldrsh	r2, [r4, r3]
    2120:	0613      	lsls	r3, r2, #24
    2122:	d5ba      	bpl.n	209a <__swsetup_r+0x3e>
    2124:	2340      	movs	r3, #64	; 0x40
    2126:	4313      	orrs	r3, r2
    2128:	81a3      	strh	r3, [r4, #12]
    212a:	3801      	subs	r0, #1
    212c:	e7b5      	b.n	209a <__swsetup_r+0x3e>
    212e:	0792      	lsls	r2, r2, #30
    2130:	d400      	bmi.n	2134 <__swsetup_r+0xd8>
    2132:	6963      	ldr	r3, [r4, #20]
    2134:	60a3      	str	r3, [r4, #8]
    2136:	e7ed      	b.n	2114 <__swsetup_r+0xb8>
    2138:	2000000c 	.word	0x2000000c
    213c:	000029dc 	.word	0x000029dc
    2140:	000029fc 	.word	0x000029fc
    2144:	000029bc 	.word	0x000029bc

00002148 <__sflush_r>:
    2148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    214a:	898a      	ldrh	r2, [r1, #12]
    214c:	0005      	movs	r5, r0
    214e:	000c      	movs	r4, r1
    2150:	0713      	lsls	r3, r2, #28
    2152:	d460      	bmi.n	2216 <__sflush_r+0xce>
    2154:	684b      	ldr	r3, [r1, #4]
    2156:	2b00      	cmp	r3, #0
    2158:	dc04      	bgt.n	2164 <__sflush_r+0x1c>
    215a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    215c:	2b00      	cmp	r3, #0
    215e:	dc01      	bgt.n	2164 <__sflush_r+0x1c>
    2160:	2000      	movs	r0, #0
    2162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2164:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2166:	2f00      	cmp	r7, #0
    2168:	d0fa      	beq.n	2160 <__sflush_r+0x18>
    216a:	2300      	movs	r3, #0
    216c:	682e      	ldr	r6, [r5, #0]
    216e:	602b      	str	r3, [r5, #0]
    2170:	2380      	movs	r3, #128	; 0x80
    2172:	015b      	lsls	r3, r3, #5
    2174:	401a      	ands	r2, r3
    2176:	d034      	beq.n	21e2 <__sflush_r+0x9a>
    2178:	6d60      	ldr	r0, [r4, #84]	; 0x54
    217a:	89a3      	ldrh	r3, [r4, #12]
    217c:	075b      	lsls	r3, r3, #29
    217e:	d506      	bpl.n	218e <__sflush_r+0x46>
    2180:	6863      	ldr	r3, [r4, #4]
    2182:	1ac0      	subs	r0, r0, r3
    2184:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2186:	2b00      	cmp	r3, #0
    2188:	d001      	beq.n	218e <__sflush_r+0x46>
    218a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    218c:	1ac0      	subs	r0, r0, r3
    218e:	0002      	movs	r2, r0
    2190:	6a21      	ldr	r1, [r4, #32]
    2192:	2300      	movs	r3, #0
    2194:	0028      	movs	r0, r5
    2196:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2198:	47b8      	blx	r7
    219a:	89a1      	ldrh	r1, [r4, #12]
    219c:	1c43      	adds	r3, r0, #1
    219e:	d106      	bne.n	21ae <__sflush_r+0x66>
    21a0:	682b      	ldr	r3, [r5, #0]
    21a2:	2b1d      	cmp	r3, #29
    21a4:	d831      	bhi.n	220a <__sflush_r+0xc2>
    21a6:	4a2c      	ldr	r2, [pc, #176]	; (2258 <__sflush_r+0x110>)
    21a8:	40da      	lsrs	r2, r3
    21aa:	07d3      	lsls	r3, r2, #31
    21ac:	d52d      	bpl.n	220a <__sflush_r+0xc2>
    21ae:	2300      	movs	r3, #0
    21b0:	6063      	str	r3, [r4, #4]
    21b2:	6923      	ldr	r3, [r4, #16]
    21b4:	6023      	str	r3, [r4, #0]
    21b6:	04cb      	lsls	r3, r1, #19
    21b8:	d505      	bpl.n	21c6 <__sflush_r+0x7e>
    21ba:	1c43      	adds	r3, r0, #1
    21bc:	d102      	bne.n	21c4 <__sflush_r+0x7c>
    21be:	682b      	ldr	r3, [r5, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d100      	bne.n	21c6 <__sflush_r+0x7e>
    21c4:	6560      	str	r0, [r4, #84]	; 0x54
    21c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21c8:	602e      	str	r6, [r5, #0]
    21ca:	2900      	cmp	r1, #0
    21cc:	d0c8      	beq.n	2160 <__sflush_r+0x18>
    21ce:	0023      	movs	r3, r4
    21d0:	3344      	adds	r3, #68	; 0x44
    21d2:	4299      	cmp	r1, r3
    21d4:	d002      	beq.n	21dc <__sflush_r+0x94>
    21d6:	0028      	movs	r0, r5
    21d8:	f000 f9ba 	bl	2550 <_free_r>
    21dc:	2000      	movs	r0, #0
    21de:	6360      	str	r0, [r4, #52]	; 0x34
    21e0:	e7bf      	b.n	2162 <__sflush_r+0x1a>
    21e2:	2301      	movs	r3, #1
    21e4:	6a21      	ldr	r1, [r4, #32]
    21e6:	0028      	movs	r0, r5
    21e8:	47b8      	blx	r7
    21ea:	1c43      	adds	r3, r0, #1
    21ec:	d1c5      	bne.n	217a <__sflush_r+0x32>
    21ee:	682b      	ldr	r3, [r5, #0]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d0c2      	beq.n	217a <__sflush_r+0x32>
    21f4:	2b1d      	cmp	r3, #29
    21f6:	d001      	beq.n	21fc <__sflush_r+0xb4>
    21f8:	2b16      	cmp	r3, #22
    21fa:	d101      	bne.n	2200 <__sflush_r+0xb8>
    21fc:	602e      	str	r6, [r5, #0]
    21fe:	e7af      	b.n	2160 <__sflush_r+0x18>
    2200:	2340      	movs	r3, #64	; 0x40
    2202:	89a2      	ldrh	r2, [r4, #12]
    2204:	4313      	orrs	r3, r2
    2206:	81a3      	strh	r3, [r4, #12]
    2208:	e7ab      	b.n	2162 <__sflush_r+0x1a>
    220a:	2340      	movs	r3, #64	; 0x40
    220c:	430b      	orrs	r3, r1
    220e:	2001      	movs	r0, #1
    2210:	81a3      	strh	r3, [r4, #12]
    2212:	4240      	negs	r0, r0
    2214:	e7a5      	b.n	2162 <__sflush_r+0x1a>
    2216:	690f      	ldr	r7, [r1, #16]
    2218:	2f00      	cmp	r7, #0
    221a:	d0a1      	beq.n	2160 <__sflush_r+0x18>
    221c:	680b      	ldr	r3, [r1, #0]
    221e:	600f      	str	r7, [r1, #0]
    2220:	1bdb      	subs	r3, r3, r7
    2222:	9301      	str	r3, [sp, #4]
    2224:	2300      	movs	r3, #0
    2226:	0792      	lsls	r2, r2, #30
    2228:	d100      	bne.n	222c <__sflush_r+0xe4>
    222a:	694b      	ldr	r3, [r1, #20]
    222c:	60a3      	str	r3, [r4, #8]
    222e:	9b01      	ldr	r3, [sp, #4]
    2230:	2b00      	cmp	r3, #0
    2232:	dc00      	bgt.n	2236 <__sflush_r+0xee>
    2234:	e794      	b.n	2160 <__sflush_r+0x18>
    2236:	9b01      	ldr	r3, [sp, #4]
    2238:	003a      	movs	r2, r7
    223a:	6a21      	ldr	r1, [r4, #32]
    223c:	0028      	movs	r0, r5
    223e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2240:	47b0      	blx	r6
    2242:	2800      	cmp	r0, #0
    2244:	dc03      	bgt.n	224e <__sflush_r+0x106>
    2246:	2340      	movs	r3, #64	; 0x40
    2248:	89a2      	ldrh	r2, [r4, #12]
    224a:	4313      	orrs	r3, r2
    224c:	e7df      	b.n	220e <__sflush_r+0xc6>
    224e:	9b01      	ldr	r3, [sp, #4]
    2250:	183f      	adds	r7, r7, r0
    2252:	1a1b      	subs	r3, r3, r0
    2254:	9301      	str	r3, [sp, #4]
    2256:	e7ea      	b.n	222e <__sflush_r+0xe6>
    2258:	20400001 	.word	0x20400001

0000225c <_fflush_r>:
    225c:	690b      	ldr	r3, [r1, #16]
    225e:	b570      	push	{r4, r5, r6, lr}
    2260:	0005      	movs	r5, r0
    2262:	000c      	movs	r4, r1
    2264:	2b00      	cmp	r3, #0
    2266:	d101      	bne.n	226c <_fflush_r+0x10>
    2268:	2000      	movs	r0, #0
    226a:	bd70      	pop	{r4, r5, r6, pc}
    226c:	2800      	cmp	r0, #0
    226e:	d004      	beq.n	227a <_fflush_r+0x1e>
    2270:	6983      	ldr	r3, [r0, #24]
    2272:	2b00      	cmp	r3, #0
    2274:	d101      	bne.n	227a <_fflush_r+0x1e>
    2276:	f000 f85f 	bl	2338 <__sinit>
    227a:	4b0b      	ldr	r3, [pc, #44]	; (22a8 <_fflush_r+0x4c>)
    227c:	429c      	cmp	r4, r3
    227e:	d109      	bne.n	2294 <_fflush_r+0x38>
    2280:	686c      	ldr	r4, [r5, #4]
    2282:	220c      	movs	r2, #12
    2284:	5ea3      	ldrsh	r3, [r4, r2]
    2286:	2b00      	cmp	r3, #0
    2288:	d0ee      	beq.n	2268 <_fflush_r+0xc>
    228a:	0021      	movs	r1, r4
    228c:	0028      	movs	r0, r5
    228e:	f7ff ff5b 	bl	2148 <__sflush_r>
    2292:	e7ea      	b.n	226a <_fflush_r+0xe>
    2294:	4b05      	ldr	r3, [pc, #20]	; (22ac <_fflush_r+0x50>)
    2296:	429c      	cmp	r4, r3
    2298:	d101      	bne.n	229e <_fflush_r+0x42>
    229a:	68ac      	ldr	r4, [r5, #8]
    229c:	e7f1      	b.n	2282 <_fflush_r+0x26>
    229e:	4b04      	ldr	r3, [pc, #16]	; (22b0 <_fflush_r+0x54>)
    22a0:	429c      	cmp	r4, r3
    22a2:	d1ee      	bne.n	2282 <_fflush_r+0x26>
    22a4:	68ec      	ldr	r4, [r5, #12]
    22a6:	e7ec      	b.n	2282 <_fflush_r+0x26>
    22a8:	000029dc 	.word	0x000029dc
    22ac:	000029fc 	.word	0x000029fc
    22b0:	000029bc 	.word	0x000029bc

000022b4 <_cleanup_r>:
    22b4:	b510      	push	{r4, lr}
    22b6:	4902      	ldr	r1, [pc, #8]	; (22c0 <_cleanup_r+0xc>)
    22b8:	f000 f8b2 	bl	2420 <_fwalk_reent>
    22bc:	bd10      	pop	{r4, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	0000225d 	.word	0x0000225d

000022c4 <std.isra.0>:
    22c4:	2300      	movs	r3, #0
    22c6:	b510      	push	{r4, lr}
    22c8:	0004      	movs	r4, r0
    22ca:	6003      	str	r3, [r0, #0]
    22cc:	6043      	str	r3, [r0, #4]
    22ce:	6083      	str	r3, [r0, #8]
    22d0:	8181      	strh	r1, [r0, #12]
    22d2:	6643      	str	r3, [r0, #100]	; 0x64
    22d4:	81c2      	strh	r2, [r0, #14]
    22d6:	6103      	str	r3, [r0, #16]
    22d8:	6143      	str	r3, [r0, #20]
    22da:	6183      	str	r3, [r0, #24]
    22dc:	0019      	movs	r1, r3
    22de:	2208      	movs	r2, #8
    22e0:	305c      	adds	r0, #92	; 0x5c
    22e2:	f7ff fd3d 	bl	1d60 <memset>
    22e6:	4b05      	ldr	r3, [pc, #20]	; (22fc <std.isra.0+0x38>)
    22e8:	6224      	str	r4, [r4, #32]
    22ea:	6263      	str	r3, [r4, #36]	; 0x24
    22ec:	4b04      	ldr	r3, [pc, #16]	; (2300 <std.isra.0+0x3c>)
    22ee:	62a3      	str	r3, [r4, #40]	; 0x28
    22f0:	4b04      	ldr	r3, [pc, #16]	; (2304 <std.isra.0+0x40>)
    22f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    22f4:	4b04      	ldr	r3, [pc, #16]	; (2308 <std.isra.0+0x44>)
    22f6:	6323      	str	r3, [r4, #48]	; 0x30
    22f8:	bd10      	pop	{r4, pc}
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	000026c5 	.word	0x000026c5
    2300:	000026ed 	.word	0x000026ed
    2304:	00002725 	.word	0x00002725
    2308:	00002751 	.word	0x00002751

0000230c <__sfmoreglue>:
    230c:	b570      	push	{r4, r5, r6, lr}
    230e:	2568      	movs	r5, #104	; 0x68
    2310:	1e4a      	subs	r2, r1, #1
    2312:	4355      	muls	r5, r2
    2314:	000e      	movs	r6, r1
    2316:	0029      	movs	r1, r5
    2318:	3174      	adds	r1, #116	; 0x74
    231a:	f000 f963 	bl	25e4 <_malloc_r>
    231e:	1e04      	subs	r4, r0, #0
    2320:	d008      	beq.n	2334 <__sfmoreglue+0x28>
    2322:	2100      	movs	r1, #0
    2324:	002a      	movs	r2, r5
    2326:	6001      	str	r1, [r0, #0]
    2328:	6046      	str	r6, [r0, #4]
    232a:	300c      	adds	r0, #12
    232c:	60a0      	str	r0, [r4, #8]
    232e:	3268      	adds	r2, #104	; 0x68
    2330:	f7ff fd16 	bl	1d60 <memset>
    2334:	0020      	movs	r0, r4
    2336:	bd70      	pop	{r4, r5, r6, pc}

00002338 <__sinit>:
    2338:	6983      	ldr	r3, [r0, #24]
    233a:	b513      	push	{r0, r1, r4, lr}
    233c:	0004      	movs	r4, r0
    233e:	2b00      	cmp	r3, #0
    2340:	d128      	bne.n	2394 <__sinit+0x5c>
    2342:	6483      	str	r3, [r0, #72]	; 0x48
    2344:	64c3      	str	r3, [r0, #76]	; 0x4c
    2346:	6503      	str	r3, [r0, #80]	; 0x50
    2348:	4b13      	ldr	r3, [pc, #76]	; (2398 <__sinit+0x60>)
    234a:	4a14      	ldr	r2, [pc, #80]	; (239c <__sinit+0x64>)
    234c:	681b      	ldr	r3, [r3, #0]
    234e:	6282      	str	r2, [r0, #40]	; 0x28
    2350:	9301      	str	r3, [sp, #4]
    2352:	4298      	cmp	r0, r3
    2354:	d101      	bne.n	235a <__sinit+0x22>
    2356:	2301      	movs	r3, #1
    2358:	6183      	str	r3, [r0, #24]
    235a:	0020      	movs	r0, r4
    235c:	f000 f820 	bl	23a0 <__sfp>
    2360:	6060      	str	r0, [r4, #4]
    2362:	0020      	movs	r0, r4
    2364:	f000 f81c 	bl	23a0 <__sfp>
    2368:	60a0      	str	r0, [r4, #8]
    236a:	0020      	movs	r0, r4
    236c:	f000 f818 	bl	23a0 <__sfp>
    2370:	2200      	movs	r2, #0
    2372:	60e0      	str	r0, [r4, #12]
    2374:	2104      	movs	r1, #4
    2376:	6860      	ldr	r0, [r4, #4]
    2378:	f7ff ffa4 	bl	22c4 <std.isra.0>
    237c:	2201      	movs	r2, #1
    237e:	2109      	movs	r1, #9
    2380:	68a0      	ldr	r0, [r4, #8]
    2382:	f7ff ff9f 	bl	22c4 <std.isra.0>
    2386:	2202      	movs	r2, #2
    2388:	2112      	movs	r1, #18
    238a:	68e0      	ldr	r0, [r4, #12]
    238c:	f7ff ff9a 	bl	22c4 <std.isra.0>
    2390:	2301      	movs	r3, #1
    2392:	61a3      	str	r3, [r4, #24]
    2394:	bd13      	pop	{r0, r1, r4, pc}
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	000029b8 	.word	0x000029b8
    239c:	000022b5 	.word	0x000022b5

000023a0 <__sfp>:
    23a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23a2:	4b1e      	ldr	r3, [pc, #120]	; (241c <__sfp+0x7c>)
    23a4:	0007      	movs	r7, r0
    23a6:	681e      	ldr	r6, [r3, #0]
    23a8:	69b3      	ldr	r3, [r6, #24]
    23aa:	2b00      	cmp	r3, #0
    23ac:	d102      	bne.n	23b4 <__sfp+0x14>
    23ae:	0030      	movs	r0, r6
    23b0:	f7ff ffc2 	bl	2338 <__sinit>
    23b4:	3648      	adds	r6, #72	; 0x48
    23b6:	68b4      	ldr	r4, [r6, #8]
    23b8:	6873      	ldr	r3, [r6, #4]
    23ba:	3b01      	subs	r3, #1
    23bc:	d504      	bpl.n	23c8 <__sfp+0x28>
    23be:	6833      	ldr	r3, [r6, #0]
    23c0:	2b00      	cmp	r3, #0
    23c2:	d007      	beq.n	23d4 <__sfp+0x34>
    23c4:	6836      	ldr	r6, [r6, #0]
    23c6:	e7f6      	b.n	23b6 <__sfp+0x16>
    23c8:	220c      	movs	r2, #12
    23ca:	5ea5      	ldrsh	r5, [r4, r2]
    23cc:	2d00      	cmp	r5, #0
    23ce:	d00d      	beq.n	23ec <__sfp+0x4c>
    23d0:	3468      	adds	r4, #104	; 0x68
    23d2:	e7f2      	b.n	23ba <__sfp+0x1a>
    23d4:	2104      	movs	r1, #4
    23d6:	0038      	movs	r0, r7
    23d8:	f7ff ff98 	bl	230c <__sfmoreglue>
    23dc:	6030      	str	r0, [r6, #0]
    23de:	2800      	cmp	r0, #0
    23e0:	d1f0      	bne.n	23c4 <__sfp+0x24>
    23e2:	230c      	movs	r3, #12
    23e4:	0004      	movs	r4, r0
    23e6:	603b      	str	r3, [r7, #0]
    23e8:	0020      	movs	r0, r4
    23ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23ec:	2301      	movs	r3, #1
    23ee:	0020      	movs	r0, r4
    23f0:	425b      	negs	r3, r3
    23f2:	81e3      	strh	r3, [r4, #14]
    23f4:	3302      	adds	r3, #2
    23f6:	81a3      	strh	r3, [r4, #12]
    23f8:	6665      	str	r5, [r4, #100]	; 0x64
    23fa:	6025      	str	r5, [r4, #0]
    23fc:	60a5      	str	r5, [r4, #8]
    23fe:	6065      	str	r5, [r4, #4]
    2400:	6125      	str	r5, [r4, #16]
    2402:	6165      	str	r5, [r4, #20]
    2404:	61a5      	str	r5, [r4, #24]
    2406:	2208      	movs	r2, #8
    2408:	0029      	movs	r1, r5
    240a:	305c      	adds	r0, #92	; 0x5c
    240c:	f7ff fca8 	bl	1d60 <memset>
    2410:	6365      	str	r5, [r4, #52]	; 0x34
    2412:	63a5      	str	r5, [r4, #56]	; 0x38
    2414:	64a5      	str	r5, [r4, #72]	; 0x48
    2416:	64e5      	str	r5, [r4, #76]	; 0x4c
    2418:	e7e6      	b.n	23e8 <__sfp+0x48>
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	000029b8 	.word	0x000029b8

00002420 <_fwalk_reent>:
    2420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2422:	0004      	movs	r4, r0
    2424:	0007      	movs	r7, r0
    2426:	2600      	movs	r6, #0
    2428:	9101      	str	r1, [sp, #4]
    242a:	3448      	adds	r4, #72	; 0x48
    242c:	2c00      	cmp	r4, #0
    242e:	d101      	bne.n	2434 <_fwalk_reent+0x14>
    2430:	0030      	movs	r0, r6
    2432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2434:	6863      	ldr	r3, [r4, #4]
    2436:	68a5      	ldr	r5, [r4, #8]
    2438:	9300      	str	r3, [sp, #0]
    243a:	9b00      	ldr	r3, [sp, #0]
    243c:	3b01      	subs	r3, #1
    243e:	9300      	str	r3, [sp, #0]
    2440:	d501      	bpl.n	2446 <_fwalk_reent+0x26>
    2442:	6824      	ldr	r4, [r4, #0]
    2444:	e7f2      	b.n	242c <_fwalk_reent+0xc>
    2446:	89ab      	ldrh	r3, [r5, #12]
    2448:	2b01      	cmp	r3, #1
    244a:	d908      	bls.n	245e <_fwalk_reent+0x3e>
    244c:	220e      	movs	r2, #14
    244e:	5eab      	ldrsh	r3, [r5, r2]
    2450:	3301      	adds	r3, #1
    2452:	d004      	beq.n	245e <_fwalk_reent+0x3e>
    2454:	0029      	movs	r1, r5
    2456:	0038      	movs	r0, r7
    2458:	9b01      	ldr	r3, [sp, #4]
    245a:	4798      	blx	r3
    245c:	4306      	orrs	r6, r0
    245e:	3568      	adds	r5, #104	; 0x68
    2460:	e7eb      	b.n	243a <_fwalk_reent+0x1a>
	...

00002464 <__swhatbuf_r>:
    2464:	b570      	push	{r4, r5, r6, lr}
    2466:	000e      	movs	r6, r1
    2468:	001d      	movs	r5, r3
    246a:	230e      	movs	r3, #14
    246c:	5ec9      	ldrsh	r1, [r1, r3]
    246e:	b090      	sub	sp, #64	; 0x40
    2470:	0014      	movs	r4, r2
    2472:	2900      	cmp	r1, #0
    2474:	da07      	bge.n	2486 <__swhatbuf_r+0x22>
    2476:	2300      	movs	r3, #0
    2478:	602b      	str	r3, [r5, #0]
    247a:	89b3      	ldrh	r3, [r6, #12]
    247c:	061b      	lsls	r3, r3, #24
    247e:	d411      	bmi.n	24a4 <__swhatbuf_r+0x40>
    2480:	2380      	movs	r3, #128	; 0x80
    2482:	00db      	lsls	r3, r3, #3
    2484:	e00f      	b.n	24a6 <__swhatbuf_r+0x42>
    2486:	aa01      	add	r2, sp, #4
    2488:	f000 f98e 	bl	27a8 <_fstat_r>
    248c:	2800      	cmp	r0, #0
    248e:	dbf2      	blt.n	2476 <__swhatbuf_r+0x12>
    2490:	22f0      	movs	r2, #240	; 0xf0
    2492:	9b02      	ldr	r3, [sp, #8]
    2494:	0212      	lsls	r2, r2, #8
    2496:	4013      	ands	r3, r2
    2498:	4a05      	ldr	r2, [pc, #20]	; (24b0 <__swhatbuf_r+0x4c>)
    249a:	189b      	adds	r3, r3, r2
    249c:	425a      	negs	r2, r3
    249e:	4153      	adcs	r3, r2
    24a0:	602b      	str	r3, [r5, #0]
    24a2:	e7ed      	b.n	2480 <__swhatbuf_r+0x1c>
    24a4:	2340      	movs	r3, #64	; 0x40
    24a6:	2000      	movs	r0, #0
    24a8:	6023      	str	r3, [r4, #0]
    24aa:	b010      	add	sp, #64	; 0x40
    24ac:	bd70      	pop	{r4, r5, r6, pc}
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	ffffe000 	.word	0xffffe000

000024b4 <__smakebuf_r>:
    24b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    24b6:	2602      	movs	r6, #2
    24b8:	898b      	ldrh	r3, [r1, #12]
    24ba:	0005      	movs	r5, r0
    24bc:	000c      	movs	r4, r1
    24be:	4233      	tst	r3, r6
    24c0:	d006      	beq.n	24d0 <__smakebuf_r+0x1c>
    24c2:	0023      	movs	r3, r4
    24c4:	3347      	adds	r3, #71	; 0x47
    24c6:	6023      	str	r3, [r4, #0]
    24c8:	6123      	str	r3, [r4, #16]
    24ca:	2301      	movs	r3, #1
    24cc:	6163      	str	r3, [r4, #20]
    24ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    24d0:	ab01      	add	r3, sp, #4
    24d2:	466a      	mov	r2, sp
    24d4:	f7ff ffc6 	bl	2464 <__swhatbuf_r>
    24d8:	9900      	ldr	r1, [sp, #0]
    24da:	0007      	movs	r7, r0
    24dc:	0028      	movs	r0, r5
    24de:	f000 f881 	bl	25e4 <_malloc_r>
    24e2:	2800      	cmp	r0, #0
    24e4:	d108      	bne.n	24f8 <__smakebuf_r+0x44>
    24e6:	220c      	movs	r2, #12
    24e8:	5ea3      	ldrsh	r3, [r4, r2]
    24ea:	059a      	lsls	r2, r3, #22
    24ec:	d4ef      	bmi.n	24ce <__smakebuf_r+0x1a>
    24ee:	2203      	movs	r2, #3
    24f0:	4393      	bics	r3, r2
    24f2:	431e      	orrs	r6, r3
    24f4:	81a6      	strh	r6, [r4, #12]
    24f6:	e7e4      	b.n	24c2 <__smakebuf_r+0xe>
    24f8:	4b0f      	ldr	r3, [pc, #60]	; (2538 <__smakebuf_r+0x84>)
    24fa:	62ab      	str	r3, [r5, #40]	; 0x28
    24fc:	2380      	movs	r3, #128	; 0x80
    24fe:	89a2      	ldrh	r2, [r4, #12]
    2500:	6020      	str	r0, [r4, #0]
    2502:	4313      	orrs	r3, r2
    2504:	81a3      	strh	r3, [r4, #12]
    2506:	9b00      	ldr	r3, [sp, #0]
    2508:	6120      	str	r0, [r4, #16]
    250a:	6163      	str	r3, [r4, #20]
    250c:	9b01      	ldr	r3, [sp, #4]
    250e:	2b00      	cmp	r3, #0
    2510:	d00d      	beq.n	252e <__smakebuf_r+0x7a>
    2512:	230e      	movs	r3, #14
    2514:	5ee1      	ldrsh	r1, [r4, r3]
    2516:	0028      	movs	r0, r5
    2518:	f000 f958 	bl	27cc <_isatty_r>
    251c:	2800      	cmp	r0, #0
    251e:	d006      	beq.n	252e <__smakebuf_r+0x7a>
    2520:	2203      	movs	r2, #3
    2522:	89a3      	ldrh	r3, [r4, #12]
    2524:	4393      	bics	r3, r2
    2526:	001a      	movs	r2, r3
    2528:	2301      	movs	r3, #1
    252a:	4313      	orrs	r3, r2
    252c:	81a3      	strh	r3, [r4, #12]
    252e:	89a0      	ldrh	r0, [r4, #12]
    2530:	4338      	orrs	r0, r7
    2532:	81a0      	strh	r0, [r4, #12]
    2534:	e7cb      	b.n	24ce <__smakebuf_r+0x1a>
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	000022b5 	.word	0x000022b5

0000253c <malloc>:
    253c:	b510      	push	{r4, lr}
    253e:	4b03      	ldr	r3, [pc, #12]	; (254c <malloc+0x10>)
    2540:	0001      	movs	r1, r0
    2542:	6818      	ldr	r0, [r3, #0]
    2544:	f000 f84e 	bl	25e4 <_malloc_r>
    2548:	bd10      	pop	{r4, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	2000000c 	.word	0x2000000c

00002550 <_free_r>:
    2550:	b570      	push	{r4, r5, r6, lr}
    2552:	0005      	movs	r5, r0
    2554:	2900      	cmp	r1, #0
    2556:	d010      	beq.n	257a <_free_r+0x2a>
    2558:	1f0c      	subs	r4, r1, #4
    255a:	6823      	ldr	r3, [r4, #0]
    255c:	2b00      	cmp	r3, #0
    255e:	da00      	bge.n	2562 <_free_r+0x12>
    2560:	18e4      	adds	r4, r4, r3
    2562:	0028      	movs	r0, r5
    2564:	f000 f958 	bl	2818 <__malloc_lock>
    2568:	4a1d      	ldr	r2, [pc, #116]	; (25e0 <_free_r+0x90>)
    256a:	6813      	ldr	r3, [r2, #0]
    256c:	2b00      	cmp	r3, #0
    256e:	d105      	bne.n	257c <_free_r+0x2c>
    2570:	6063      	str	r3, [r4, #4]
    2572:	6014      	str	r4, [r2, #0]
    2574:	0028      	movs	r0, r5
    2576:	f000 f950 	bl	281a <__malloc_unlock>
    257a:	bd70      	pop	{r4, r5, r6, pc}
    257c:	42a3      	cmp	r3, r4
    257e:	d909      	bls.n	2594 <_free_r+0x44>
    2580:	6821      	ldr	r1, [r4, #0]
    2582:	1860      	adds	r0, r4, r1
    2584:	4283      	cmp	r3, r0
    2586:	d1f3      	bne.n	2570 <_free_r+0x20>
    2588:	6818      	ldr	r0, [r3, #0]
    258a:	685b      	ldr	r3, [r3, #4]
    258c:	1841      	adds	r1, r0, r1
    258e:	6021      	str	r1, [r4, #0]
    2590:	e7ee      	b.n	2570 <_free_r+0x20>
    2592:	0013      	movs	r3, r2
    2594:	685a      	ldr	r2, [r3, #4]
    2596:	2a00      	cmp	r2, #0
    2598:	d001      	beq.n	259e <_free_r+0x4e>
    259a:	42a2      	cmp	r2, r4
    259c:	d9f9      	bls.n	2592 <_free_r+0x42>
    259e:	6819      	ldr	r1, [r3, #0]
    25a0:	1858      	adds	r0, r3, r1
    25a2:	42a0      	cmp	r0, r4
    25a4:	d10b      	bne.n	25be <_free_r+0x6e>
    25a6:	6820      	ldr	r0, [r4, #0]
    25a8:	1809      	adds	r1, r1, r0
    25aa:	1858      	adds	r0, r3, r1
    25ac:	6019      	str	r1, [r3, #0]
    25ae:	4282      	cmp	r2, r0
    25b0:	d1e0      	bne.n	2574 <_free_r+0x24>
    25b2:	6810      	ldr	r0, [r2, #0]
    25b4:	6852      	ldr	r2, [r2, #4]
    25b6:	1841      	adds	r1, r0, r1
    25b8:	6019      	str	r1, [r3, #0]
    25ba:	605a      	str	r2, [r3, #4]
    25bc:	e7da      	b.n	2574 <_free_r+0x24>
    25be:	42a0      	cmp	r0, r4
    25c0:	d902      	bls.n	25c8 <_free_r+0x78>
    25c2:	230c      	movs	r3, #12
    25c4:	602b      	str	r3, [r5, #0]
    25c6:	e7d5      	b.n	2574 <_free_r+0x24>
    25c8:	6821      	ldr	r1, [r4, #0]
    25ca:	1860      	adds	r0, r4, r1
    25cc:	4282      	cmp	r2, r0
    25ce:	d103      	bne.n	25d8 <_free_r+0x88>
    25d0:	6810      	ldr	r0, [r2, #0]
    25d2:	6852      	ldr	r2, [r2, #4]
    25d4:	1841      	adds	r1, r0, r1
    25d6:	6021      	str	r1, [r4, #0]
    25d8:	6062      	str	r2, [r4, #4]
    25da:	605c      	str	r4, [r3, #4]
    25dc:	e7ca      	b.n	2574 <_free_r+0x24>
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	20000120 	.word	0x20000120

000025e4 <_malloc_r>:
    25e4:	2303      	movs	r3, #3
    25e6:	b570      	push	{r4, r5, r6, lr}
    25e8:	1ccd      	adds	r5, r1, #3
    25ea:	439d      	bics	r5, r3
    25ec:	3508      	adds	r5, #8
    25ee:	0006      	movs	r6, r0
    25f0:	2d0c      	cmp	r5, #12
    25f2:	d21e      	bcs.n	2632 <_malloc_r+0x4e>
    25f4:	250c      	movs	r5, #12
    25f6:	42a9      	cmp	r1, r5
    25f8:	d81d      	bhi.n	2636 <_malloc_r+0x52>
    25fa:	0030      	movs	r0, r6
    25fc:	f000 f90c 	bl	2818 <__malloc_lock>
    2600:	4a25      	ldr	r2, [pc, #148]	; (2698 <_malloc_r+0xb4>)
    2602:	6814      	ldr	r4, [r2, #0]
    2604:	0021      	movs	r1, r4
    2606:	2900      	cmp	r1, #0
    2608:	d119      	bne.n	263e <_malloc_r+0x5a>
    260a:	4c24      	ldr	r4, [pc, #144]	; (269c <_malloc_r+0xb8>)
    260c:	6823      	ldr	r3, [r4, #0]
    260e:	2b00      	cmp	r3, #0
    2610:	d103      	bne.n	261a <_malloc_r+0x36>
    2612:	0030      	movs	r0, r6
    2614:	f000 f844 	bl	26a0 <_sbrk_r>
    2618:	6020      	str	r0, [r4, #0]
    261a:	0029      	movs	r1, r5
    261c:	0030      	movs	r0, r6
    261e:	f000 f83f 	bl	26a0 <_sbrk_r>
    2622:	1c43      	adds	r3, r0, #1
    2624:	d12c      	bne.n	2680 <_malloc_r+0x9c>
    2626:	230c      	movs	r3, #12
    2628:	0030      	movs	r0, r6
    262a:	6033      	str	r3, [r6, #0]
    262c:	f000 f8f5 	bl	281a <__malloc_unlock>
    2630:	e003      	b.n	263a <_malloc_r+0x56>
    2632:	2d00      	cmp	r5, #0
    2634:	dadf      	bge.n	25f6 <_malloc_r+0x12>
    2636:	230c      	movs	r3, #12
    2638:	6033      	str	r3, [r6, #0]
    263a:	2000      	movs	r0, #0
    263c:	bd70      	pop	{r4, r5, r6, pc}
    263e:	680b      	ldr	r3, [r1, #0]
    2640:	1b5b      	subs	r3, r3, r5
    2642:	d41a      	bmi.n	267a <_malloc_r+0x96>
    2644:	2b0b      	cmp	r3, #11
    2646:	d903      	bls.n	2650 <_malloc_r+0x6c>
    2648:	600b      	str	r3, [r1, #0]
    264a:	18cc      	adds	r4, r1, r3
    264c:	6025      	str	r5, [r4, #0]
    264e:	e003      	b.n	2658 <_malloc_r+0x74>
    2650:	428c      	cmp	r4, r1
    2652:	d10e      	bne.n	2672 <_malloc_r+0x8e>
    2654:	6863      	ldr	r3, [r4, #4]
    2656:	6013      	str	r3, [r2, #0]
    2658:	0030      	movs	r0, r6
    265a:	f000 f8de 	bl	281a <__malloc_unlock>
    265e:	0020      	movs	r0, r4
    2660:	2207      	movs	r2, #7
    2662:	300b      	adds	r0, #11
    2664:	1d23      	adds	r3, r4, #4
    2666:	4390      	bics	r0, r2
    2668:	1ac3      	subs	r3, r0, r3
    266a:	d0e7      	beq.n	263c <_malloc_r+0x58>
    266c:	425a      	negs	r2, r3
    266e:	50e2      	str	r2, [r4, r3]
    2670:	e7e4      	b.n	263c <_malloc_r+0x58>
    2672:	684b      	ldr	r3, [r1, #4]
    2674:	6063      	str	r3, [r4, #4]
    2676:	000c      	movs	r4, r1
    2678:	e7ee      	b.n	2658 <_malloc_r+0x74>
    267a:	000c      	movs	r4, r1
    267c:	6849      	ldr	r1, [r1, #4]
    267e:	e7c2      	b.n	2606 <_malloc_r+0x22>
    2680:	2303      	movs	r3, #3
    2682:	1cc4      	adds	r4, r0, #3
    2684:	439c      	bics	r4, r3
    2686:	42a0      	cmp	r0, r4
    2688:	d0e0      	beq.n	264c <_malloc_r+0x68>
    268a:	1a21      	subs	r1, r4, r0
    268c:	0030      	movs	r0, r6
    268e:	f000 f807 	bl	26a0 <_sbrk_r>
    2692:	1c43      	adds	r3, r0, #1
    2694:	d1da      	bne.n	264c <_malloc_r+0x68>
    2696:	e7c6      	b.n	2626 <_malloc_r+0x42>
    2698:	20000120 	.word	0x20000120
    269c:	20000124 	.word	0x20000124

000026a0 <_sbrk_r>:
    26a0:	2300      	movs	r3, #0
    26a2:	b570      	push	{r4, r5, r6, lr}
    26a4:	4c06      	ldr	r4, [pc, #24]	; (26c0 <_sbrk_r+0x20>)
    26a6:	0005      	movs	r5, r0
    26a8:	0008      	movs	r0, r1
    26aa:	6023      	str	r3, [r4, #0]
    26ac:	f7ff f8dc 	bl	1868 <_sbrk>
    26b0:	1c43      	adds	r3, r0, #1
    26b2:	d103      	bne.n	26bc <_sbrk_r+0x1c>
    26b4:	6823      	ldr	r3, [r4, #0]
    26b6:	2b00      	cmp	r3, #0
    26b8:	d000      	beq.n	26bc <_sbrk_r+0x1c>
    26ba:	602b      	str	r3, [r5, #0]
    26bc:	bd70      	pop	{r4, r5, r6, pc}
    26be:	46c0      	nop			; (mov r8, r8)
    26c0:	200001a4 	.word	0x200001a4

000026c4 <__sread>:
    26c4:	b570      	push	{r4, r5, r6, lr}
    26c6:	000c      	movs	r4, r1
    26c8:	250e      	movs	r5, #14
    26ca:	5f49      	ldrsh	r1, [r1, r5]
    26cc:	f000 f8a6 	bl	281c <_read_r>
    26d0:	2800      	cmp	r0, #0
    26d2:	db03      	blt.n	26dc <__sread+0x18>
    26d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    26d6:	181b      	adds	r3, r3, r0
    26d8:	6563      	str	r3, [r4, #84]	; 0x54
    26da:	bd70      	pop	{r4, r5, r6, pc}
    26dc:	89a3      	ldrh	r3, [r4, #12]
    26de:	4a02      	ldr	r2, [pc, #8]	; (26e8 <__sread+0x24>)
    26e0:	4013      	ands	r3, r2
    26e2:	81a3      	strh	r3, [r4, #12]
    26e4:	e7f9      	b.n	26da <__sread+0x16>
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	ffffefff 	.word	0xffffefff

000026ec <__swrite>:
    26ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ee:	001f      	movs	r7, r3
    26f0:	898b      	ldrh	r3, [r1, #12]
    26f2:	0005      	movs	r5, r0
    26f4:	000c      	movs	r4, r1
    26f6:	0016      	movs	r6, r2
    26f8:	05db      	lsls	r3, r3, #23
    26fa:	d505      	bpl.n	2708 <__swrite+0x1c>
    26fc:	230e      	movs	r3, #14
    26fe:	5ec9      	ldrsh	r1, [r1, r3]
    2700:	2200      	movs	r2, #0
    2702:	2302      	movs	r3, #2
    2704:	f000 f874 	bl	27f0 <_lseek_r>
    2708:	89a3      	ldrh	r3, [r4, #12]
    270a:	4a05      	ldr	r2, [pc, #20]	; (2720 <__swrite+0x34>)
    270c:	0028      	movs	r0, r5
    270e:	4013      	ands	r3, r2
    2710:	81a3      	strh	r3, [r4, #12]
    2712:	0032      	movs	r2, r6
    2714:	230e      	movs	r3, #14
    2716:	5ee1      	ldrsh	r1, [r4, r3]
    2718:	003b      	movs	r3, r7
    271a:	f000 f81f 	bl	275c <_write_r>
    271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2720:	ffffefff 	.word	0xffffefff

00002724 <__sseek>:
    2724:	b570      	push	{r4, r5, r6, lr}
    2726:	000c      	movs	r4, r1
    2728:	250e      	movs	r5, #14
    272a:	5f49      	ldrsh	r1, [r1, r5]
    272c:	f000 f860 	bl	27f0 <_lseek_r>
    2730:	89a3      	ldrh	r3, [r4, #12]
    2732:	1c42      	adds	r2, r0, #1
    2734:	d103      	bne.n	273e <__sseek+0x1a>
    2736:	4a05      	ldr	r2, [pc, #20]	; (274c <__sseek+0x28>)
    2738:	4013      	ands	r3, r2
    273a:	81a3      	strh	r3, [r4, #12]
    273c:	bd70      	pop	{r4, r5, r6, pc}
    273e:	2280      	movs	r2, #128	; 0x80
    2740:	0152      	lsls	r2, r2, #5
    2742:	4313      	orrs	r3, r2
    2744:	81a3      	strh	r3, [r4, #12]
    2746:	6560      	str	r0, [r4, #84]	; 0x54
    2748:	e7f8      	b.n	273c <__sseek+0x18>
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	ffffefff 	.word	0xffffefff

00002750 <__sclose>:
    2750:	b510      	push	{r4, lr}
    2752:	230e      	movs	r3, #14
    2754:	5ec9      	ldrsh	r1, [r1, r3]
    2756:	f000 f815 	bl	2784 <_close_r>
    275a:	bd10      	pop	{r4, pc}

0000275c <_write_r>:
    275c:	b570      	push	{r4, r5, r6, lr}
    275e:	0005      	movs	r5, r0
    2760:	0008      	movs	r0, r1
    2762:	0011      	movs	r1, r2
    2764:	2200      	movs	r2, #0
    2766:	4c06      	ldr	r4, [pc, #24]	; (2780 <_write_r+0x24>)
    2768:	6022      	str	r2, [r4, #0]
    276a:	001a      	movs	r2, r3
    276c:	f7ff f854 	bl	1818 <_write>
    2770:	1c43      	adds	r3, r0, #1
    2772:	d103      	bne.n	277c <_write_r+0x20>
    2774:	6823      	ldr	r3, [r4, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d000      	beq.n	277c <_write_r+0x20>
    277a:	602b      	str	r3, [r5, #0]
    277c:	bd70      	pop	{r4, r5, r6, pc}
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	200001a4 	.word	0x200001a4

00002784 <_close_r>:
    2784:	2300      	movs	r3, #0
    2786:	b570      	push	{r4, r5, r6, lr}
    2788:	4c06      	ldr	r4, [pc, #24]	; (27a4 <_close_r+0x20>)
    278a:	0005      	movs	r5, r0
    278c:	0008      	movs	r0, r1
    278e:	6023      	str	r3, [r4, #0]
    2790:	f7ff f87c 	bl	188c <_close>
    2794:	1c43      	adds	r3, r0, #1
    2796:	d103      	bne.n	27a0 <_close_r+0x1c>
    2798:	6823      	ldr	r3, [r4, #0]
    279a:	2b00      	cmp	r3, #0
    279c:	d000      	beq.n	27a0 <_close_r+0x1c>
    279e:	602b      	str	r3, [r5, #0]
    27a0:	bd70      	pop	{r4, r5, r6, pc}
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	200001a4 	.word	0x200001a4

000027a8 <_fstat_r>:
    27a8:	2300      	movs	r3, #0
    27aa:	b570      	push	{r4, r5, r6, lr}
    27ac:	4c06      	ldr	r4, [pc, #24]	; (27c8 <_fstat_r+0x20>)
    27ae:	0005      	movs	r5, r0
    27b0:	0008      	movs	r0, r1
    27b2:	0011      	movs	r1, r2
    27b4:	6023      	str	r3, [r4, #0]
    27b6:	f7ff f86c 	bl	1892 <_fstat>
    27ba:	1c43      	adds	r3, r0, #1
    27bc:	d103      	bne.n	27c6 <_fstat_r+0x1e>
    27be:	6823      	ldr	r3, [r4, #0]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d000      	beq.n	27c6 <_fstat_r+0x1e>
    27c4:	602b      	str	r3, [r5, #0]
    27c6:	bd70      	pop	{r4, r5, r6, pc}
    27c8:	200001a4 	.word	0x200001a4

000027cc <_isatty_r>:
    27cc:	2300      	movs	r3, #0
    27ce:	b570      	push	{r4, r5, r6, lr}
    27d0:	4c06      	ldr	r4, [pc, #24]	; (27ec <_isatty_r+0x20>)
    27d2:	0005      	movs	r5, r0
    27d4:	0008      	movs	r0, r1
    27d6:	6023      	str	r3, [r4, #0]
    27d8:	f7ff f860 	bl	189c <_isatty>
    27dc:	1c43      	adds	r3, r0, #1
    27de:	d103      	bne.n	27e8 <_isatty_r+0x1c>
    27e0:	6823      	ldr	r3, [r4, #0]
    27e2:	2b00      	cmp	r3, #0
    27e4:	d000      	beq.n	27e8 <_isatty_r+0x1c>
    27e6:	602b      	str	r3, [r5, #0]
    27e8:	bd70      	pop	{r4, r5, r6, pc}
    27ea:	46c0      	nop			; (mov r8, r8)
    27ec:	200001a4 	.word	0x200001a4

000027f0 <_lseek_r>:
    27f0:	b570      	push	{r4, r5, r6, lr}
    27f2:	0005      	movs	r5, r0
    27f4:	0008      	movs	r0, r1
    27f6:	0011      	movs	r1, r2
    27f8:	2200      	movs	r2, #0
    27fa:	4c06      	ldr	r4, [pc, #24]	; (2814 <_lseek_r+0x24>)
    27fc:	6022      	str	r2, [r4, #0]
    27fe:	001a      	movs	r2, r3
    2800:	f7ff f84e 	bl	18a0 <_lseek>
    2804:	1c43      	adds	r3, r0, #1
    2806:	d103      	bne.n	2810 <_lseek_r+0x20>
    2808:	6823      	ldr	r3, [r4, #0]
    280a:	2b00      	cmp	r3, #0
    280c:	d000      	beq.n	2810 <_lseek_r+0x20>
    280e:	602b      	str	r3, [r5, #0]
    2810:	bd70      	pop	{r4, r5, r6, pc}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	200001a4 	.word	0x200001a4

00002818 <__malloc_lock>:
    2818:	4770      	bx	lr

0000281a <__malloc_unlock>:
    281a:	4770      	bx	lr

0000281c <_read_r>:
    281c:	b570      	push	{r4, r5, r6, lr}
    281e:	0005      	movs	r5, r0
    2820:	0008      	movs	r0, r1
    2822:	0011      	movs	r1, r2
    2824:	2200      	movs	r2, #0
    2826:	4c06      	ldr	r4, [pc, #24]	; (2840 <_read_r+0x24>)
    2828:	6022      	str	r2, [r4, #0]
    282a:	001a      	movs	r2, r3
    282c:	f7fe ffd2 	bl	17d4 <_read>
    2830:	1c43      	adds	r3, r0, #1
    2832:	d103      	bne.n	283c <_read_r+0x20>
    2834:	6823      	ldr	r3, [r4, #0]
    2836:	2b00      	cmp	r3, #0
    2838:	d000      	beq.n	283c <_read_r+0x20>
    283a:	602b      	str	r3, [r5, #0]
    283c:	bd70      	pop	{r4, r5, r6, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	200001a4 	.word	0x200001a4
    2844:	42000000 	.word	0x42000000
    2848:	42000400 	.word	0x42000400
    284c:	42000800 	.word	0x42000800
    2850:	42000c00 	.word	0x42000c00
    2854:	42001000 	.word	0x42001000
    2858:	43000400 	.word	0x43000400
    285c:	00000e26 	.word	0x00000e26
    2860:	00000e22 	.word	0x00000e22
    2864:	00000e22 	.word	0x00000e22
    2868:	00000e8c 	.word	0x00000e8c
    286c:	00000e8c 	.word	0x00000e8c
    2870:	00000e3c 	.word	0x00000e3c
    2874:	00000e2c 	.word	0x00000e2c
    2878:	00000e42 	.word	0x00000e42
    287c:	00000e7a 	.word	0x00000e7a
    2880:	0000150a 	.word	0x0000150a
    2884:	00001600 	.word	0x00001600
    2888:	0000160a 	.word	0x0000160a
    288c:	00001614 	.word	0x00001614
    2890:	0000161e 	.word	0x0000161e
    2894:	00001650 	.word	0x00001650
    2898:	0000165a 	.word	0x0000165a
    289c:	00001664 	.word	0x00001664
    28a0:	0000166e 	.word	0x0000166e
    28a4:	00001678 	.word	0x00001678
    28a8:	42002000 	.word	0x42002000
    28ac:	42002400 	.word	0x42002400
    28b0:	42002800 	.word	0x42002800
    28b4:	42002c00 	.word	0x42002c00
    28b8:	43000800 	.word	0x43000800
    28bc:	00000002 	.word	0x00000002
    28c0:	00000100 	.word	0x00000100
    28c4:	00000002 	.word	0x00000002
    28c8:	00000200 	.word	0x00000200
    28cc:	00000002 	.word	0x00000002
    28d0:	00000400 	.word	0x00000400
    28d4:	00000002 	.word	0x00000002
    28d8:	00000800 	.word	0x00000800
    28dc:	00000003 	.word	0x00000003
    28e0:	00000004 	.word	0x00000004
    28e4:	47202d2d 	.word	0x47202d2d
    28e8:	69747465 	.word	0x69747465
    28ec:	5320676e 	.word	0x5320676e
    28f0:	74726174 	.word	0x74726174
    28f4:	45206465 	.word	0x45206465
    28f8:	706d6178 	.word	0x706d6178
    28fc:	2d20656c 	.word	0x2d20656c
    2900:	2d0a0d2d 	.word	0x2d0a0d2d
    2904:	4153202d 	.word	0x4153202d
    2908:	31324c4d 	.word	0x31324c4d
    290c:	4c50585f 	.word	0x4c50585f
    2910:	454e4941 	.word	0x454e4941
    2914:	52505f44 	.word	0x52505f44
    2918:	2d2d204f 	.word	0x2d2d204f
    291c:	2d2d0a0d 	.word	0x2d2d0a0d
    2920:	6d6f4320 	.word	0x6d6f4320
    2924:	656c6970 	.word	0x656c6970
    2928:	46203a64 	.word	0x46203a64
    292c:	32206265 	.word	0x32206265
    2930:	30322032 	.word	0x30322032
    2934:	31203032 	.word	0x31203032
    2938:	36343a38 	.word	0x36343a38
    293c:	2037313a 	.word	0x2037313a
    2940:	0a0d2d2d 	.word	0x0a0d2d2d
    2944:	50202d2d 	.word	0x50202d2d
    2948:	73736572 	.word	0x73736572
    294c:	20676e69 	.word	0x20676e69
    2950:	20646e61 	.word	0x20646e61
    2954:	656c6572 	.word	0x656c6572
    2958:	20657361 	.word	0x20657361
    295c:	74747562 	.word	0x74747562
    2960:	53206e6f 	.word	0x53206e6f
    2964:	73203057 	.word	0x73203057
    2968:	6c756f68 	.word	0x6c756f68
    296c:	616d2064 	.word	0x616d2064
    2970:	4c20656b 	.word	0x4c20656b
    2974:	20304445 	.word	0x20304445
    2978:	61206e6f 	.word	0x61206e6f
    297c:	6f20646e 	.word	0x6f20646e
    2980:	2d206666 	.word	0x2d206666
    2984:	00000d2d 	.word	0x00000d2d
    2988:	20656854 	.word	0x20656854
    298c:	7074756f 	.word	0x7074756f
    2990:	69207475 	.word	0x69207475
    2994:	72742073 	.word	0x72742073
    2998:	65676769 	.word	0x65676769
    299c:	20646572 	.word	0x20646572
    29a0:	54207962 	.word	0x54207962
    29a4:	6f632043 	.word	0x6f632043
    29a8:	65746e75 	.word	0x65746e75
    29ac:	00000d72 	.word	0x00000d72

000029b0 <tc_interrupt_vectors.14279>:
    29b0:	14131211 00000015                       ........

000029b8 <_global_impure_ptr>:
    29b8:	20000010                                ... 

000029bc <__sf_fake_stderr>:
	...

000029dc <__sf_fake_stdin>:
	...

000029fc <__sf_fake_stdout>:
	...

00002a1c <_init>:
    2a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a22:	bc08      	pop	{r3}
    2a24:	469e      	mov	lr, r3
    2a26:	4770      	bx	lr

00002a28 <__init_array_start>:
    2a28:	000000dd 	.word	0x000000dd

00002a2c <_fini>:
    2a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a2e:	46c0      	nop			; (mov r8, r8)
    2a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a32:	bc08      	pop	{r3}
    2a34:	469e      	mov	lr, r3
    2a36:	4770      	bx	lr

00002a38 <__fini_array_start>:
    2a38:	000000b5 	.word	0x000000b5
