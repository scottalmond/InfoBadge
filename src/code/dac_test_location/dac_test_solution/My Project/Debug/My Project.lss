
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  000007f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020014  2**0
                  CONTENTS
  3 .bss          0000004c  20000014  00000808  00020014  2**2
                  ALLOC
  4 .stack        00002000  20000060  00000854  00020014  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  7 .debug_info   000094a7  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a06  00000000  00000000  0002953c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001bec  00000000  00000000  0002af42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002b8  00000000  00000000  0002cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e0  00000000  00000000  0002cde6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001922a  00000000  00000000  0002d0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000097da  00000000  00000000  000462f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088a4f  00000000  00000000  0004faca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004c8  00000000  00000000  000d851c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	60 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     ` . %...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  9c:	21 01 00 00 3d 06 00 00 21 01 00 00 21 01 00 00     !...=...!...!...
  ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000014 	.word	0x20000014
  d4:	00000000 	.word	0x00000000
  d8:	000007f4 	.word	0x000007f4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000018 	.word	0x20000018
 108:	000007f4 	.word	0x000007f4
 10c:	000007f4 	.word	0x000007f4
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
 118:	4798      	blx	r3
}
 11a:	bd10      	pop	{r4, pc}
 11c:	00000241 	.word	0x00000241

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
 124:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 126:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0x6c>)
 128:	4b1a      	ldr	r3, [pc, #104]	; (194 <Reset_Handler+0x70>)
 12a:	429a      	cmp	r2, r3
 12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 12e:	001a      	movs	r2, r3
 130:	4b19      	ldr	r3, [pc, #100]	; (198 <Reset_Handler+0x74>)
 132:	429a      	cmp	r2, r3
 134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
 136:	4a19      	ldr	r2, [pc, #100]	; (19c <Reset_Handler+0x78>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4813      	ldr	r0, [pc, #76]	; (194 <Reset_Handler+0x70>)
 146:	4912      	ldr	r1, [pc, #72]	; (190 <Reset_Handler+0x6c>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 152:	4a13      	ldr	r2, [pc, #76]	; (1a0 <Reset_Handler+0x7c>)
 154:	4b13      	ldr	r3, [pc, #76]	; (1a4 <Reset_Handler+0x80>)
 156:	429a      	cmp	r2, r3
 158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
 15a:	43d3      	mvns	r3, r2
 15c:	4911      	ldr	r1, [pc, #68]	; (1a4 <Reset_Handler+0x80>)
 15e:	185b      	adds	r3, r3, r1
 160:	2103      	movs	r1, #3
 162:	438b      	bics	r3, r1
 164:	3304      	adds	r3, #4
 166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 168:	2100      	movs	r1, #0
 16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 16c:	4293      	cmp	r3, r2
 16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 170:	4a0d      	ldr	r2, [pc, #52]	; (1a8 <Reset_Handler+0x84>)
 172:	21ff      	movs	r1, #255	; 0xff
 174:	4b0d      	ldr	r3, [pc, #52]	; (1ac <Reset_Handler+0x88>)
 176:	438b      	bics	r3, r1
 178:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 17a:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x8c>)
 17c:	6853      	ldr	r3, [r2, #4]
 17e:	397f      	subs	r1, #127	; 0x7f
 180:	430b      	orrs	r3, r1
 182:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x90>)
 186:	4798      	blx	r3
        main();
 188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x94>)
 18a:	4798      	blx	r3
 18c:	e7fe      	b.n	18c <Reset_Handler+0x68>
 18e:	46c0      	nop			; (mov r8, r8)
 190:	000007f4 	.word	0x000007f4
 194:	20000000 	.word	0x20000000
 198:	20000014 	.word	0x20000014
 19c:	20000004 	.word	0x20000004
 1a0:	20000014 	.word	0x20000014
 1a4:	20000060 	.word	0x20000060
 1a8:	e000ed00 	.word	0xe000ed00
 1ac:	00000000 	.word	0x00000000
 1b0:	41004000 	.word	0x41004000
 1b4:	00000759 	.word	0x00000759
 1b8:	00000745 	.word	0x00000745

000001bc <DAC_0_PORT_init>:
#include <hal_init.h>

struct dac_async_descriptor DAC_0;

void DAC_0_PORT_init(void)
{
 1bc:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 1be:	2204      	movs	r2, #4
 1c0:	23c0      	movs	r3, #192	; 0xc0
 1c2:	05db      	lsls	r3, r3, #23
 1c4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 1c6:	490a      	ldr	r1, [pc, #40]	; (1f0 <DAC_0_PORT_init+0x34>)
 1c8:	4b0a      	ldr	r3, [pc, #40]	; (1f4 <DAC_0_PORT_init+0x38>)
 1ca:	628b      	str	r3, [r1, #40]	; 0x28
 1cc:	23c0      	movs	r3, #192	; 0xc0
 1ce:	061b      	lsls	r3, r3, #24
 1d0:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1d2:	2342      	movs	r3, #66	; 0x42
 1d4:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1d6:	2001      	movs	r0, #1
 1d8:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1da:	4302      	orrs	r2, r0
 1dc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1de:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1e0:	2231      	movs	r2, #49	; 0x31
 1e2:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 1e4:	240f      	movs	r4, #15
 1e6:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
 1e8:	4303      	orrs	r3, r0
 1ea:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1ec:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT0);
}
 1ee:	bd10      	pop	{r4, pc}
 1f0:	40002800 	.word	0x40002800
 1f4:	40000004 	.word	0x40000004

000001f8 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_DAC;
 1f8:	4a05      	ldr	r2, [pc, #20]	; (210 <DAC_0_CLOCK_init+0x18>)
 1fa:	69d1      	ldr	r1, [r2, #28]
 1fc:	2380      	movs	r3, #128	; 0x80
 1fe:	015b      	lsls	r3, r3, #5
 200:	430b      	orrs	r3, r1
 202:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
 204:	2140      	movs	r1, #64	; 0x40
 206:	2380      	movs	r3, #128	; 0x80
 208:	005b      	lsls	r3, r3, #1
 20a:	4a02      	ldr	r2, [pc, #8]	; (214 <DAC_0_CLOCK_init+0x1c>)
 20c:	50d1      	str	r1, [r2, r3]
void DAC_0_CLOCK_init(void)
{

	hri_mclk_set_APBCMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
 20e:	4770      	bx	lr
 210:	40000400 	.word	0x40000400
 214:	40001800 	.word	0x40001800

00000218 <DAC_0_init>:

void DAC_0_init(void)
{
 218:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
 21a:	4b04      	ldr	r3, [pc, #16]	; (22c <DAC_0_init+0x14>)
 21c:	4798      	blx	r3
	dac_async_init(&DAC_0, DAC);
 21e:	4904      	ldr	r1, [pc, #16]	; (230 <DAC_0_init+0x18>)
 220:	4804      	ldr	r0, [pc, #16]	; (234 <DAC_0_init+0x1c>)
 222:	4b05      	ldr	r3, [pc, #20]	; (238 <DAC_0_init+0x20>)
 224:	4798      	blx	r3
	DAC_0_PORT_init();
 226:	4b05      	ldr	r3, [pc, #20]	; (23c <DAC_0_init+0x24>)
 228:	4798      	blx	r3
}
 22a:	bd10      	pop	{r4, pc}
 22c:	000001f9 	.word	0x000001f9
 230:	42003000 	.word	0x42003000
 234:	20000034 	.word	0x20000034
 238:	000002f5 	.word	0x000002f5
 23c:	000001bd 	.word	0x000001bd

00000240 <system_init>:

void system_init(void)
{
 240:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 242:	4b02      	ldr	r3, [pc, #8]	; (24c <system_init+0xc>)
 244:	4798      	blx	r3
	init_mcu();

	DAC_0_init();
 246:	4b02      	ldr	r3, [pc, #8]	; (250 <system_init+0x10>)
 248:	4798      	blx	r3
}
 24a:	bd10      	pop	{r4, pc}
 24c:	00000455 	.word	0x00000455
 250:	00000219 	.word	0x00000219

00000254 <tx_cb_DAC_0>:
#include "utils.h"

static uint16_t example_DAC_0[10] = {0, 100, 200, 300, 400, 500, 600, 700, 800, 900};

static void tx_cb_DAC_0(struct dac_async_descriptor *const descr, const uint8_t ch)
{
 254:	b510      	push	{r4, lr}
	dac_async_write(descr, 0, example_DAC_0, 10);
 256:	230a      	movs	r3, #10
 258:	4a02      	ldr	r2, [pc, #8]	; (264 <tx_cb_DAC_0+0x10>)
 25a:	2100      	movs	r1, #0
 25c:	4c02      	ldr	r4, [pc, #8]	; (268 <tx_cb_DAC_0+0x14>)
 25e:	47a0      	blx	r4
}
 260:	bd10      	pop	{r4, pc}
 262:	46c0      	nop			; (mov r8, r8)
 264:	20000000 	.word	0x20000000
 268:	000003d5 	.word	0x000003d5

0000026c <DAC_0_example>:

/**
 * Example of using DAC_0 to generate waveform.
 */
void DAC_0_example(void)
{
 26c:	b510      	push	{r4, lr}
	dac_async_enable_channel(&DAC_0, 0);
 26e:	4c08      	ldr	r4, [pc, #32]	; (290 <DAC_0_example+0x24>)
 270:	2100      	movs	r1, #0
 272:	0020      	movs	r0, r4
 274:	4b07      	ldr	r3, [pc, #28]	; (294 <DAC_0_example+0x28>)
 276:	4798      	blx	r3
	dac_async_register_callback(&DAC_0, DAC_ASYNC_CONVERSION_DONE_CB, tx_cb_DAC_0);
 278:	4a07      	ldr	r2, [pc, #28]	; (298 <DAC_0_example+0x2c>)
 27a:	2100      	movs	r1, #0
 27c:	0020      	movs	r0, r4
 27e:	4b07      	ldr	r3, [pc, #28]	; (29c <DAC_0_example+0x30>)
 280:	4798      	blx	r3
	dac_async_write(&DAC_0, 0, example_DAC_0, 10);
 282:	230a      	movs	r3, #10
 284:	4a06      	ldr	r2, [pc, #24]	; (2a0 <DAC_0_example+0x34>)
 286:	2100      	movs	r1, #0
 288:	0020      	movs	r0, r4
 28a:	4c06      	ldr	r4, [pc, #24]	; (2a4 <DAC_0_example+0x38>)
 28c:	47a0      	blx	r4
}
 28e:	bd10      	pop	{r4, pc}
 290:	20000034 	.word	0x20000034
 294:	00000349 	.word	0x00000349
 298:	00000255 	.word	0x00000255
 29c:	00000389 	.word	0x00000389
 2a0:	20000000 	.word	0x20000000
 2a4:	000003d5 	.word	0x000003d5

000002a8 <dac_tx_error>:
 * \internal Error occurs in transfer process
 *
 * \param[in] device The pointer to DAC device structure
 */
static void dac_tx_error(struct _dac_async_device *device, const uint8_t ch)
{
 2a8:	b510      	push	{r4, lr}
	struct dac_async_descriptor *const descr = CONTAINER_OF(device, struct dac_async_descriptor, device);
 2aa:	3808      	subs	r0, #8

	if (descr->dac_cb.error) {
 2ac:	6843      	ldr	r3, [r0, #4]
 2ae:	2b00      	cmp	r3, #0
 2b0:	d000      	beq.n	2b4 <dac_tx_error+0xc>
		descr->dac_cb.error(descr, ch);
 2b2:	4798      	blx	r3
	}
}
 2b4:	bd10      	pop	{r4, pc}
	...

000002b8 <dac_tx_ready>:
{
 2b8:	b510      	push	{r4, lr}
 2ba:	00cb      	lsls	r3, r1, #3
 2bc:	18c3      	adds	r3, r0, r3
	if (descr->sel_ch[ch].length) {
 2be:	699c      	ldr	r4, [r3, #24]
 2c0:	2c00      	cmp	r4, #0
 2c2:	d00a      	beq.n	2da <dac_tx_ready+0x22>
		descr->sel_ch[ch].length--;
 2c4:	3c01      	subs	r4, #1
 2c6:	619c      	str	r4, [r3, #24]
		if (descr->sel_ch[ch].length) {
 2c8:	2c00      	cmp	r4, #0
 2ca:	d107      	bne.n	2dc <dac_tx_ready+0x24>
			if (descr->dac_cb.conversion_done) {
 2cc:	0003      	movs	r3, r0
 2ce:	3b08      	subs	r3, #8
 2d0:	681b      	ldr	r3, [r3, #0]
 2d2:	2b00      	cmp	r3, #0
 2d4:	d001      	beq.n	2da <dac_tx_ready+0x22>
	struct dac_async_descriptor *const descr = CONTAINER_OF(device, struct dac_async_descriptor, device);
 2d6:	3808      	subs	r0, #8
				descr->dac_cb.conversion_done(descr, ch);
 2d8:	4798      	blx	r3
}
 2da:	bd10      	pop	{r4, pc}
			descr->sel_ch[ch].buffer++;
 2dc:	695a      	ldr	r2, [r3, #20]
 2de:	1c94      	adds	r4, r2, #2
 2e0:	615c      	str	r4, [r3, #20]
			_dac_async_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
 2e2:	8853      	ldrh	r3, [r2, #2]
 2e4:	000a      	movs	r2, r1
 2e6:	0019      	movs	r1, r3
 2e8:	4b01      	ldr	r3, [pc, #4]	; (2f0 <dac_tx_ready+0x38>)
 2ea:	4798      	blx	r3
 2ec:	e7f5      	b.n	2da <dac_tx_ready+0x22>
 2ee:	46c0      	nop			; (mov r8, r8)
 2f0:	000005ed 	.word	0x000005ed

000002f4 <dac_async_init>:
{
 2f4:	b570      	push	{r4, r5, r6, lr}
 2f6:	0004      	movs	r4, r0
 2f8:	000d      	movs	r5, r1
	ASSERT(descr && hw);
 2fa:	2800      	cmp	r0, #0
 2fc:	d018      	beq.n	330 <dac_async_init+0x3c>
 2fe:	0008      	movs	r0, r1
 300:	1e43      	subs	r3, r0, #1
 302:	4198      	sbcs	r0, r3
 304:	b2c0      	uxtb	r0, r0
 306:	2238      	movs	r2, #56	; 0x38
 308:	490a      	ldr	r1, [pc, #40]	; (334 <dac_async_init+0x40>)
 30a:	4b0b      	ldr	r3, [pc, #44]	; (338 <dac_async_init+0x44>)
 30c:	4798      	blx	r3
	device = &descr->device;
 30e:	0020      	movs	r0, r4
 310:	3008      	adds	r0, #8
	rc = _dac_async_init(device, hw);
 312:	0029      	movs	r1, r5
 314:	4b09      	ldr	r3, [pc, #36]	; (33c <dac_async_init+0x48>)
 316:	4798      	blx	r3
	if (rc) {
 318:	2800      	cmp	r0, #0
 31a:	d108      	bne.n	32e <dac_async_init+0x3a>
	device->dac_cb.tx_ready_cb = dac_tx_ready;
 31c:	4b08      	ldr	r3, [pc, #32]	; (340 <dac_async_init+0x4c>)
 31e:	60a3      	str	r3, [r4, #8]
	device->dac_cb.tx_error_cb = dac_tx_error;
 320:	4b08      	ldr	r3, [pc, #32]	; (344 <dac_async_init+0x50>)
 322:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].buffer = NULL;
 324:	2300      	movs	r3, #0
 326:	61e3      	str	r3, [r4, #28]
		descr->sel_ch[i].length = 0;
 328:	6223      	str	r3, [r4, #32]
		descr->sel_ch[i].buffer = NULL;
 32a:	6263      	str	r3, [r4, #36]	; 0x24
		descr->sel_ch[i].length = 0;
 32c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 32e:	bd70      	pop	{r4, r5, r6, pc}
 330:	2000      	movs	r0, #0
 332:	e7e8      	b.n	306 <dac_async_init+0x12>
 334:	000007a0 	.word	0x000007a0
 338:	0000044d 	.word	0x0000044d
 33c:	00000521 	.word	0x00000521
 340:	000002b9 	.word	0x000002b9
 344:	000002a9 	.word	0x000002a9

00000348 <dac_async_enable_channel>:
{
 348:	b570      	push	{r4, r5, r6, lr}
 34a:	0005      	movs	r5, r0
 34c:	000c      	movs	r4, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
 34e:	2800      	cmp	r0, #0
 350:	d011      	beq.n	376 <dac_async_enable_channel+0x2e>
 352:	2300      	movs	r3, #0
 354:	2201      	movs	r2, #1
 356:	428a      	cmp	r2, r1
 358:	415b      	adcs	r3, r3
 35a:	b2d8      	uxtb	r0, r3
 35c:	2301      	movs	r3, #1
 35e:	4018      	ands	r0, r3
 360:	225d      	movs	r2, #93	; 0x5d
 362:	4906      	ldr	r1, [pc, #24]	; (37c <dac_async_enable_channel+0x34>)
 364:	4b06      	ldr	r3, [pc, #24]	; (380 <dac_async_enable_channel+0x38>)
 366:	4798      	blx	r3
	_dac_async_enable_channel(&descr->device, ch);
 368:	0028      	movs	r0, r5
 36a:	3008      	adds	r0, #8
 36c:	0021      	movs	r1, r4
 36e:	4b05      	ldr	r3, [pc, #20]	; (384 <dac_async_enable_channel+0x3c>)
 370:	4798      	blx	r3
}
 372:	2000      	movs	r0, #0
 374:	bd70      	pop	{r4, r5, r6, pc}
 376:	2000      	movs	r0, #0
 378:	e7f0      	b.n	35c <dac_async_enable_channel+0x14>
 37a:	46c0      	nop			; (mov r8, r8)
 37c:	000007a0 	.word	0x000007a0
 380:	0000044d 	.word	0x0000044d
 384:	00000575 	.word	0x00000575

00000388 <dac_async_register_callback>:
{
 388:	b570      	push	{r4, r5, r6, lr}
 38a:	0005      	movs	r5, r0
 38c:	000e      	movs	r6, r1
 38e:	0014      	movs	r4, r2
	ASSERT(descr);
 390:	1e43      	subs	r3, r0, #1
 392:	4198      	sbcs	r0, r3
 394:	b2c0      	uxtb	r0, r0
 396:	2276      	movs	r2, #118	; 0x76
 398:	490b      	ldr	r1, [pc, #44]	; (3c8 <dac_async_register_callback+0x40>)
 39a:	4b0c      	ldr	r3, [pc, #48]	; (3cc <dac_async_register_callback+0x44>)
 39c:	4798      	blx	r3
	switch (type) {
 39e:	2e00      	cmp	r6, #0
 3a0:	d004      	beq.n	3ac <dac_async_register_callback+0x24>
 3a2:	2e01      	cmp	r6, #1
 3a4:	d00d      	beq.n	3c2 <dac_async_register_callback+0x3a>
		return ERR_INVALID_ARG;
 3a6:	200d      	movs	r0, #13
 3a8:	4240      	negs	r0, r0
 3aa:	e009      	b.n	3c0 <dac_async_register_callback+0x38>
		descr->dac_cb.conversion_done = cb;
 3ac:	602c      	str	r4, [r5, #0]
	_dac_async_set_irq_state(&descr->device, (enum _dac_callback_type)type, NULL != cb);
 3ae:	1e62      	subs	r2, r4, #1
 3b0:	4194      	sbcs	r4, r2
 3b2:	b2e2      	uxtb	r2, r4
 3b4:	0028      	movs	r0, r5
 3b6:	3008      	adds	r0, #8
 3b8:	0031      	movs	r1, r6
 3ba:	4b05      	ldr	r3, [pc, #20]	; (3d0 <dac_async_register_callback+0x48>)
 3bc:	4798      	blx	r3
	return ERR_NONE;
 3be:	2000      	movs	r0, #0
}
 3c0:	bd70      	pop	{r4, r5, r6, pc}
		descr->dac_cb.error = cb;
 3c2:	606c      	str	r4, [r5, #4]
		break;
 3c4:	e7f3      	b.n	3ae <dac_async_register_callback+0x26>
 3c6:	46c0      	nop			; (mov r8, r8)
 3c8:	000007a0 	.word	0x000007a0
 3cc:	0000044d 	.word	0x0000044d
 3d0:	00000601 	.word	0x00000601

000003d4 <dac_async_write>:
{
 3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 3d6:	46c6      	mov	lr, r8
 3d8:	b500      	push	{lr}
 3da:	0004      	movs	r4, r0
 3dc:	000d      	movs	r5, r1
 3de:	0017      	movs	r7, r2
 3e0:	4698      	mov	r8, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
 3e2:	2800      	cmp	r0, #0
 3e4:	d022      	beq.n	42c <dac_async_write+0x58>
 3e6:	2000      	movs	r0, #0
 3e8:	2901      	cmp	r1, #1
 3ea:	d919      	bls.n	420 <dac_async_write+0x4c>
 3ec:	228f      	movs	r2, #143	; 0x8f
 3ee:	4913      	ldr	r1, [pc, #76]	; (43c <dac_async_write+0x68>)
 3f0:	4b13      	ldr	r3, [pc, #76]	; (440 <dac_async_write+0x6c>)
 3f2:	4798      	blx	r3
	if (!_dac_async_is_channel_enable(&descr->device, ch)) {
 3f4:	0026      	movs	r6, r4
 3f6:	3608      	adds	r6, #8
 3f8:	0029      	movs	r1, r5
 3fa:	0030      	movs	r0, r6
 3fc:	4b11      	ldr	r3, [pc, #68]	; (444 <dac_async_write+0x70>)
 3fe:	4798      	blx	r3
 400:	2800      	cmp	r0, #0
 402:	d017      	beq.n	434 <dac_async_write+0x60>
 404:	00eb      	lsls	r3, r5, #3
 406:	18e4      	adds	r4, r4, r3
	descr->sel_ch[ch].buffer = buffer;
 408:	61e7      	str	r7, [r4, #28]
	descr->sel_ch[ch].length = length;
 40a:	4643      	mov	r3, r8
 40c:	6223      	str	r3, [r4, #32]
	_dac_async_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
 40e:	8839      	ldrh	r1, [r7, #0]
 410:	002a      	movs	r2, r5
 412:	0030      	movs	r0, r6
 414:	4b0c      	ldr	r3, [pc, #48]	; (448 <dac_async_write+0x74>)
 416:	4798      	blx	r3
	return ERR_NONE;
 418:	2000      	movs	r0, #0
}
 41a:	bc04      	pop	{r2}
 41c:	4690      	mov	r8, r2
 41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
 420:	2a00      	cmp	r2, #0
 422:	d005      	beq.n	430 <dac_async_write+0x5c>
 424:	0018      	movs	r0, r3
 426:	1e43      	subs	r3, r0, #1
 428:	4198      	sbcs	r0, r3
 42a:	e7df      	b.n	3ec <dac_async_write+0x18>
 42c:	2000      	movs	r0, #0
 42e:	e7dd      	b.n	3ec <dac_async_write+0x18>
 430:	2000      	movs	r0, #0
 432:	e7db      	b.n	3ec <dac_async_write+0x18>
		return ERR_INVALID_ARG;
 434:	200d      	movs	r0, #13
 436:	4240      	negs	r0, r0
 438:	e7ef      	b.n	41a <dac_async_write+0x46>
 43a:	46c0      	nop			; (mov r8, r8)
 43c:	000007a0 	.word	0x000007a0
 440:	0000044d 	.word	0x0000044d
 444:	000005cb 	.word	0x000005cb
 448:	000005ed 	.word	0x000005ed

0000044c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 44c:	2800      	cmp	r0, #0
 44e:	d100      	bne.n	452 <assert+0x6>
		__asm("BKPT #0");
 450:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 452:	4770      	bx	lr

00000454 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 454:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 456:	4b09      	ldr	r3, [pc, #36]	; (47c <_init_chip+0x28>)
 458:	685a      	ldr	r2, [r3, #4]
 45a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
 45c:	2002      	movs	r0, #2
 45e:	4b08      	ldr	r3, [pc, #32]	; (480 <_init_chip+0x2c>)
 460:	4798      	blx	r3

	_osc32kctrl_init_sources();
 462:	4b08      	ldr	r3, [pc, #32]	; (484 <_init_chip+0x30>)
 464:	4798      	blx	r3
	_oscctrl_init_sources();
 466:	4b08      	ldr	r3, [pc, #32]	; (488 <_init_chip+0x34>)
 468:	4798      	blx	r3
	_mclk_init();
 46a:	4b08      	ldr	r3, [pc, #32]	; (48c <_init_chip+0x38>)
 46c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 46e:	4b08      	ldr	r3, [pc, #32]	; (490 <_init_chip+0x3c>)
 470:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 472:	20ff      	movs	r0, #255	; 0xff
 474:	4b07      	ldr	r3, [pc, #28]	; (494 <_init_chip+0x40>)
 476:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 478:	bd10      	pop	{r4, pc}
 47a:	46c0      	nop			; (mov r8, r8)
 47c:	41004000 	.word	0x41004000
 480:	0000071b 	.word	0x0000071b
 484:	000006c9 	.word	0x000006c9
 488:	000006e1 	.word	0x000006e1
 48c:	000006b5 	.word	0x000006b5
 490:	00000719 	.word	0x00000719
 494:	00000691 	.word	0x00000691

00000498 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
 498:	b510      	push	{r4, lr}
 49a:	0004      	movs	r4, r0
	ASSERT(hw == DAC);
 49c:	4b1d      	ldr	r3, [pc, #116]	; (514 <_dac_init+0x7c>)
 49e:	18c0      	adds	r0, r0, r3
 4a0:	4243      	negs	r3, r0
 4a2:	4158      	adcs	r0, r3
 4a4:	b2c0      	uxtb	r0, r0
 4a6:	22f4      	movs	r2, #244	; 0xf4
 4a8:	491b      	ldr	r1, [pc, #108]	; (518 <_dac_init+0x80>)
 4aa:	4b1c      	ldr	r3, [pc, #112]	; (51c <_dac_init+0x84>)
 4ac:	4798      	blx	r3
	};
}

static inline bool hri_dac_is_syncing(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	return ((Dac *)hw)->SYNCBUSY.reg & reg;
 4ae:	68a3      	ldr	r3, [r4, #8]

	if (!hri_dac_is_syncing(hw, DAC_SYNCBUSY_SWRST)) {
 4b0:	07db      	lsls	r3, r3, #31
 4b2:	d418      	bmi.n	4e6 <_dac_init+0x4e>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4b4:	2203      	movs	r2, #3
 4b6:	68a3      	ldr	r3, [r4, #8]
 4b8:	421a      	tst	r2, r3
 4ba:	d1fc      	bne.n	4b6 <_dac_init+0x1e>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
 4bc:	7823      	ldrb	r3, [r4, #0]
		if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
 4be:	079b      	lsls	r3, r3, #30
 4c0:	d50b      	bpl.n	4da <_dac_init+0x42>
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
 4c2:	7823      	ldrb	r3, [r4, #0]
 4c4:	2202      	movs	r2, #2
 4c6:	4393      	bics	r3, r2
 4c8:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4ca:	3201      	adds	r2, #1
 4cc:	68a3      	ldr	r3, [r4, #8]
 4ce:	421a      	tst	r2, r3
 4d0:	d1fc      	bne.n	4cc <_dac_init+0x34>
 4d2:	2202      	movs	r2, #2
 4d4:	68a3      	ldr	r3, [r4, #8]
 4d6:	421a      	tst	r2, r3
 4d8:	d1fc      	bne.n	4d4 <_dac_init+0x3c>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
 4da:	2301      	movs	r3, #1
 4dc:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4de:	2203      	movs	r2, #3
 4e0:	68a3      	ldr	r3, [r4, #8]
 4e2:	421a      	tst	r2, r3
 4e4:	d1fc      	bne.n	4e0 <_dac_init+0x48>
 4e6:	2201      	movs	r2, #1
 4e8:	68a3      	ldr	r3, [r4, #8]
 4ea:	421a      	tst	r2, r3
 4ec:	d1fc      	bne.n	4e8 <_dac_init+0x50>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
 4ee:	2306      	movs	r3, #6
 4f0:	7063      	strb	r3, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
 4f2:	2300      	movs	r3, #0
 4f4:	70a3      	strb	r3, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
 4f6:	81a3      	strh	r3, [r4, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4f8:	2202      	movs	r2, #2
 4fa:	68a3      	ldr	r3, [r4, #8]
 4fc:	421a      	tst	r2, r3
 4fe:	d1fc      	bne.n	4fa <_dac_init+0x62>
	((Dac *)hw)->DACCTRL[index].reg = data;
 500:	2300      	movs	r3, #0
 502:	81e3      	strh	r3, [r4, #14]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 504:	2202      	movs	r2, #2
 506:	68a3      	ldr	r3, [r4, #8]
 508:	421a      	tst	r2, r3
 50a:	d1fc      	bne.n	506 <_dac_init+0x6e>
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
 50c:	2301      	movs	r3, #1
 50e:	7623      	strb	r3, [r4, #24]
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
}
 510:	2000      	movs	r0, #0
 512:	bd10      	pop	{r4, pc}
 514:	bdffd000 	.word	0xbdffd000
 518:	000007bc 	.word	0x000007bc
 51c:	0000044d 	.word	0x0000044d

00000520 <_dac_async_init>:
{
 520:	b570      	push	{r4, r5, r6, lr}
 522:	0004      	movs	r4, r0
 524:	000d      	movs	r5, r1
	ASSERT(device);
 526:	1e43      	subs	r3, r0, #1
 528:	4198      	sbcs	r0, r3
 52a:	b2c0      	uxtb	r0, r0
 52c:	2260      	movs	r2, #96	; 0x60
 52e:	490c      	ldr	r1, [pc, #48]	; (560 <_dac_async_init+0x40>)
 530:	4b0c      	ldr	r3, [pc, #48]	; (564 <_dac_async_init+0x44>)
 532:	4798      	blx	r3
	init_status = _dac_init(hw);
 534:	0028      	movs	r0, r5
 536:	4b0c      	ldr	r3, [pc, #48]	; (568 <_dac_async_init+0x48>)
 538:	4798      	blx	r3
	if (init_status) {
 53a:	2800      	cmp	r0, #0
 53c:	d10f      	bne.n	55e <_dac_async_init+0x3e>
	device->hw = hw;
 53e:	6125      	str	r5, [r4, #16]
	_dac_dev = device;
 540:	4b0a      	ldr	r3, [pc, #40]	; (56c <_dac_async_init+0x4c>)
 542:	601c      	str	r4, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 544:	4b0a      	ldr	r3, [pc, #40]	; (570 <_dac_async_init+0x50>)
 546:	2280      	movs	r2, #128	; 0x80
 548:	0452      	lsls	r2, r2, #17
 54a:	2180      	movs	r1, #128	; 0x80
 54c:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 54e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 552:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 556:	3101      	adds	r1, #1
 558:	31ff      	adds	r1, #255	; 0xff
 55a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 55c:	601a      	str	r2, [r3, #0]
}
 55e:	bd70      	pop	{r4, r5, r6, pc}
 560:	000007bc 	.word	0x000007bc
 564:	0000044d 	.word	0x0000044d
 568:	00000499 	.word	0x00000499
 56c:	20000030 	.word	0x20000030
 570:	e000e100 	.word	0xe000e100

00000574 <_dac_async_enable_channel>:
{
 574:	b510      	push	{r4, lr}
 * \param[in] hw The pointer to hardware instance
 * \param[in] ch The channel to enable
 */
static inline void _dac_enable_channel(void *const hw, const uint8_t ch)
{
	if (ch <= 1) {
 576:	2901      	cmp	r1, #1
 578:	d900      	bls.n	57c <_dac_async_enable_channel+0x8>
}
 57a:	bd10      	pop	{r4, pc}
	_dac_enable_channel(device->hw, ch);
 57c:	6903      	ldr	r3, [r0, #16]
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
 57e:	781a      	ldrb	r2, [r3, #0]
 580:	2002      	movs	r0, #2
 582:	4382      	bics	r2, r0
 584:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 586:	3001      	adds	r0, #1
 588:	689a      	ldr	r2, [r3, #8]
 58a:	4210      	tst	r0, r2
 58c:	d1fc      	bne.n	588 <_dac_async_enable_channel+0x14>
 58e:	004a      	lsls	r2, r1, #1
 590:	189a      	adds	r2, r3, r2
	((Dac *)hw)->DACCTRL[index].reg |= DAC_DACCTRL_ENABLE;
 592:	8990      	ldrh	r0, [r2, #12]
 594:	2402      	movs	r4, #2
 596:	4320      	orrs	r0, r4
 598:	8190      	strh	r0, [r2, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 59a:	2002      	movs	r0, #2
 59c:	689a      	ldr	r2, [r3, #8]
 59e:	4210      	tst	r0, r2
 5a0:	d1fc      	bne.n	59c <_dac_async_enable_channel+0x28>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
 5a2:	781a      	ldrb	r2, [r3, #0]
 5a4:	2002      	movs	r0, #2
 5a6:	4302      	orrs	r2, r0
 5a8:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 5aa:	3001      	adds	r0, #1
 5ac:	689a      	ldr	r2, [r3, #8]
 5ae:	4210      	tst	r0, r2
 5b0:	d1fc      	bne.n	5ac <_dac_async_enable_channel+0x38>
		hri_dac_clear_CTRLA_ENABLE_bit(hw);
		hri_dac_set_DACCTRL_ENABLE_bit(hw, ch);
		hri_dac_set_CTRLA_ENABLE_bit(hw);

		if (0 == ch) {
 5b2:	2900      	cmp	r1, #0
 5b4:	d104      	bne.n	5c0 <_dac_async_enable_channel+0x4c>
			while (!hri_dac_get_STATUS_READY0_bit(hw))
 5b6:	3101      	adds	r1, #1
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY0) >> DAC_STATUS_READY0_Pos;
 5b8:	79da      	ldrb	r2, [r3, #7]
 5ba:	420a      	tst	r2, r1
 5bc:	d0fc      	beq.n	5b8 <_dac_async_enable_channel+0x44>
 5be:	e7dc      	b.n	57a <_dac_async_enable_channel+0x6>
				;
		} else {
			while (!hri_dac_get_STATUS_READY1_bit(hw))
 5c0:	2102      	movs	r1, #2
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY1) >> DAC_STATUS_READY1_Pos;
 5c2:	79da      	ldrb	r2, [r3, #7]
 5c4:	420a      	tst	r2, r1
 5c6:	d0fc      	beq.n	5c2 <_dac_async_enable_channel+0x4e>
 5c8:	e7d7      	b.n	57a <_dac_async_enable_channel+0x6>

000005ca <_dac_async_is_channel_enable>:
{
	if (ch <= 1) {
		return hri_dac_get_DACCTRL_ENABLE_bit(hw, ch);
	}

	return false;
 5ca:	2300      	movs	r3, #0
	if (ch <= 1) {
 5cc:	2901      	cmp	r1, #1
 5ce:	d901      	bls.n	5d4 <_dac_async_is_channel_enable+0xa>
}
 5d0:	0018      	movs	r0, r3
 5d2:	4770      	bx	lr
	return _dac_is_channel_enabled(device->hw, ch);
 5d4:	6902      	ldr	r2, [r0, #16]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 5d6:	2002      	movs	r0, #2
 5d8:	6893      	ldr	r3, [r2, #8]
 5da:	4218      	tst	r0, r3
 5dc:	d1fc      	bne.n	5d8 <_dac_async_is_channel_enable+0xe>
	tmp = ((Dac *)hw)->DACCTRL[index].reg;
 5de:	3104      	adds	r1, #4
 5e0:	0049      	lsls	r1, r1, #1
 5e2:	1852      	adds	r2, r2, r1
 5e4:	8893      	ldrh	r3, [r2, #4]
	return (bool)tmp;
 5e6:	079b      	lsls	r3, r3, #30
 5e8:	0fdb      	lsrs	r3, r3, #31
 5ea:	e7f1      	b.n	5d0 <_dac_async_is_channel_enable+0x6>

000005ec <_dac_async_write_data>:
	hri_dac_write_DATABUF_reg(device->hw, ch, data);
 5ec:	6900      	ldr	r0, [r0, #16]
}

static inline void hri_dac_write_DATABUF_reg(const void *const hw, uint8_t index, hri_dac_databuf_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATABUF[index].reg = data;
 5ee:	3208      	adds	r2, #8
 5f0:	0052      	lsls	r2, r2, #1
 5f2:	1882      	adds	r2, r0, r2
 5f4:	8091      	strh	r1, [r2, #4]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 5f6:	2230      	movs	r2, #48	; 0x30
 5f8:	6883      	ldr	r3, [r0, #8]
 5fa:	421a      	tst	r2, r3
 5fc:	d1fc      	bne.n	5f8 <_dac_async_write_data+0xc>
}
 5fe:	4770      	bx	lr

00000600 <_dac_async_set_irq_state>:
	void *hw = device->hw;
 600:	6903      	ldr	r3, [r0, #16]
	if (DAC_DEVICE_CONVERSION_DONE_CB == type) {
 602:	2900      	cmp	r1, #0
 604:	d10b      	bne.n	61e <_dac_async_set_irq_state+0x1e>
	if (value == 0x0) {
 606:	2a00      	cmp	r2, #0
 608:	d104      	bne.n	614 <_dac_async_set_irq_state+0x14>
		((Dac *)hw)->INTENCLR.reg = DAC_INTENSET_EMPTY0;
 60a:	3204      	adds	r2, #4
 60c:	711a      	strb	r2, [r3, #4]
		((Dac *)hw)->INTENCLR.reg = DAC_INTENSET_EMPTY1;
 60e:	3204      	adds	r2, #4
 610:	711a      	strb	r2, [r3, #4]
 612:	e006      	b.n	622 <_dac_async_set_irq_state+0x22>
		((Dac *)hw)->INTENSET.reg = DAC_INTENSET_EMPTY0;
 614:	2204      	movs	r2, #4
 616:	715a      	strb	r2, [r3, #5]
		((Dac *)hw)->INTENSET.reg = DAC_INTENSET_EMPTY1;
 618:	3204      	adds	r2, #4
 61a:	715a      	strb	r2, [r3, #5]
 61c:	e001      	b.n	622 <_dac_async_set_irq_state+0x22>
	} else if (DAC_DEVICE_ERROR_CB == type) {
 61e:	2901      	cmp	r1, #1
 620:	d000      	beq.n	624 <_dac_async_set_irq_state+0x24>
}
 622:	4770      	bx	lr
	if (value == 0x0) {
 624:	2a00      	cmp	r2, #0
 626:	d104      	bne.n	632 <_dac_async_set_irq_state+0x32>
		((Dac *)hw)->INTENCLR.reg = DAC_INTENSET_UNDERRUN0;
 628:	3201      	adds	r2, #1
 62a:	711a      	strb	r2, [r3, #4]
		((Dac *)hw)->INTENCLR.reg = DAC_INTENSET_UNDERRUN1;
 62c:	3201      	adds	r2, #1
 62e:	711a      	strb	r2, [r3, #4]
 630:	e7f7      	b.n	622 <_dac_async_set_irq_state+0x22>
		((Dac *)hw)->INTENSET.reg = DAC_INTENSET_UNDERRUN0;
 632:	2201      	movs	r2, #1
 634:	715a      	strb	r2, [r3, #5]
		((Dac *)hw)->INTENSET.reg = DAC_INTENSET_UNDERRUN1;
 636:	3201      	adds	r2, #1
 638:	715a      	strb	r2, [r3, #5]
 63a:	e7f2      	b.n	622 <_dac_async_set_irq_state+0x22>

0000063c <DAC_Handler>:
{
 63c:	b510      	push	{r4, lr}
	void *const   hw         = _dac_dev->hw;
 63e:	4b13      	ldr	r3, [pc, #76]	; (68c <DAC_Handler+0x50>)
 640:	6818      	ldr	r0, [r3, #0]
 642:	6902      	ldr	r2, [r0, #16]
	return ((Dac *)hw)->INTFLAG.reg;
 644:	7993      	ldrb	r3, [r2, #6]
 646:	b2db      	uxtb	r3, r3
	if (int_status & DAC_INTFLAG_UNDERRUN0) {
 648:	07d9      	lsls	r1, r3, #31
 64a:	d406      	bmi.n	65a <DAC_Handler+0x1e>
	} else if (int_status & DAC_INTFLAG_UNDERRUN1) {
 64c:	0799      	lsls	r1, r3, #30
 64e:	d40a      	bmi.n	666 <DAC_Handler+0x2a>
	} else if (int_status & DAC_INTFLAG_EMPTY0) {
 650:	0759      	lsls	r1, r3, #29
 652:	d40e      	bmi.n	672 <DAC_Handler+0x36>
	} else if (int_status & DAC_INTFLAG_EMPTY1) {
 654:	071b      	lsls	r3, r3, #28
 656:	d412      	bmi.n	67e <DAC_Handler+0x42>
}
 658:	bd10      	pop	{r4, pc}
	((Dac *)hw)->INTFLAG.reg = DAC_INTFLAG_UNDERRUN0;
 65a:	2301      	movs	r3, #1
 65c:	7193      	strb	r3, [r2, #6]
		_dac_dev->dac_cb.tx_error_cb(_dac_dev, 0);
 65e:	6843      	ldr	r3, [r0, #4]
 660:	2100      	movs	r1, #0
 662:	4798      	blx	r3
 664:	e7f8      	b.n	658 <DAC_Handler+0x1c>
 666:	2301      	movs	r3, #1
 668:	7193      	strb	r3, [r2, #6]
		_dac_dev->dac_cb.tx_error_cb(_dac_dev, 1);
 66a:	6843      	ldr	r3, [r0, #4]
 66c:	2101      	movs	r1, #1
 66e:	4798      	blx	r3
 670:	e7f2      	b.n	658 <DAC_Handler+0x1c>
	((Dac *)hw)->INTFLAG.reg = DAC_INTFLAG_EMPTY0;
 672:	2304      	movs	r3, #4
 674:	7193      	strb	r3, [r2, #6]
		_dac_dev->dac_cb.tx_ready_cb(_dac_dev, 0);
 676:	6803      	ldr	r3, [r0, #0]
 678:	2100      	movs	r1, #0
 67a:	4798      	blx	r3
 67c:	e7ec      	b.n	658 <DAC_Handler+0x1c>
	((Dac *)hw)->INTFLAG.reg = DAC_INTFLAG_EMPTY1;
 67e:	2308      	movs	r3, #8
 680:	7193      	strb	r3, [r2, #6]
		_dac_dev->dac_cb.tx_ready_cb(_dac_dev, 1);
 682:	6803      	ldr	r3, [r0, #0]
 684:	2101      	movs	r1, #1
 686:	4798      	blx	r3
}
 688:	e7e6      	b.n	658 <DAC_Handler+0x1c>
 68a:	46c0      	nop			; (mov r8, r8)
 68c:	20000030 	.word	0x20000030

00000690 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 690:	07c3      	lsls	r3, r0, #31
 692:	d507      	bpl.n	6a4 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 694:	4a04      	ldr	r2, [pc, #16]	; (6a8 <_gclk_init_generators_by_fref+0x18>)
 696:	4b05      	ldr	r3, [pc, #20]	; (6ac <_gclk_init_generators_by_fref+0x1c>)
 698:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 69a:	0019      	movs	r1, r3
 69c:	4a04      	ldr	r2, [pc, #16]	; (6b0 <_gclk_init_generators_by_fref+0x20>)
 69e:	684b      	ldr	r3, [r1, #4]
 6a0:	4213      	tst	r3, r2
 6a2:	d1fc      	bne.n	69e <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 6a4:	4770      	bx	lr
 6a6:	46c0      	nop			; (mov r8, r8)
 6a8:	00010106 	.word	0x00010106
 6ac:	40001800 	.word	0x40001800
 6b0:	000007fd 	.word	0x000007fd

000006b4 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
 6b4:	4b03      	ldr	r3, [pc, #12]	; (6c4 <_mclk_init+0x10>)
 6b6:	2208      	movs	r2, #8
 6b8:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
 6ba:	3a04      	subs	r2, #4
 6bc:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
 6be:	3a03      	subs	r2, #3
 6c0:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 6c2:	4770      	bx	lr
 6c4:	40000400 	.word	0x40000400

000006c8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 6c8:	4b04      	ldr	r3, [pc, #16]	; (6dc <_osc32kctrl_init_sources+0x14>)
 6ca:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 6cc:	21f8      	movs	r1, #248	; 0xf8
 6ce:	0149      	lsls	r1, r1, #5
 6d0:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 6d2:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 6d4:	2201      	movs	r2, #1
 6d6:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 6d8:	4770      	bx	lr
 6da:	46c0      	nop			; (mov r8, r8)
 6dc:	40001000 	.word	0x40001000

000006e0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 6e0:	2282      	movs	r2, #130	; 0x82
 6e2:	4b0c      	ldr	r3, [pc, #48]	; (714 <_oscctrl_init_sources+0x34>)
 6e4:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 6e6:	0018      	movs	r0, r3
 6e8:	2138      	movs	r1, #56	; 0x38
 6ea:	3a80      	subs	r2, #128	; 0x80
 6ec:	5c43      	ldrb	r3, [r0, r1]
 6ee:	4213      	tst	r3, r2
 6f0:	d1fc      	bne.n	6ec <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 6f2:	4908      	ldr	r1, [pc, #32]	; (714 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 6f4:	2210      	movs	r2, #16
 6f6:	68cb      	ldr	r3, [r1, #12]
 6f8:	421a      	tst	r2, r3
 6fa:	d0fc      	beq.n	6f6 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
 6fc:	4a05      	ldr	r2, [pc, #20]	; (714 <_oscctrl_init_sources+0x34>)
 6fe:	7d13      	ldrb	r3, [r2, #20]
 700:	2180      	movs	r1, #128	; 0x80
 702:	430b      	orrs	r3, r1
 704:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 706:	0010      	movs	r0, r2
 708:	3948      	subs	r1, #72	; 0x48
 70a:	220e      	movs	r2, #14
 70c:	5c43      	ldrb	r3, [r0, r1]
 70e:	4213      	tst	r3, r2
 710:	d1fc      	bne.n	70c <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 712:	4770      	bx	lr
 714:	40000c00 	.word	0x40000c00

00000718 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 718:	4770      	bx	lr

0000071a <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 71a:	2380      	movs	r3, #128	; 0x80
 71c:	05db      	lsls	r3, r3, #23
 71e:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 720:	2203      	movs	r2, #3
 722:	4013      	ands	r3, r2
 724:	4298      	cmp	r0, r3
 726:	d00c      	beq.n	742 <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
 728:	2280      	movs	r2, #128	; 0x80
 72a:	05d2      	lsls	r2, r2, #23
 72c:	23ff      	movs	r3, #255	; 0xff
 72e:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 730:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 732:	2103      	movs	r1, #3
 734:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
 736:	4008      	ands	r0, r1
 738:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
 73a:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 73c:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 73e:	2b00      	cmp	r3, #0
 740:	d0fc      	beq.n	73c <_set_performance_level+0x22>
			;
	}
}
 742:	4770      	bx	lr

00000744 <main>:
#include <atmel_start.h>

int main(void)
{
 744:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 746:	4b02      	ldr	r3, [pc, #8]	; (750 <main+0xc>)
 748:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		DAC_0_example();
 74a:	4c02      	ldr	r4, [pc, #8]	; (754 <main+0x10>)
 74c:	47a0      	blx	r4
 74e:	e7fd      	b.n	74c <main+0x8>
 750:	00000115 	.word	0x00000115
 754:	0000026d 	.word	0x0000026d

00000758 <__libc_init_array>:
 758:	b570      	push	{r4, r5, r6, lr}
 75a:	2600      	movs	r6, #0
 75c:	4d0c      	ldr	r5, [pc, #48]	; (790 <__libc_init_array+0x38>)
 75e:	4c0d      	ldr	r4, [pc, #52]	; (794 <__libc_init_array+0x3c>)
 760:	1b64      	subs	r4, r4, r5
 762:	10a4      	asrs	r4, r4, #2
 764:	42a6      	cmp	r6, r4
 766:	d109      	bne.n	77c <__libc_init_array+0x24>
 768:	2600      	movs	r6, #0
 76a:	f000 f833 	bl	7d4 <_init>
 76e:	4d0a      	ldr	r5, [pc, #40]	; (798 <__libc_init_array+0x40>)
 770:	4c0a      	ldr	r4, [pc, #40]	; (79c <__libc_init_array+0x44>)
 772:	1b64      	subs	r4, r4, r5
 774:	10a4      	asrs	r4, r4, #2
 776:	42a6      	cmp	r6, r4
 778:	d105      	bne.n	786 <__libc_init_array+0x2e>
 77a:	bd70      	pop	{r4, r5, r6, pc}
 77c:	00b3      	lsls	r3, r6, #2
 77e:	58eb      	ldr	r3, [r5, r3]
 780:	4798      	blx	r3
 782:	3601      	adds	r6, #1
 784:	e7ee      	b.n	764 <__libc_init_array+0xc>
 786:	00b3      	lsls	r3, r6, #2
 788:	58eb      	ldr	r3, [r5, r3]
 78a:	4798      	blx	r3
 78c:	3601      	adds	r6, #1
 78e:	e7f2      	b.n	776 <__libc_init_array+0x1e>
 790:	000007e0 	.word	0x000007e0
 794:	000007e0 	.word	0x000007e0
 798:	000007e0 	.word	0x000007e0
 79c:	000007e4 	.word	0x000007e4
 7a0:	682f2e2e 	.word	0x682f2e2e
 7a4:	732f6c61 	.word	0x732f6c61
 7a8:	682f6372 	.word	0x682f6372
 7ac:	645f6c61 	.word	0x645f6c61
 7b0:	615f6361 	.word	0x615f6361
 7b4:	636e7973 	.word	0x636e7973
 7b8:	0000632e 	.word	0x0000632e
 7bc:	682f2e2e 	.word	0x682f2e2e
 7c0:	642f6c70 	.word	0x642f6c70
 7c4:	682f6361 	.word	0x682f6361
 7c8:	645f6c70 	.word	0x645f6c70
 7cc:	632e6361 	.word	0x632e6361
 7d0:	00000000 	.word	0x00000000

000007d4 <_init>:
 7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7d6:	46c0      	nop			; (mov r8, r8)
 7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7da:	bc08      	pop	{r3}
 7dc:	469e      	mov	lr, r3
 7de:	4770      	bx	lr

000007e0 <__init_array_start>:
 7e0:	000000dd 	.word	0x000000dd

000007e4 <_fini>:
 7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7e6:	46c0      	nop			; (mov r8, r8)
 7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7ea:	bc08      	pop	{r3}
 7ec:	469e      	mov	lr, r3
 7ee:	4770      	bx	lr

000007f0 <__fini_array_start>:
 7f0:	000000b5 	.word	0x000000b5
