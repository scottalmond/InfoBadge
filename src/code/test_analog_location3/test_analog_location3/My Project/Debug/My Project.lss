
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000828  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00010828  2**0
                  CONTENTS
  2 .lpram        00000000  30000000  30000000  00010828  2**0
                  CONTENTS
  3 .bss          00000034  20000000  20000000  00020000  2**2
                  ALLOC
  4 .stack        00002004  20000034  20000034  00020000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010828  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00010850  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000979c  00000000  00000000  000108a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c7c  00000000  00000000  0001a045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001c9b  00000000  00000000  0001bcc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000348  00000000  00000000  0001d95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000350  00000000  00000000  0001dca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019c69  00000000  00000000  0001dff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000adb0  00000000  00000000  00037c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088ad3  00000000  00000000  00042a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000005e4  00000000  00000000  000cb4e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	38 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     8 . %...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	00000828 	.word	0x00000828

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000004 	.word	0x20000004
 108:	00000828 	.word	0x00000828
 10c:	00000828 	.word	0x00000828
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
 118:	4798      	blx	r3
}
 11a:	bd10      	pop	{r4, pc}
 11c:	00000269 	.word	0x00000269

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
 124:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 126:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0x6c>)
 128:	4b1a      	ldr	r3, [pc, #104]	; (194 <Reset_Handler+0x70>)
 12a:	429a      	cmp	r2, r3
 12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 12e:	001a      	movs	r2, r3
 130:	4b19      	ldr	r3, [pc, #100]	; (198 <Reset_Handler+0x74>)
 132:	429a      	cmp	r2, r3
 134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
 136:	4a19      	ldr	r2, [pc, #100]	; (19c <Reset_Handler+0x78>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4813      	ldr	r0, [pc, #76]	; (194 <Reset_Handler+0x70>)
 146:	4912      	ldr	r1, [pc, #72]	; (190 <Reset_Handler+0x6c>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 152:	4a13      	ldr	r2, [pc, #76]	; (1a0 <Reset_Handler+0x7c>)
 154:	4b13      	ldr	r3, [pc, #76]	; (1a4 <Reset_Handler+0x80>)
 156:	429a      	cmp	r2, r3
 158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
 15a:	43d3      	mvns	r3, r2
 15c:	4911      	ldr	r1, [pc, #68]	; (1a4 <Reset_Handler+0x80>)
 15e:	185b      	adds	r3, r3, r1
 160:	2103      	movs	r1, #3
 162:	438b      	bics	r3, r1
 164:	3304      	adds	r3, #4
 166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 168:	2100      	movs	r1, #0
 16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 16c:	4293      	cmp	r3, r2
 16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 170:	4a0d      	ldr	r2, [pc, #52]	; (1a8 <Reset_Handler+0x84>)
 172:	21ff      	movs	r1, #255	; 0xff
 174:	4b0d      	ldr	r3, [pc, #52]	; (1ac <Reset_Handler+0x88>)
 176:	438b      	bics	r3, r1
 178:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 17a:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x8c>)
 17c:	6853      	ldr	r3, [r2, #4]
 17e:	397f      	subs	r1, #127	; 0x7f
 180:	430b      	orrs	r3, r1
 182:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x90>)
 186:	4798      	blx	r3
        main();
 188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x94>)
 18a:	4798      	blx	r3
 18c:	e7fe      	b.n	18c <Reset_Handler+0x68>
 18e:	46c0      	nop			; (mov r8, r8)
 190:	00000828 	.word	0x00000828
 194:	20000000 	.word	0x20000000
 198:	20000000 	.word	0x20000000
 19c:	20000004 	.word	0x20000004
 1a0:	20000000 	.word	0x20000000
 1a4:	20000034 	.word	0x20000034
 1a8:	e000ed00 	.word	0xe000ed00
 1ac:	00000000 	.word	0x00000000
 1b0:	41004000 	.word	0x41004000
 1b4:	0000078d 	.word	0x0000078d
 1b8:	00000661 	.word	0x00000661

000001bc <DAC_0_PORT_init>:
#include <hal_init.h>

struct dac_sync_descriptor DAC_0;

void DAC_0_PORT_init(void)
{
 1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 1be:	26c0      	movs	r6, #192	; 0xc0
 1c0:	05f6      	lsls	r6, r6, #23
 1c2:	2304      	movs	r3, #4
 1c4:	6073      	str	r3, [r6, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 1c6:	4b13      	ldr	r3, [pc, #76]	; (214 <DAC_0_PORT_init+0x58>)
 1c8:	4a13      	ldr	r2, [pc, #76]	; (218 <DAC_0_PORT_init+0x5c>)
 1ca:	629a      	str	r2, [r3, #40]	; 0x28
 1cc:	22c0      	movs	r2, #192	; 0xc0
 1ce:	0612      	lsls	r2, r2, #24
 1d0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1d2:	2042      	movs	r0, #66	; 0x42
 1d4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1d6:	2501      	movs	r5, #1
 1d8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1da:	2401      	movs	r4, #1
 1dc:	4321      	orrs	r1, r4
 1de:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1e0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1e2:	3811      	subs	r0, #17
 1e4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 1e6:	270f      	movs	r7, #15
 1e8:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
 1ea:	4321      	orrs	r1, r4
 1ec:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1ee:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 1f0:	2108      	movs	r1, #8
 1f2:	6071      	str	r1, [r6, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 1f4:	4909      	ldr	r1, [pc, #36]	; (21c <DAC_0_PORT_init+0x60>)
 1f6:	6299      	str	r1, [r3, #40]	; 0x28
 1f8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1fa:	2143      	movs	r1, #67	; 0x43
 1fc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1fe:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 200:	4322      	orrs	r2, r4
 202:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 204:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 206:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 208:	3934      	subs	r1, #52	; 0x34
 20a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
 20c:	3101      	adds	r1, #1
 20e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 210:	541a      	strb	r2, [r3, r0]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA03, PINMUX_PA03B_DAC_VREFP);
}
 212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 214:	40002800 	.word	0x40002800
 218:	40000004 	.word	0x40000004
 21c:	40000008 	.word	0x40000008

00000220 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_DAC;
 220:	4a05      	ldr	r2, [pc, #20]	; (238 <DAC_0_CLOCK_init+0x18>)
 222:	69d1      	ldr	r1, [r2, #28]
 224:	2380      	movs	r3, #128	; 0x80
 226:	015b      	lsls	r3, r3, #5
 228:	430b      	orrs	r3, r1
 22a:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
 22c:	2140      	movs	r1, #64	; 0x40
 22e:	2380      	movs	r3, #128	; 0x80
 230:	005b      	lsls	r3, r3, #1
 232:	4a02      	ldr	r2, [pc, #8]	; (23c <DAC_0_CLOCK_init+0x1c>)
 234:	50d1      	str	r1, [r2, r3]
void DAC_0_CLOCK_init(void)
{

	hri_mclk_set_APBCMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
 236:	4770      	bx	lr
 238:	40000400 	.word	0x40000400
 23c:	40001800 	.word	0x40001800

00000240 <DAC_0_init>:

void DAC_0_init(void)
{
 240:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
 242:	4b04      	ldr	r3, [pc, #16]	; (254 <DAC_0_init+0x14>)
 244:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
 246:	4904      	ldr	r1, [pc, #16]	; (258 <DAC_0_init+0x18>)
 248:	4804      	ldr	r0, [pc, #16]	; (25c <DAC_0_init+0x1c>)
 24a:	4b05      	ldr	r3, [pc, #20]	; (260 <DAC_0_init+0x20>)
 24c:	4798      	blx	r3
	DAC_0_PORT_init();
 24e:	4b05      	ldr	r3, [pc, #20]	; (264 <DAC_0_init+0x24>)
 250:	4798      	blx	r3
}
 252:	bd10      	pop	{r4, pc}
 254:	00000221 	.word	0x00000221
 258:	42003000 	.word	0x42003000
 25c:	20000020 	.word	0x20000020
 260:	000002c5 	.word	0x000002c5
 264:	000001bd 	.word	0x000001bd

00000268 <system_init>:

void system_init(void)
{
 268:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 26a:	4b02      	ldr	r3, [pc, #8]	; (274 <system_init+0xc>)
 26c:	4798      	blx	r3
	init_mcu();

	DAC_0_init();
 26e:	4b02      	ldr	r3, [pc, #8]	; (278 <system_init+0x10>)
 270:	4798      	blx	r3
}
 272:	bd10      	pop	{r4, pc}
 274:	00000429 	.word	0x00000429
 278:	00000241 	.word	0x00000241

0000027c <DAC_0_example>:

/**
 * Example of using DAC_0 to generate waveform.
 */
void DAC_0_example(void)
{
 27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 27e:	b083      	sub	sp, #12
	uint16_t i = 0;
 280:	2200      	movs	r2, #0
 282:	466b      	mov	r3, sp
 284:	80da      	strh	r2, [r3, #6]

	dac_sync_enable_channel(&DAC_0, 0);
 286:	2100      	movs	r1, #0
 288:	480a      	ldr	r0, [pc, #40]	; (2b4 <DAC_0_example+0x38>)
 28a:	4b0b      	ldr	r3, [pc, #44]	; (2b8 <DAC_0_example+0x3c>)
 28c:	4798      	blx	r3

	for (;;) {
		dac_sync_write(&DAC_0, 0, &i, 1);
 28e:	4d09      	ldr	r5, [pc, #36]	; (2b4 <DAC_0_example+0x38>)
 290:	4f0a      	ldr	r7, [pc, #40]	; (2bc <DAC_0_example+0x40>)
		i = (i + 1) % (1024*4);
		delay_ms(10);
 292:	4e0b      	ldr	r6, [pc, #44]	; (2c0 <DAC_0_example+0x44>)
		dac_sync_write(&DAC_0, 0, &i, 1);
 294:	466b      	mov	r3, sp
 296:	1d9c      	adds	r4, r3, #6
 298:	2301      	movs	r3, #1
 29a:	0022      	movs	r2, r4
 29c:	2100      	movs	r1, #0
 29e:	0028      	movs	r0, r5
 2a0:	47b8      	blx	r7
		i = (i + 1) % (1024*4);
 2a2:	8823      	ldrh	r3, [r4, #0]
 2a4:	3301      	adds	r3, #1
 2a6:	051b      	lsls	r3, r3, #20
 2a8:	0d1b      	lsrs	r3, r3, #20
 2aa:	8023      	strh	r3, [r4, #0]
		delay_ms(10);
 2ac:	200a      	movs	r0, #10
 2ae:	47b0      	blx	r6
 2b0:	e7f0      	b.n	294 <DAC_0_example+0x18>
 2b2:	46c0      	nop			; (mov r8, r8)
 2b4:	20000020 	.word	0x20000020
 2b8:	00000309 	.word	0x00000309
 2bc:	00000345 	.word	0x00000345
 2c0:	000003d9 	.word	0x000003d9

000002c4 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
 2c4:	b570      	push	{r4, r5, r6, lr}
 2c6:	0005      	movs	r5, r0
 2c8:	000c      	movs	r4, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
 2ca:	2800      	cmp	r0, #0
 2cc:	d013      	beq.n	2f6 <dac_sync_init+0x32>
 2ce:	0008      	movs	r0, r1
 2d0:	1e43      	subs	r3, r0, #1
 2d2:	4198      	sbcs	r0, r3
 2d4:	b2c0      	uxtb	r0, r0
 2d6:	2232      	movs	r2, #50	; 0x32
 2d8:	4908      	ldr	r1, [pc, #32]	; (2fc <dac_sync_init+0x38>)
 2da:	4b09      	ldr	r3, [pc, #36]	; (300 <dac_sync_init+0x3c>)
 2dc:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
 2de:	0021      	movs	r1, r4
 2e0:	0028      	movs	r0, r5
 2e2:	4b08      	ldr	r3, [pc, #32]	; (304 <dac_sync_init+0x40>)
 2e4:	4798      	blx	r3
	if (rc) {
 2e6:	2800      	cmp	r0, #0
 2e8:	d104      	bne.n	2f4 <dac_sync_init+0x30>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
 2ea:	2300      	movs	r3, #0
 2ec:	606b      	str	r3, [r5, #4]
		descr->sel_ch[i].length = 0;
 2ee:	60ab      	str	r3, [r5, #8]
		descr->sel_ch[i].buffer = NULL;
 2f0:	60eb      	str	r3, [r5, #12]
		descr->sel_ch[i].length = 0;
 2f2:	612b      	str	r3, [r5, #16]
	}

	return ERR_NONE;
}
 2f4:	bd70      	pop	{r4, r5, r6, pc}
 2f6:	2000      	movs	r0, #0
 2f8:	e7ed      	b.n	2d6 <dac_sync_init+0x12>
 2fa:	46c0      	nop			; (mov r8, r8)
 2fc:	000007d4 	.word	0x000007d4
 300:	000003f9 	.word	0x000003f9
 304:	000004f5 	.word	0x000004f5

00000308 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
 308:	b570      	push	{r4, r5, r6, lr}
 30a:	0004      	movs	r4, r0
 30c:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
 30e:	2800      	cmp	r0, #0
 310:	d010      	beq.n	334 <dac_sync_enable_channel+0x2c>
 312:	2000      	movs	r0, #0
 314:	2301      	movs	r3, #1
 316:	428b      	cmp	r3, r1
 318:	4140      	adcs	r0, r0
 31a:	b2c0      	uxtb	r0, r0
 31c:	2301      	movs	r3, #1
 31e:	4018      	ands	r0, r3
 320:	2252      	movs	r2, #82	; 0x52
 322:	4905      	ldr	r1, [pc, #20]	; (338 <dac_sync_enable_channel+0x30>)
 324:	4b05      	ldr	r3, [pc, #20]	; (33c <dac_sync_enable_channel+0x34>)
 326:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
 328:	0029      	movs	r1, r5
 32a:	0020      	movs	r0, r4
 32c:	4b04      	ldr	r3, [pc, #16]	; (340 <dac_sync_enable_channel+0x38>)
 32e:	4798      	blx	r3

	return ERR_NONE;
}
 330:	2000      	movs	r0, #0
 332:	bd70      	pop	{r4, r5, r6, pc}
 334:	2000      	movs	r0, #0
 336:	e7f1      	b.n	31c <dac_sync_enable_channel+0x14>
 338:	000007d4 	.word	0x000007d4
 33c:	000003f9 	.word	0x000003f9
 340:	00000521 	.word	0x00000521

00000344 <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
 344:	b5f0      	push	{r4, r5, r6, r7, lr}
 346:	46ce      	mov	lr, r9
 348:	b500      	push	{lr}
 34a:	b082      	sub	sp, #8
 34c:	0007      	movs	r7, r0
 34e:	000d      	movs	r5, r1
 350:	4691      	mov	r9, r2
 352:	001e      	movs	r6, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
 354:	2800      	cmp	r0, #0
 356:	d02d      	beq.n	3b4 <dac_sync_write+0x70>
 358:	2000      	movs	r0, #0
 35a:	2901      	cmp	r1, #1
 35c:	d924      	bls.n	3a8 <dac_sync_write+0x64>
 35e:	226a      	movs	r2, #106	; 0x6a
 360:	4919      	ldr	r1, [pc, #100]	; (3c8 <dac_sync_write+0x84>)
 362:	4b1a      	ldr	r3, [pc, #104]	; (3cc <dac_sync_write+0x88>)
 364:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
 366:	9701      	str	r7, [sp, #4]
 368:	0029      	movs	r1, r5
 36a:	0038      	movs	r0, r7
 36c:	4b18      	ldr	r3, [pc, #96]	; (3d0 <dac_sync_write+0x8c>)
 36e:	4798      	blx	r3
 370:	2800      	cmp	r0, #0
 372:	d023      	beq.n	3bc <dac_sync_write+0x78>
 374:	00ec      	lsls	r4, r5, #3
 376:	193c      	adds	r4, r7, r4
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
 378:	464b      	mov	r3, r9
 37a:	6063      	str	r3, [r4, #4]
	descr->sel_ch[ch].length = length;
 37c:	60a6      	str	r6, [r4, #8]

	while (descr->sel_ch[ch].length) {
 37e:	2e00      	cmp	r6, #0
 380:	d01f      	beq.n	3c2 <dac_sync_write+0x7e>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
 382:	4f14      	ldr	r7, [pc, #80]	; (3d4 <dac_sync_write+0x90>)
 384:	6863      	ldr	r3, [r4, #4]
 386:	8819      	ldrh	r1, [r3, #0]
 388:	002a      	movs	r2, r5
 38a:	9801      	ldr	r0, [sp, #4]
 38c:	47b8      	blx	r7
		descr->sel_ch[ch].buffer++;
 38e:	6863      	ldr	r3, [r4, #4]
 390:	3302      	adds	r3, #2
 392:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
 394:	68a3      	ldr	r3, [r4, #8]
 396:	3b01      	subs	r3, #1
 398:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
 39a:	2b00      	cmp	r3, #0
 39c:	d1f2      	bne.n	384 <dac_sync_write+0x40>
	}

	return ERR_NONE;
 39e:	2000      	movs	r0, #0
}
 3a0:	b002      	add	sp, #8
 3a2:	bc04      	pop	{r2}
 3a4:	4691      	mov	r9, r2
 3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
 3a8:	2a00      	cmp	r2, #0
 3aa:	d005      	beq.n	3b8 <dac_sync_write+0x74>
 3ac:	0030      	movs	r0, r6
 3ae:	1e43      	subs	r3, r0, #1
 3b0:	4198      	sbcs	r0, r3
 3b2:	e7d4      	b.n	35e <dac_sync_write+0x1a>
 3b4:	2000      	movs	r0, #0
 3b6:	e7d2      	b.n	35e <dac_sync_write+0x1a>
 3b8:	2000      	movs	r0, #0
 3ba:	e7d0      	b.n	35e <dac_sync_write+0x1a>
		return ERR_NOT_READY;
 3bc:	201d      	movs	r0, #29
 3be:	4240      	negs	r0, r0
 3c0:	e7ee      	b.n	3a0 <dac_sync_write+0x5c>
	return ERR_NONE;
 3c2:	2000      	movs	r0, #0
 3c4:	e7ec      	b.n	3a0 <dac_sync_write+0x5c>
 3c6:	46c0      	nop			; (mov r8, r8)
 3c8:	000007d4 	.word	0x000007d4
 3cc:	000003f9 	.word	0x000003f9
 3d0:	00000577 	.word	0x00000577
 3d4:	00000599 	.word	0x00000599

000003d8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 3d8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 3da:	4b04      	ldr	r3, [pc, #16]	; (3ec <delay_ms+0x14>)
 3dc:	681c      	ldr	r4, [r3, #0]
 3de:	4b04      	ldr	r3, [pc, #16]	; (3f0 <delay_ms+0x18>)
 3e0:	4798      	blx	r3
 3e2:	0001      	movs	r1, r0
 3e4:	0020      	movs	r0, r4
 3e6:	4b03      	ldr	r3, [pc, #12]	; (3f4 <delay_ms+0x1c>)
 3e8:	4798      	blx	r3
}
 3ea:	bd10      	pop	{r4, pc}
 3ec:	2000001c 	.word	0x2000001c
 3f0:	00000401 	.word	0x00000401
 3f4:	00000421 	.word	0x00000421

000003f8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 3f8:	2800      	cmp	r0, #0
 3fa:	d100      	bne.n	3fe <assert+0x6>
		__asm("BKPT #0");
 3fc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 3fe:	4770      	bx	lr

00000400 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
 400:	b510      	push	{r4, lr}
 402:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
 404:	20c8      	movs	r0, #200	; 0xc8
 406:	0040      	lsls	r0, r0, #1
 408:	4358      	muls	r0, r3
 40a:	3002      	adds	r0, #2
 40c:	2103      	movs	r1, #3
 40e:	4b03      	ldr	r3, [pc, #12]	; (41c <_get_cycles_for_ms+0x1c>)
 410:	4798      	blx	r3
 412:	0003      	movs	r3, r0
 414:	0080      	lsls	r0, r0, #2
 416:	18c0      	adds	r0, r0, r3
 418:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 41a:	bd10      	pop	{r4, pc}
 41c:	00000675 	.word	0x00000675

00000420 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
 420:	3901      	subs	r1, #1
 422:	d8fd      	bhi.n	420 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
 424:	4770      	bx	lr
	...

00000428 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 428:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 42a:	4b09      	ldr	r3, [pc, #36]	; (450 <_init_chip+0x28>)
 42c:	685a      	ldr	r2, [r3, #4]
 42e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
 430:	2002      	movs	r0, #2
 432:	4b08      	ldr	r3, [pc, #32]	; (454 <_init_chip+0x2c>)
 434:	4798      	blx	r3

	_osc32kctrl_init_sources();
 436:	4b08      	ldr	r3, [pc, #32]	; (458 <_init_chip+0x30>)
 438:	4798      	blx	r3
	_oscctrl_init_sources();
 43a:	4b08      	ldr	r3, [pc, #32]	; (45c <_init_chip+0x34>)
 43c:	4798      	blx	r3
	_mclk_init();
 43e:	4b08      	ldr	r3, [pc, #32]	; (460 <_init_chip+0x38>)
 440:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 442:	4b08      	ldr	r3, [pc, #32]	; (464 <_init_chip+0x3c>)
 444:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 446:	20ff      	movs	r0, #255	; 0xff
 448:	4b07      	ldr	r3, [pc, #28]	; (468 <_init_chip+0x40>)
 44a:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 44c:	bd10      	pop	{r4, pc}
 44e:	46c0      	nop			; (mov r8, r8)
 450:	41004000 	.word	0x41004000
 454:	00000637 	.word	0x00000637
 458:	000005e5 	.word	0x000005e5
 45c:	000005fd 	.word	0x000005fd
 460:	000005d1 	.word	0x000005d1
 464:	00000635 	.word	0x00000635
 468:	000005ad 	.word	0x000005ad

0000046c <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
 46c:	b510      	push	{r4, lr}
 46e:	0004      	movs	r4, r0
	ASSERT(hw == DAC);
 470:	4b1d      	ldr	r3, [pc, #116]	; (4e8 <_dac_init+0x7c>)
 472:	18c0      	adds	r0, r0, r3
 474:	4243      	negs	r3, r0
 476:	4158      	adcs	r0, r3
 478:	b2c0      	uxtb	r0, r0
 47a:	22dc      	movs	r2, #220	; 0xdc
 47c:	491b      	ldr	r1, [pc, #108]	; (4ec <_dac_init+0x80>)
 47e:	4b1c      	ldr	r3, [pc, #112]	; (4f0 <_dac_init+0x84>)
 480:	4798      	blx	r3
	};
}

static inline bool hri_dac_is_syncing(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	return ((Dac *)hw)->SYNCBUSY.reg & reg;
 482:	68a3      	ldr	r3, [r4, #8]

	if (!hri_dac_is_syncing(hw, DAC_SYNCBUSY_SWRST)) {
 484:	07db      	lsls	r3, r3, #31
 486:	d418      	bmi.n	4ba <_dac_init+0x4e>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 488:	2203      	movs	r2, #3
 48a:	68a3      	ldr	r3, [r4, #8]
 48c:	421a      	tst	r2, r3
 48e:	d1fc      	bne.n	48a <_dac_init+0x1e>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
 490:	7823      	ldrb	r3, [r4, #0]
		if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
 492:	079b      	lsls	r3, r3, #30
 494:	d50b      	bpl.n	4ae <_dac_init+0x42>
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
 496:	7823      	ldrb	r3, [r4, #0]
 498:	2202      	movs	r2, #2
 49a:	4393      	bics	r3, r2
 49c:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 49e:	3201      	adds	r2, #1
 4a0:	68a3      	ldr	r3, [r4, #8]
 4a2:	421a      	tst	r2, r3
 4a4:	d1fc      	bne.n	4a0 <_dac_init+0x34>
 4a6:	2202      	movs	r2, #2
 4a8:	68a3      	ldr	r3, [r4, #8]
 4aa:	421a      	tst	r2, r3
 4ac:	d1fc      	bne.n	4a8 <_dac_init+0x3c>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
 4ae:	2301      	movs	r3, #1
 4b0:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4b2:	2203      	movs	r2, #3
 4b4:	68a3      	ldr	r3, [r4, #8]
 4b6:	421a      	tst	r2, r3
 4b8:	d1fc      	bne.n	4b4 <_dac_init+0x48>
 4ba:	2201      	movs	r2, #1
 4bc:	68a3      	ldr	r3, [r4, #8]
 4be:	421a      	tst	r2, r3
 4c0:	d1fc      	bne.n	4bc <_dac_init+0x50>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
 4c2:	2300      	movs	r3, #0
 4c4:	7063      	strb	r3, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
 4c6:	70a3      	strb	r3, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
 4c8:	81a3      	strh	r3, [r4, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4ca:	2202      	movs	r2, #2
 4cc:	68a3      	ldr	r3, [r4, #8]
 4ce:	421a      	tst	r2, r3
 4d0:	d1fc      	bne.n	4cc <_dac_init+0x60>
	((Dac *)hw)->DACCTRL[index].reg = data;
 4d2:	2300      	movs	r3, #0
 4d4:	81e3      	strh	r3, [r4, #14]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 4d6:	2202      	movs	r2, #2
 4d8:	68a3      	ldr	r3, [r4, #8]
 4da:	421a      	tst	r2, r3
 4dc:	d1fc      	bne.n	4d8 <_dac_init+0x6c>
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
 4de:	2301      	movs	r3, #1
 4e0:	7623      	strb	r3, [r4, #24]
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
}
 4e2:	2000      	movs	r0, #0
 4e4:	bd10      	pop	{r4, pc}
 4e6:	46c0      	nop			; (mov r8, r8)
 4e8:	bdffd000 	.word	0xbdffd000
 4ec:	000007f0 	.word	0x000007f0
 4f0:	000003f9 	.word	0x000003f9

000004f4 <_dac_sync_init>:
{
 4f4:	b570      	push	{r4, r5, r6, lr}
 4f6:	0005      	movs	r5, r0
 4f8:	000c      	movs	r4, r1
	ASSERT(device);
 4fa:	1e43      	subs	r3, r0, #1
 4fc:	4198      	sbcs	r0, r3
 4fe:	b2c0      	uxtb	r0, r0
 500:	2252      	movs	r2, #82	; 0x52
 502:	4904      	ldr	r1, [pc, #16]	; (514 <_dac_sync_init+0x20>)
 504:	4b04      	ldr	r3, [pc, #16]	; (518 <_dac_sync_init+0x24>)
 506:	4798      	blx	r3
	device->hw = hw;
 508:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
 50a:	0020      	movs	r0, r4
 50c:	4b03      	ldr	r3, [pc, #12]	; (51c <_dac_sync_init+0x28>)
 50e:	4798      	blx	r3
}
 510:	bd70      	pop	{r4, r5, r6, pc}
 512:	46c0      	nop			; (mov r8, r8)
 514:	000007f0 	.word	0x000007f0
 518:	000003f9 	.word	0x000003f9
 51c:	0000046d 	.word	0x0000046d

00000520 <_dac_sync_enable_channel>:
{
 520:	b510      	push	{r4, lr}
 * \param[in] hw The pointer to hardware instance
 * \param[in] ch The channel to enable
 */
static inline void _dac_enable_channel(void *const hw, const uint8_t ch)
{
	if (ch <= 1) {
 522:	2901      	cmp	r1, #1
 524:	d900      	bls.n	528 <_dac_sync_enable_channel+0x8>
}
 526:	bd10      	pop	{r4, pc}
	_dac_enable_channel(device->hw, ch);
 528:	6803      	ldr	r3, [r0, #0]
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
 52a:	781a      	ldrb	r2, [r3, #0]
 52c:	2002      	movs	r0, #2
 52e:	4382      	bics	r2, r0
 530:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 532:	3001      	adds	r0, #1
 534:	689a      	ldr	r2, [r3, #8]
 536:	4210      	tst	r0, r2
 538:	d1fc      	bne.n	534 <_dac_sync_enable_channel+0x14>
 53a:	004a      	lsls	r2, r1, #1
 53c:	189a      	adds	r2, r3, r2
	((Dac *)hw)->DACCTRL[index].reg |= DAC_DACCTRL_ENABLE;
 53e:	8990      	ldrh	r0, [r2, #12]
 540:	2402      	movs	r4, #2
 542:	4320      	orrs	r0, r4
 544:	8190      	strh	r0, [r2, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 546:	2002      	movs	r0, #2
 548:	689a      	ldr	r2, [r3, #8]
 54a:	4210      	tst	r0, r2
 54c:	d1fc      	bne.n	548 <_dac_sync_enable_channel+0x28>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
 54e:	781a      	ldrb	r2, [r3, #0]
 550:	2002      	movs	r0, #2
 552:	4302      	orrs	r2, r0
 554:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 556:	3001      	adds	r0, #1
 558:	689a      	ldr	r2, [r3, #8]
 55a:	4210      	tst	r0, r2
 55c:	d1fc      	bne.n	558 <_dac_sync_enable_channel+0x38>
		hri_dac_clear_CTRLA_ENABLE_bit(hw);
		hri_dac_set_DACCTRL_ENABLE_bit(hw, ch);
		hri_dac_set_CTRLA_ENABLE_bit(hw);

		if (0 == ch) {
 55e:	2900      	cmp	r1, #0
 560:	d104      	bne.n	56c <_dac_sync_enable_channel+0x4c>
			while (!hri_dac_get_STATUS_READY0_bit(hw))
 562:	3101      	adds	r1, #1
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY0) >> DAC_STATUS_READY0_Pos;
 564:	79da      	ldrb	r2, [r3, #7]
 566:	420a      	tst	r2, r1
 568:	d0fc      	beq.n	564 <_dac_sync_enable_channel+0x44>
 56a:	e7dc      	b.n	526 <_dac_sync_enable_channel+0x6>
				;
		} else {
			while (!hri_dac_get_STATUS_READY1_bit(hw))
 56c:	2102      	movs	r1, #2
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY1) >> DAC_STATUS_READY1_Pos;
 56e:	79da      	ldrb	r2, [r3, #7]
 570:	420a      	tst	r2, r1
 572:	d0fc      	beq.n	56e <_dac_sync_enable_channel+0x4e>
 574:	e7d7      	b.n	526 <_dac_sync_enable_channel+0x6>

00000576 <_dac_sync_is_channel_enable>:
{
	if (ch <= 1) {
		return hri_dac_get_DACCTRL_ENABLE_bit(hw, ch);
	}

	return false;
 576:	2300      	movs	r3, #0
	if (ch <= 1) {
 578:	2901      	cmp	r1, #1
 57a:	d901      	bls.n	580 <_dac_sync_is_channel_enable+0xa>
}
 57c:	0018      	movs	r0, r3
 57e:	4770      	bx	lr
	return _dac_is_channel_enabled(device->hw, ch);
 580:	6802      	ldr	r2, [r0, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 582:	2002      	movs	r0, #2
 584:	6893      	ldr	r3, [r2, #8]
 586:	4218      	tst	r0, r3
 588:	d1fc      	bne.n	584 <_dac_sync_is_channel_enable+0xe>
	tmp = ((Dac *)hw)->DACCTRL[index].reg;
 58a:	3104      	adds	r1, #4
 58c:	0049      	lsls	r1, r1, #1
 58e:	1852      	adds	r2, r2, r1
 590:	8893      	ldrh	r3, [r2, #4]
	return (bool)tmp;
 592:	079b      	lsls	r3, r3, #30
 594:	0fdb      	lsrs	r3, r3, #31
 596:	e7f1      	b.n	57c <_dac_sync_is_channel_enable+0x6>

00000598 <_dac_sync_write_data>:
	hri_dac_write_DATA_reg(device->hw, ch, data);
 598:	6800      	ldr	r0, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, uint8_t index, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA[index].reg = data;
 59a:	3208      	adds	r2, #8
 59c:	0052      	lsls	r2, r2, #1
 59e:	5211      	strh	r1, [r2, r0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
 5a0:	220c      	movs	r2, #12
 5a2:	6883      	ldr	r3, [r0, #8]
 5a4:	421a      	tst	r2, r3
 5a6:	d1fc      	bne.n	5a2 <_dac_sync_write_data+0xa>
}
 5a8:	4770      	bx	lr
	...

000005ac <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 5ac:	07c3      	lsls	r3, r0, #31
 5ae:	d507      	bpl.n	5c0 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 5b0:	4a04      	ldr	r2, [pc, #16]	; (5c4 <_gclk_init_generators_by_fref+0x18>)
 5b2:	4b05      	ldr	r3, [pc, #20]	; (5c8 <_gclk_init_generators_by_fref+0x1c>)
 5b4:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 5b6:	0019      	movs	r1, r3
 5b8:	4a04      	ldr	r2, [pc, #16]	; (5cc <_gclk_init_generators_by_fref+0x20>)
 5ba:	684b      	ldr	r3, [r1, #4]
 5bc:	4213      	tst	r3, r2
 5be:	d1fc      	bne.n	5ba <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 5c0:	4770      	bx	lr
 5c2:	46c0      	nop			; (mov r8, r8)
 5c4:	00010106 	.word	0x00010106
 5c8:	40001800 	.word	0x40001800
 5cc:	000007fd 	.word	0x000007fd

000005d0 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
 5d0:	4b03      	ldr	r3, [pc, #12]	; (5e0 <_mclk_init+0x10>)
 5d2:	2208      	movs	r2, #8
 5d4:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
 5d6:	3a04      	subs	r2, #4
 5d8:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
 5da:	3a03      	subs	r2, #3
 5dc:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 5de:	4770      	bx	lr
 5e0:	40000400 	.word	0x40000400

000005e4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 5e4:	4b04      	ldr	r3, [pc, #16]	; (5f8 <_osc32kctrl_init_sources+0x14>)
 5e6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 5e8:	21f8      	movs	r1, #248	; 0xf8
 5ea:	0149      	lsls	r1, r1, #5
 5ec:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 5ee:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 5f0:	2201      	movs	r2, #1
 5f2:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 5f4:	4770      	bx	lr
 5f6:	46c0      	nop			; (mov r8, r8)
 5f8:	40001000 	.word	0x40001000

000005fc <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 5fc:	2282      	movs	r2, #130	; 0x82
 5fe:	4b0c      	ldr	r3, [pc, #48]	; (630 <_oscctrl_init_sources+0x34>)
 600:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 602:	0018      	movs	r0, r3
 604:	2138      	movs	r1, #56	; 0x38
 606:	3a80      	subs	r2, #128	; 0x80
 608:	5c43      	ldrb	r3, [r0, r1]
 60a:	4213      	tst	r3, r2
 60c:	d1fc      	bne.n	608 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 60e:	4908      	ldr	r1, [pc, #32]	; (630 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 610:	2210      	movs	r2, #16
 612:	68cb      	ldr	r3, [r1, #12]
 614:	421a      	tst	r2, r3
 616:	d0fc      	beq.n	612 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
 618:	4a05      	ldr	r2, [pc, #20]	; (630 <_oscctrl_init_sources+0x34>)
 61a:	7d13      	ldrb	r3, [r2, #20]
 61c:	2180      	movs	r1, #128	; 0x80
 61e:	430b      	orrs	r3, r1
 620:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 622:	0010      	movs	r0, r2
 624:	3948      	subs	r1, #72	; 0x48
 626:	220e      	movs	r2, #14
 628:	5c43      	ldrb	r3, [r0, r1]
 62a:	4213      	tst	r3, r2
 62c:	d1fc      	bne.n	628 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 62e:	4770      	bx	lr
 630:	40000c00 	.word	0x40000c00

00000634 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 634:	4770      	bx	lr

00000636 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 636:	2380      	movs	r3, #128	; 0x80
 638:	05db      	lsls	r3, r3, #23
 63a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 63c:	2203      	movs	r2, #3
 63e:	4013      	ands	r3, r2
 640:	4298      	cmp	r0, r3
 642:	d00c      	beq.n	65e <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
 644:	2280      	movs	r2, #128	; 0x80
 646:	05d2      	lsls	r2, r2, #23
 648:	23ff      	movs	r3, #255	; 0xff
 64a:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 64c:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 64e:	2103      	movs	r1, #3
 650:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
 652:	4008      	ands	r0, r1
 654:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
 656:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 658:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 65a:	2b00      	cmp	r3, #0
 65c:	d0fc      	beq.n	658 <_set_performance_level+0x22>
			;
	}
}
 65e:	4770      	bx	lr

00000660 <main>:
#include <atmel_start.h>

int main(void)
{
 660:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 662:	4b02      	ldr	r3, [pc, #8]	; (66c <main+0xc>)
 664:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		DAC_0_example();
 666:	4c02      	ldr	r4, [pc, #8]	; (670 <main+0x10>)
 668:	47a0      	blx	r4
 66a:	e7fd      	b.n	668 <main+0x8>
 66c:	00000115 	.word	0x00000115
 670:	0000027d 	.word	0x0000027d

00000674 <__udivsi3>:
 674:	2200      	movs	r2, #0
 676:	0843      	lsrs	r3, r0, #1
 678:	428b      	cmp	r3, r1
 67a:	d374      	bcc.n	766 <__udivsi3+0xf2>
 67c:	0903      	lsrs	r3, r0, #4
 67e:	428b      	cmp	r3, r1
 680:	d35f      	bcc.n	742 <__udivsi3+0xce>
 682:	0a03      	lsrs	r3, r0, #8
 684:	428b      	cmp	r3, r1
 686:	d344      	bcc.n	712 <__udivsi3+0x9e>
 688:	0b03      	lsrs	r3, r0, #12
 68a:	428b      	cmp	r3, r1
 68c:	d328      	bcc.n	6e0 <__udivsi3+0x6c>
 68e:	0c03      	lsrs	r3, r0, #16
 690:	428b      	cmp	r3, r1
 692:	d30d      	bcc.n	6b0 <__udivsi3+0x3c>
 694:	22ff      	movs	r2, #255	; 0xff
 696:	0209      	lsls	r1, r1, #8
 698:	ba12      	rev	r2, r2
 69a:	0c03      	lsrs	r3, r0, #16
 69c:	428b      	cmp	r3, r1
 69e:	d302      	bcc.n	6a6 <__udivsi3+0x32>
 6a0:	1212      	asrs	r2, r2, #8
 6a2:	0209      	lsls	r1, r1, #8
 6a4:	d065      	beq.n	772 <__udivsi3+0xfe>
 6a6:	0b03      	lsrs	r3, r0, #12
 6a8:	428b      	cmp	r3, r1
 6aa:	d319      	bcc.n	6e0 <__udivsi3+0x6c>
 6ac:	e000      	b.n	6b0 <__udivsi3+0x3c>
 6ae:	0a09      	lsrs	r1, r1, #8
 6b0:	0bc3      	lsrs	r3, r0, #15
 6b2:	428b      	cmp	r3, r1
 6b4:	d301      	bcc.n	6ba <__udivsi3+0x46>
 6b6:	03cb      	lsls	r3, r1, #15
 6b8:	1ac0      	subs	r0, r0, r3
 6ba:	4152      	adcs	r2, r2
 6bc:	0b83      	lsrs	r3, r0, #14
 6be:	428b      	cmp	r3, r1
 6c0:	d301      	bcc.n	6c6 <__udivsi3+0x52>
 6c2:	038b      	lsls	r3, r1, #14
 6c4:	1ac0      	subs	r0, r0, r3
 6c6:	4152      	adcs	r2, r2
 6c8:	0b43      	lsrs	r3, r0, #13
 6ca:	428b      	cmp	r3, r1
 6cc:	d301      	bcc.n	6d2 <__udivsi3+0x5e>
 6ce:	034b      	lsls	r3, r1, #13
 6d0:	1ac0      	subs	r0, r0, r3
 6d2:	4152      	adcs	r2, r2
 6d4:	0b03      	lsrs	r3, r0, #12
 6d6:	428b      	cmp	r3, r1
 6d8:	d301      	bcc.n	6de <__udivsi3+0x6a>
 6da:	030b      	lsls	r3, r1, #12
 6dc:	1ac0      	subs	r0, r0, r3
 6de:	4152      	adcs	r2, r2
 6e0:	0ac3      	lsrs	r3, r0, #11
 6e2:	428b      	cmp	r3, r1
 6e4:	d301      	bcc.n	6ea <__udivsi3+0x76>
 6e6:	02cb      	lsls	r3, r1, #11
 6e8:	1ac0      	subs	r0, r0, r3
 6ea:	4152      	adcs	r2, r2
 6ec:	0a83      	lsrs	r3, r0, #10
 6ee:	428b      	cmp	r3, r1
 6f0:	d301      	bcc.n	6f6 <__udivsi3+0x82>
 6f2:	028b      	lsls	r3, r1, #10
 6f4:	1ac0      	subs	r0, r0, r3
 6f6:	4152      	adcs	r2, r2
 6f8:	0a43      	lsrs	r3, r0, #9
 6fa:	428b      	cmp	r3, r1
 6fc:	d301      	bcc.n	702 <__udivsi3+0x8e>
 6fe:	024b      	lsls	r3, r1, #9
 700:	1ac0      	subs	r0, r0, r3
 702:	4152      	adcs	r2, r2
 704:	0a03      	lsrs	r3, r0, #8
 706:	428b      	cmp	r3, r1
 708:	d301      	bcc.n	70e <__udivsi3+0x9a>
 70a:	020b      	lsls	r3, r1, #8
 70c:	1ac0      	subs	r0, r0, r3
 70e:	4152      	adcs	r2, r2
 710:	d2cd      	bcs.n	6ae <__udivsi3+0x3a>
 712:	09c3      	lsrs	r3, r0, #7
 714:	428b      	cmp	r3, r1
 716:	d301      	bcc.n	71c <__udivsi3+0xa8>
 718:	01cb      	lsls	r3, r1, #7
 71a:	1ac0      	subs	r0, r0, r3
 71c:	4152      	adcs	r2, r2
 71e:	0983      	lsrs	r3, r0, #6
 720:	428b      	cmp	r3, r1
 722:	d301      	bcc.n	728 <__udivsi3+0xb4>
 724:	018b      	lsls	r3, r1, #6
 726:	1ac0      	subs	r0, r0, r3
 728:	4152      	adcs	r2, r2
 72a:	0943      	lsrs	r3, r0, #5
 72c:	428b      	cmp	r3, r1
 72e:	d301      	bcc.n	734 <__udivsi3+0xc0>
 730:	014b      	lsls	r3, r1, #5
 732:	1ac0      	subs	r0, r0, r3
 734:	4152      	adcs	r2, r2
 736:	0903      	lsrs	r3, r0, #4
 738:	428b      	cmp	r3, r1
 73a:	d301      	bcc.n	740 <__udivsi3+0xcc>
 73c:	010b      	lsls	r3, r1, #4
 73e:	1ac0      	subs	r0, r0, r3
 740:	4152      	adcs	r2, r2
 742:	08c3      	lsrs	r3, r0, #3
 744:	428b      	cmp	r3, r1
 746:	d301      	bcc.n	74c <__udivsi3+0xd8>
 748:	00cb      	lsls	r3, r1, #3
 74a:	1ac0      	subs	r0, r0, r3
 74c:	4152      	adcs	r2, r2
 74e:	0883      	lsrs	r3, r0, #2
 750:	428b      	cmp	r3, r1
 752:	d301      	bcc.n	758 <__udivsi3+0xe4>
 754:	008b      	lsls	r3, r1, #2
 756:	1ac0      	subs	r0, r0, r3
 758:	4152      	adcs	r2, r2
 75a:	0843      	lsrs	r3, r0, #1
 75c:	428b      	cmp	r3, r1
 75e:	d301      	bcc.n	764 <__udivsi3+0xf0>
 760:	004b      	lsls	r3, r1, #1
 762:	1ac0      	subs	r0, r0, r3
 764:	4152      	adcs	r2, r2
 766:	1a41      	subs	r1, r0, r1
 768:	d200      	bcs.n	76c <__udivsi3+0xf8>
 76a:	4601      	mov	r1, r0
 76c:	4152      	adcs	r2, r2
 76e:	4610      	mov	r0, r2
 770:	4770      	bx	lr
 772:	e7ff      	b.n	774 <__udivsi3+0x100>
 774:	b501      	push	{r0, lr}
 776:	2000      	movs	r0, #0
 778:	f000 f806 	bl	788 <__aeabi_idiv0>
 77c:	bd02      	pop	{r1, pc}
 77e:	46c0      	nop			; (mov r8, r8)

00000780 <__aeabi_uidivmod>:
 780:	2900      	cmp	r1, #0
 782:	d0f7      	beq.n	774 <__udivsi3+0x100>
 784:	e776      	b.n	674 <__udivsi3>
 786:	4770      	bx	lr

00000788 <__aeabi_idiv0>:
 788:	4770      	bx	lr
 78a:	46c0      	nop			; (mov r8, r8)

0000078c <__libc_init_array>:
 78c:	b570      	push	{r4, r5, r6, lr}
 78e:	2600      	movs	r6, #0
 790:	4d0c      	ldr	r5, [pc, #48]	; (7c4 <__libc_init_array+0x38>)
 792:	4c0d      	ldr	r4, [pc, #52]	; (7c8 <__libc_init_array+0x3c>)
 794:	1b64      	subs	r4, r4, r5
 796:	10a4      	asrs	r4, r4, #2
 798:	42a6      	cmp	r6, r4
 79a:	d109      	bne.n	7b0 <__libc_init_array+0x24>
 79c:	2600      	movs	r6, #0
 79e:	f000 f833 	bl	808 <_init>
 7a2:	4d0a      	ldr	r5, [pc, #40]	; (7cc <__libc_init_array+0x40>)
 7a4:	4c0a      	ldr	r4, [pc, #40]	; (7d0 <__libc_init_array+0x44>)
 7a6:	1b64      	subs	r4, r4, r5
 7a8:	10a4      	asrs	r4, r4, #2
 7aa:	42a6      	cmp	r6, r4
 7ac:	d105      	bne.n	7ba <__libc_init_array+0x2e>
 7ae:	bd70      	pop	{r4, r5, r6, pc}
 7b0:	00b3      	lsls	r3, r6, #2
 7b2:	58eb      	ldr	r3, [r5, r3]
 7b4:	4798      	blx	r3
 7b6:	3601      	adds	r6, #1
 7b8:	e7ee      	b.n	798 <__libc_init_array+0xc>
 7ba:	00b3      	lsls	r3, r6, #2
 7bc:	58eb      	ldr	r3, [r5, r3]
 7be:	4798      	blx	r3
 7c0:	3601      	adds	r6, #1
 7c2:	e7f2      	b.n	7aa <__libc_init_array+0x1e>
 7c4:	00000814 	.word	0x00000814
 7c8:	00000814 	.word	0x00000814
 7cc:	00000814 	.word	0x00000814
 7d0:	00000818 	.word	0x00000818
 7d4:	682f2e2e 	.word	0x682f2e2e
 7d8:	732f6c61 	.word	0x732f6c61
 7dc:	682f6372 	.word	0x682f6372
 7e0:	645f6c61 	.word	0x645f6c61
 7e4:	735f6361 	.word	0x735f6361
 7e8:	2e636e79 	.word	0x2e636e79
 7ec:	00000063 	.word	0x00000063
 7f0:	682f2e2e 	.word	0x682f2e2e
 7f4:	642f6c70 	.word	0x642f6c70
 7f8:	682f6361 	.word	0x682f6361
 7fc:	645f6c70 	.word	0x645f6c70
 800:	632e6361 	.word	0x632e6361
 804:	00000000 	.word	0x00000000

00000808 <_init>:
 808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a:	46c0      	nop			; (mov r8, r8)
 80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e:	bc08      	pop	{r3}
 810:	469e      	mov	lr, r3
 812:	4770      	bx	lr

00000814 <__init_array_start>:
 814:	000000dd 	.word	0x000000dd

00000818 <_fini>:
 818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81a:	46c0      	nop			; (mov r8, r8)
 81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81e:	bc08      	pop	{r3}
 820:	469e      	mov	lr, r3
 822:	4770      	bx	lr

00000824 <__fini_array_start>:
 824:	000000b5 	.word	0x000000b5
