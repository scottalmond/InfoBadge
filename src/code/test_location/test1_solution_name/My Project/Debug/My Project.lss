
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000283c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  0001283c  2**0
                  CONTENTS
  2 .lpram        00000000  30000000  30000000  0001283c  2**0
                  CONTENTS
  3 .bss          000002f4  20000000  20000000  00020000  2**2
                  ALLOC
  4 .stack        00002004  200002f4  200002f4  00020000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0001283c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00012864  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002e042  00000000  00000000  000128bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003bdc  00000000  00000000  000408ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001487b  00000000  00000000  000444db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ef0  00000000  00000000  00058d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000017a0  00000000  00000000  00059c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e889  00000000  00000000  0005b3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001467e  00000000  00000000  00079c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009befa  00000000  00000000  0008e2ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002724  00000000  00000000  0012a1e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 22 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .". %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 15 10 00 00     !...!...!.......
      4c:	21 01 00 00 21 01 00 00 21 01 00 00 2d 24 00 00     !...!...!...-$..
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000000 	.word	0x20000000
      d4:	00000000 	.word	0x00000000
      d8:	0000283c 	.word	0x0000283c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000004 	.word	0x20000004
     108:	0000283c 	.word	0x0000283c
     10c:	0000283c 	.word	0x0000283c
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00000515 	.word	0x00000515

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     126:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0x6c>)
     128:	4b1a      	ldr	r3, [pc, #104]	; (194 <Reset_Handler+0x70>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b19      	ldr	r3, [pc, #100]	; (198 <Reset_Handler+0x74>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a19      	ldr	r2, [pc, #100]	; (19c <Reset_Handler+0x78>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4813      	ldr	r0, [pc, #76]	; (194 <Reset_Handler+0x70>)
     146:	4912      	ldr	r1, [pc, #72]	; (190 <Reset_Handler+0x6c>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a13      	ldr	r2, [pc, #76]	; (1a0 <Reset_Handler+0x7c>)
     154:	4b13      	ldr	r3, [pc, #76]	; (1a4 <Reset_Handler+0x80>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4911      	ldr	r1, [pc, #68]	; (1a4 <Reset_Handler+0x80>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a0d      	ldr	r2, [pc, #52]	; (1a8 <Reset_Handler+0x84>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b0d      	ldr	r3, [pc, #52]	; (1ac <Reset_Handler+0x88>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17a:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x8c>)
     17c:	6853      	ldr	r3, [r2, #4]
     17e:	397f      	subs	r1, #127	; 0x7f
     180:	430b      	orrs	r3, r1
     182:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x90>)
     186:	4798      	blx	r3
        main();
     188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x94>)
     18a:	4798      	blx	r3
     18c:	e7fe      	b.n	18c <Reset_Handler+0x68>
     18e:	46c0      	nop			; (mov r8, r8)
     190:	0000283c 	.word	0x0000283c
     194:	20000000 	.word	0x20000000
     198:	20000000 	.word	0x20000000
     19c:	20000004 	.word	0x20000004
     1a0:	20000000 	.word	0x20000000
     1a4:	200002f4 	.word	0x200002f4
     1a8:	e000ed00 	.word	0xe000ed00
     1ac:	00000000 	.word	0x00000000
     1b0:	41004000 	.word	0x41004000
     1b4:	00002689 	.word	0x00002689
     1b8:	00002675 	.word	0x00002675

000001bc <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC;
     1bc:	4a04      	ldr	r2, [pc, #16]	; (1d0 <ADC_0_CLOCK_init+0x14>)
     1be:	6a13      	ldr	r3, [r2, #32]
     1c0:	2108      	movs	r1, #8
     1c2:	430b      	orrs	r3, r1
     1c4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1c6:	3138      	adds	r1, #56	; 0x38
     1c8:	23f8      	movs	r3, #248	; 0xf8
     1ca:	4a02      	ldr	r2, [pc, #8]	; (1d4 <ADC_0_CLOCK_init+0x18>)
     1cc:	50d1      	str	r1, [r2, r3]

void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBDMASK_ADC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC_GCLK_ID, CONF_GCLK_ADC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     1ce:	4770      	bx	lr
     1d0:	40000400 	.word	0x40000400
     1d4:	40001800 	.word	0x40001800

000001d8 <ADC_0_init>:

void ADC_0_init(void)
{
     1d8:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     1da:	4b04      	ldr	r3, [pc, #16]	; (1ec <ADC_0_init+0x14>)
     1dc:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     1de:	2200      	movs	r2, #0
     1e0:	4903      	ldr	r1, [pc, #12]	; (1f0 <ADC_0_init+0x18>)
     1e2:	4804      	ldr	r0, [pc, #16]	; (1f4 <ADC_0_init+0x1c>)
     1e4:	4b04      	ldr	r3, [pc, #16]	; (1f8 <ADC_0_init+0x20>)
     1e6:	4798      	blx	r3
}
     1e8:	bd10      	pop	{r4, pc}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	000001bd 	.word	0x000001bd
     1f0:	43000c00 	.word	0x43000c00
     1f4:	20000288 	.word	0x20000288
     1f8:	0000058d 	.word	0x0000058d

000001fc <CALENDAR_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     1fc:	4a03      	ldr	r2, [pc, #12]	; (20c <CALENDAR_0_CLOCK_init+0x10>)
     1fe:	6951      	ldr	r1, [r2, #20]
     200:	2380      	movs	r3, #128	; 0x80
     202:	005b      	lsls	r3, r3, #1
     204:	430b      	orrs	r3, r1
     206:	6153      	str	r3, [r2, #20]

void CALENDAR_0_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}
     208:	4770      	bx	lr
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	40000400 	.word	0x40000400

00000210 <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     210:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     212:	4b03      	ldr	r3, [pc, #12]	; (220 <CALENDAR_0_init+0x10>)
     214:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     216:	4903      	ldr	r1, [pc, #12]	; (224 <CALENDAR_0_init+0x14>)
     218:	4803      	ldr	r0, [pc, #12]	; (228 <CALENDAR_0_init+0x18>)
     21a:	4b04      	ldr	r3, [pc, #16]	; (22c <CALENDAR_0_init+0x1c>)
     21c:	4798      	blx	r3
}
     21e:	bd10      	pop	{r4, pc}
     220:	000001fd 	.word	0x000001fd
     224:	40002000 	.word	0x40002000
     228:	2000028c 	.word	0x2000028c
     22c:	000005dd 	.word	0x000005dd

00000230 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     230:	b5f0      	push	{r4, r5, r6, r7, lr}
     232:	46ce      	mov	lr, r9
     234:	4647      	mov	r7, r8
     236:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     238:	22c0      	movs	r2, #192	; 0xc0
     23a:	05d2      	lsls	r2, r2, #23
     23c:	2001      	movs	r0, #1
     23e:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     240:	6090      	str	r0, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     242:	4b22      	ldr	r3, [pc, #136]	; (2cc <SPI_0_PORT_init+0x9c>)
     244:	4922      	ldr	r1, [pc, #136]	; (2d0 <SPI_0_PORT_init+0xa0>)
     246:	6299      	str	r1, [r3, #40]	; 0x28
     248:	27c0      	movs	r7, #192	; 0xc0
     24a:	063f      	lsls	r7, r7, #24
     24c:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24e:	2540      	movs	r5, #64	; 0x40
     250:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     252:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     254:	2401      	movs	r4, #1
     256:	4321      	orrs	r1, r4
     258:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     25a:	5559      	strb	r1, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     25c:	2630      	movs	r6, #48	; 0x30
     25e:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     260:	3d31      	subs	r5, #49	; 0x31
     262:	46a9      	mov	r9, r5
     264:	43a9      	bics	r1, r5
     266:	4688      	mov	r8, r1
	tmp |= PORT_PMUX_PMUXE(data);
     268:	2103      	movs	r1, #3
     26a:	4645      	mov	r5, r8
     26c:	430d      	orrs	r5, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26e:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     270:	2102      	movs	r1, #2
     272:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     274:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     276:	4917      	ldr	r1, [pc, #92]	; (2d4 <SPI_0_PORT_init+0xa4>)
     278:	6299      	str	r1, [r3, #40]	; 0x28
     27a:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27c:	2741      	movs	r7, #65	; 0x41
     27e:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     280:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     282:	4321      	orrs	r1, r4
     284:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     286:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     288:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     28a:	3f32      	subs	r7, #50	; 0x32
     28c:	4039      	ands	r1, r7
	tmp |= PORT_PMUX_PMUXO(data);
     28e:	3721      	adds	r7, #33	; 0x21
     290:	4339      	orrs	r1, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     292:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     294:	2180      	movs	r1, #128	; 0x80
     296:	02c9      	lsls	r1, r1, #11
     298:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     29a:	4a0f      	ldr	r2, [pc, #60]	; (2d8 <SPI_0_PORT_init+0xa8>)
     29c:	629a      	str	r2, [r3, #40]	; 0x28
     29e:	4a0f      	ldr	r2, [pc, #60]	; (2dc <SPI_0_PORT_init+0xac>)
     2a0:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2a2:	2152      	movs	r1, #82	; 0x52
     2a4:	5c5a      	ldrb	r2, [r3, r1]
     2a6:	3e2c      	subs	r6, #44	; 0x2c
     2a8:	43b2      	bics	r2, r6
     2aa:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ac:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ae:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2b0:	4322      	orrs	r2, r4
     2b2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2b6:	3919      	subs	r1, #25
     2b8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2ba:	4648      	mov	r0, r9
     2bc:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     2be:	380d      	subs	r0, #13
     2c0:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2c2:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
}
     2c4:	bc0c      	pop	{r2, r3}
     2c6:	4690      	mov	r8, r2
     2c8:	4699      	mov	r9, r3
     2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2cc:	40002800 	.word	0x40002800
     2d0:	40000001 	.word	0x40000001
     2d4:	40000002 	.word	0x40000002
     2d8:	40020000 	.word	0x40020000
     2dc:	c0020004 	.word	0xc0020004

000002e0 <SPI_0_CLOCK_init>:
     2e0:	4b06      	ldr	r3, [pc, #24]	; (2fc <SPI_0_CLOCK_init+0x1c>)
     2e2:	2140      	movs	r1, #64	; 0x40
     2e4:	22cc      	movs	r2, #204	; 0xcc
     2e6:	5099      	str	r1, [r3, r2]
     2e8:	3103      	adds	r1, #3
     2ea:	3a08      	subs	r2, #8
     2ec:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     2ee:	4a04      	ldr	r2, [pc, #16]	; (300 <SPI_0_CLOCK_init+0x20>)
     2f0:	69d3      	ldr	r3, [r2, #28]
     2f2:	3941      	subs	r1, #65	; 0x41
     2f4:	430b      	orrs	r3, r1
     2f6:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     2f8:	4770      	bx	lr
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	40001800 	.word	0x40001800
     300:	40000400 	.word	0x40000400

00000304 <SPI_0_init>:

void SPI_0_init(void)
{
     304:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     306:	4b04      	ldr	r3, [pc, #16]	; (318 <SPI_0_init+0x14>)
     308:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     30a:	4904      	ldr	r1, [pc, #16]	; (31c <SPI_0_init+0x18>)
     30c:	4804      	ldr	r0, [pc, #16]	; (320 <SPI_0_init+0x1c>)
     30e:	4b05      	ldr	r3, [pc, #20]	; (324 <SPI_0_init+0x20>)
     310:	4798      	blx	r3
	SPI_0_PORT_init();
     312:	4b05      	ldr	r3, [pc, #20]	; (328 <SPI_0_init+0x24>)
     314:	4798      	blx	r3
}
     316:	bd10      	pop	{r4, pc}
     318:	000002e1 	.word	0x000002e1
     31c:	42000400 	.word	0x42000400
     320:	200002bc 	.word	0x200002bc
     324:	000007d9 	.word	0x000007d9
     328:	00000231 	.word	0x00000231

0000032c <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     32c:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     32e:	4b12      	ldr	r3, [pc, #72]	; (378 <I2C_0_PORT_init+0x4c>)
     330:	20d0      	movs	r0, #208	; 0xd0
     332:	5c19      	ldrb	r1, [r3, r0]
     334:	2204      	movs	r2, #4
     336:	4391      	bics	r1, r2
     338:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     33a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     33c:	2501      	movs	r5, #1
     33e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     340:	2401      	movs	r4, #1
     342:	4321      	orrs	r1, r4
     344:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     346:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     348:	3818      	subs	r0, #24
     34a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     34c:	260f      	movs	r6, #15
     34e:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     350:	3e0d      	subs	r6, #13
     352:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     354:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     356:	21d1      	movs	r1, #209	; 0xd1
     358:	5c5e      	ldrb	r6, [r3, r1]
     35a:	4396      	bics	r6, r2
     35c:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     35e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     360:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     362:	4322      	orrs	r2, r4
     364:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     366:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     368:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     36a:	39c2      	subs	r1, #194	; 0xc2
     36c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     36e:	3111      	adds	r1, #17
     370:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     372:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB17, PINMUX_PB17C_SERCOM5_PAD1);
}
     374:	bd70      	pop	{r4, r5, r6, pc}
     376:	46c0      	nop			; (mov r8, r8)
     378:	40002800 	.word	0x40002800

0000037c <I2C_0_CLOCK_init>:
     37c:	4b06      	ldr	r3, [pc, #24]	; (398 <I2C_0_CLOCK_init+0x1c>)
     37e:	2140      	movs	r1, #64	; 0x40
     380:	22e0      	movs	r2, #224	; 0xe0
     382:	5099      	str	r1, [r3, r2]
     384:	3103      	adds	r1, #3
     386:	3a04      	subs	r2, #4
     388:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     38a:	4a04      	ldr	r2, [pc, #16]	; (39c <I2C_0_CLOCK_init+0x20>)
     38c:	6a13      	ldr	r3, [r2, #32]
     38e:	3941      	subs	r1, #65	; 0x41
     390:	430b      	orrs	r3, r1
     392:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40001800 	.word	0x40001800
     39c:	40000400 	.word	0x40000400

000003a0 <I2C_0_init>:

void I2C_0_init(void)
{
     3a0:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     3a2:	4b04      	ldr	r3, [pc, #16]	; (3b4 <I2C_0_init+0x14>)
     3a4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM5);
     3a6:	4904      	ldr	r1, [pc, #16]	; (3b8 <I2C_0_init+0x18>)
     3a8:	4804      	ldr	r0, [pc, #16]	; (3bc <I2C_0_init+0x1c>)
     3aa:	4b05      	ldr	r3, [pc, #20]	; (3c0 <I2C_0_init+0x20>)
     3ac:	4798      	blx	r3
	I2C_0_PORT_init();
     3ae:	4b05      	ldr	r3, [pc, #20]	; (3c4 <I2C_0_init+0x24>)
     3b0:	4798      	blx	r3
}
     3b2:	bd10      	pop	{r4, pc}
     3b4:	0000037d 	.word	0x0000037d
     3b8:	43000400 	.word	0x43000400
     3bc:	200002d4 	.word	0x200002d4
     3c0:	00000799 	.word	0x00000799
     3c4:	0000032d 	.word	0x0000032d

000003c8 <DAC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c8:	2220      	movs	r2, #32
     3ca:	23c0      	movs	r3, #192	; 0xc0
     3cc:	05db      	lsls	r3, r3, #23
     3ce:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d0:	4b09      	ldr	r3, [pc, #36]	; (3f8 <DAC_0_PORT_init+0x30>)
     3d2:	4a0a      	ldr	r2, [pc, #40]	; (3fc <DAC_0_PORT_init+0x34>)
     3d4:	629a      	str	r2, [r3, #40]	; 0x28
     3d6:	22c0      	movs	r2, #192	; 0xc0
     3d8:	0612      	lsls	r2, r2, #24
     3da:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3dc:	2145      	movs	r1, #69	; 0x45
     3de:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e0:	2001      	movs	r0, #1
     3e2:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e4:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	3913      	subs	r1, #19
     3ea:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	300e      	adds	r0, #14
     3ee:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	3001      	adds	r0, #1
     3f2:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA05, PINMUX_PA05B_DAC_VOUT1);
}
     3f6:	4770      	bx	lr
     3f8:	40002800 	.word	0x40002800
     3fc:	40000020 	.word	0x40000020

00000400 <DAC_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_DAC;
     400:	4a05      	ldr	r2, [pc, #20]	; (418 <DAC_0_CLOCK_init+0x18>)
     402:	69d1      	ldr	r1, [r2, #28]
     404:	2380      	movs	r3, #128	; 0x80
     406:	015b      	lsls	r3, r3, #5
     408:	430b      	orrs	r3, r1
     40a:	61d3      	str	r3, [r2, #28]
     40c:	2140      	movs	r1, #64	; 0x40
     40e:	2380      	movs	r3, #128	; 0x80
     410:	005b      	lsls	r3, r3, #1
     412:	4a02      	ldr	r2, [pc, #8]	; (41c <DAC_0_CLOCK_init+0x1c>)
     414:	50d1      	str	r1, [r2, r3]
void DAC_0_CLOCK_init(void)
{

	hri_mclk_set_APBCMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     416:	4770      	bx	lr
     418:	40000400 	.word	0x40000400
     41c:	40001800 	.word	0x40001800

00000420 <DAC_0_init>:

void DAC_0_init(void)
{
     420:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     422:	4b04      	ldr	r3, [pc, #16]	; (434 <DAC_0_init+0x14>)
     424:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     426:	4904      	ldr	r1, [pc, #16]	; (438 <DAC_0_init+0x18>)
     428:	4804      	ldr	r0, [pc, #16]	; (43c <DAC_0_init+0x1c>)
     42a:	4b05      	ldr	r3, [pc, #20]	; (440 <DAC_0_init+0x20>)
     42c:	4798      	blx	r3
	DAC_0_PORT_init();
     42e:	4b05      	ldr	r3, [pc, #20]	; (444 <DAC_0_init+0x24>)
     430:	4798      	blx	r3
}
     432:	bd10      	pop	{r4, pc}
     434:	00000401 	.word	0x00000401
     438:	42003000 	.word	0x42003000
     43c:	200002a8 	.word	0x200002a8
     440:	00000625 	.word	0x00000625
     444:	000003c9 	.word	0x000003c9

00000448 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     448:	b5f0      	push	{r4, r5, r6, r7, lr}
     44a:	46c6      	mov	lr, r8
     44c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44e:	24c0      	movs	r4, #192	; 0xc0
     450:	05e4      	lsls	r4, r4, #23
     452:	2280      	movs	r2, #128	; 0x80
     454:	0452      	lsls	r2, r2, #17
     456:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     458:	4b1a      	ldr	r3, [pc, #104]	; (4c4 <USB_0_PORT_init+0x7c>)
     45a:	2780      	movs	r7, #128	; 0x80
     45c:	05ff      	lsls	r7, r7, #23
     45e:	629f      	str	r7, [r3, #40]	; 0x28
     460:	4919      	ldr	r1, [pc, #100]	; (4c8 <USB_0_PORT_init+0x80>)
     462:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     464:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     466:	2058      	movs	r0, #88	; 0x58
     468:	5c19      	ldrb	r1, [r3, r0]
     46a:	2204      	movs	r2, #4
     46c:	4690      	mov	r8, r2
     46e:	4391      	bics	r1, r2
     470:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     474:	2601      	movs	r6, #1
     476:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     478:	2501      	movs	r5, #1
     47a:	4329      	orrs	r1, r5
     47c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     480:	381c      	subs	r0, #28
     482:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     484:	320b      	adds	r2, #11
     486:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     488:	3a09      	subs	r2, #9
     48a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     48e:	2180      	movs	r1, #128	; 0x80
     490:	0489      	lsls	r1, r1, #18
     492:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     494:	629f      	str	r7, [r3, #40]	; 0x28
     496:	4f0d      	ldr	r7, [pc, #52]	; (4cc <USB_0_PORT_init+0x84>)
     498:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     49a:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     49c:	2159      	movs	r1, #89	; 0x59
     49e:	5c5c      	ldrb	r4, [r3, r1]
     4a0:	4642      	mov	r2, r8
     4a2:	4394      	bics	r4, r2
     4a4:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a8:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4aa:	432a      	orrs	r2, r5
     4ac:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ae:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4b2:	394a      	subs	r1, #74	; 0x4a
     4b4:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     4b6:	3151      	adds	r1, #81	; 0x51
     4b8:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ba:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      // <GPIO_PIN_FUNCTION_I"> I
	                      PINMUX_PA25G_USB_DP);
}
     4bc:	bc04      	pop	{r2}
     4be:	4690      	mov	r8, r2
     4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	40002800 	.word	0x40002800
     4c8:	c0000100 	.word	0xc0000100
     4cc:	c0000200 	.word	0xc0000200

000004d0 <USB_0_CLOCK_init>:
     4d0:	2140      	movs	r1, #64	; 0x40
     4d2:	2390      	movs	r3, #144	; 0x90
     4d4:	4a06      	ldr	r2, [pc, #24]	; (4f0 <USB_0_CLOCK_init+0x20>)
     4d6:	50d1      	str	r1, [r2, r3]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <USB_0_CLOCK_init+0x24>)
     4da:	6919      	ldr	r1, [r3, #16]
     4dc:	2280      	movs	r2, #128	; 0x80
     4de:	0152      	lsls	r2, r2, #5
     4e0:	430a      	orrs	r2, r1
     4e2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     4e4:	699a      	ldr	r2, [r3, #24]
     4e6:	2101      	movs	r1, #1
     4e8:	430a      	orrs	r2, r1
     4ea:	619a      	str	r2, [r3, #24]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}
     4ec:	4770      	bx	lr
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	40001800 	.word	0x40001800
     4f4:	40000400 	.word	0x40000400

000004f8 <USB_0_init>:

void USB_0_init(void)
{
     4f8:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     4fa:	4b03      	ldr	r3, [pc, #12]	; (508 <USB_0_init+0x10>)
     4fc:	4798      	blx	r3
	usb_d_init();
     4fe:	4b03      	ldr	r3, [pc, #12]	; (50c <USB_0_init+0x14>)
     500:	4798      	blx	r3
	USB_0_PORT_init();
     502:	4b03      	ldr	r3, [pc, #12]	; (510 <USB_0_init+0x18>)
     504:	4798      	blx	r3
}
     506:	bd10      	pop	{r4, pc}
     508:	000004d1 	.word	0x000004d1
     50c:	00000b5d 	.word	0x00000b5d
     510:	00000449 	.word	0x00000449

00000514 <system_init>:

void system_init(void)
{
     514:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     516:	4b07      	ldr	r3, [pc, #28]	; (534 <system_init+0x20>)
     518:	4798      	blx	r3
	init_mcu();

	ADC_0_init();
     51a:	4b07      	ldr	r3, [pc, #28]	; (538 <system_init+0x24>)
     51c:	4798      	blx	r3

	CALENDAR_0_init();
     51e:	4b07      	ldr	r3, [pc, #28]	; (53c <system_init+0x28>)
     520:	4798      	blx	r3

	SPI_0_init();
     522:	4b07      	ldr	r3, [pc, #28]	; (540 <system_init+0x2c>)
     524:	4798      	blx	r3

	I2C_0_init();
     526:	4b07      	ldr	r3, [pc, #28]	; (544 <system_init+0x30>)
     528:	4798      	blx	r3

	DAC_0_init();
     52a:	4b07      	ldr	r3, [pc, #28]	; (548 <system_init+0x34>)
     52c:	4798      	blx	r3

	USB_0_init();
     52e:	4b07      	ldr	r3, [pc, #28]	; (54c <system_init+0x38>)
     530:	4798      	blx	r3
}
     532:	bd10      	pop	{r4, pc}
     534:	00000d4d 	.word	0x00000d4d
     538:	000001d9 	.word	0x000001d9
     53c:	00000211 	.word	0x00000211
     540:	00000305 	.word	0x00000305
     544:	000003a1 	.word	0x000003a1
     548:	00000421 	.word	0x00000421
     54c:	000004f9 	.word	0x000004f9

00000550 <DAC_0_example>:

/**
 * Example of using DAC_0 to generate waveform.
 */
void DAC_0_example(void)
{
     550:	b570      	push	{r4, r5, r6, lr}
     552:	b082      	sub	sp, #8
	uint16_t i = 0;
     554:	2200      	movs	r2, #0
     556:	466b      	mov	r3, sp
     558:	80da      	strh	r2, [r3, #6]

	dac_sync_enable_channel(&DAC_0, 0);
     55a:	2100      	movs	r1, #0
     55c:	4808      	ldr	r0, [pc, #32]	; (580 <DAC_0_example+0x30>)
     55e:	4b09      	ldr	r3, [pc, #36]	; (584 <DAC_0_example+0x34>)
     560:	4798      	blx	r3

	for (;;) {
		dac_sync_write(&DAC_0, 0, &i, 1);
     562:	466b      	mov	r3, sp
     564:	1d9c      	adds	r4, r3, #6
     566:	4d06      	ldr	r5, [pc, #24]	; (580 <DAC_0_example+0x30>)
     568:	4e07      	ldr	r6, [pc, #28]	; (588 <DAC_0_example+0x38>)
     56a:	2301      	movs	r3, #1
     56c:	0022      	movs	r2, r4
     56e:	2100      	movs	r1, #0
     570:	0028      	movs	r0, r5
     572:	47b0      	blx	r6
		i = (i + 1) % 1024;
     574:	8823      	ldrh	r3, [r4, #0]
     576:	3301      	adds	r3, #1
     578:	059b      	lsls	r3, r3, #22
     57a:	0d9b      	lsrs	r3, r3, #22
     57c:	8023      	strh	r3, [r4, #0]
     57e:	e7f4      	b.n	56a <DAC_0_example+0x1a>
     580:	200002a8 	.word	0x200002a8
     584:	00000669 	.word	0x00000669
     588:	000006a5 	.word	0x000006a5

0000058c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	0004      	movs	r4, r0
     590:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     592:	2800      	cmp	r0, #0
     594:	d00c      	beq.n	5b0 <adc_sync_init+0x24>
     596:	0008      	movs	r0, r1
     598:	1e43      	subs	r3, r0, #1
     59a:	4198      	sbcs	r0, r3
     59c:	b2c0      	uxtb	r0, r0
     59e:	2239      	movs	r2, #57	; 0x39
     5a0:	4904      	ldr	r1, [pc, #16]	; (5b4 <adc_sync_init+0x28>)
     5a2:	4b05      	ldr	r3, [pc, #20]	; (5b8 <adc_sync_init+0x2c>)
     5a4:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     5a6:	0029      	movs	r1, r5
     5a8:	0020      	movs	r0, r4
     5aa:	4b04      	ldr	r3, [pc, #16]	; (5bc <adc_sync_init+0x30>)
     5ac:	4798      	blx	r3
}
     5ae:	bd70      	pop	{r4, r5, r6, pc}
     5b0:	2000      	movs	r0, #0
     5b2:	e7f4      	b.n	59e <adc_sync_init+0x12>
     5b4:	000026f4 	.word	0x000026f4
     5b8:	00000bc1 	.word	0x00000bc1
     5bc:	00000d15 	.word	0x00000d15

000005c0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     5c0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     5c4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     5c6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     5c8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     5cc:	4770      	bx	lr

000005ce <atomic_leave_critical>:
     5ce:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     5d2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     5d4:	f383 8810 	msr	PRIMASK, r3
}
     5d8:	4770      	bx	lr
	...

000005dc <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     5dc:	b570      	push	{r4, r5, r6, lr}
     5de:	0004      	movs	r4, r0
     5e0:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     5e2:	1e43      	subs	r3, r0, #1
     5e4:	4198      	sbcs	r0, r3
     5e6:	b2c0      	uxtb	r0, r0
     5e8:	22e0      	movs	r2, #224	; 0xe0
     5ea:	0052      	lsls	r2, r2, #1
     5ec:	4909      	ldr	r1, [pc, #36]	; (614 <calendar_init+0x38>)
     5ee:	4b0a      	ldr	r3, [pc, #40]	; (618 <calendar_init+0x3c>)
     5f0:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     5f2:	6823      	ldr	r3, [r4, #0]
     5f4:	42ab      	cmp	r3, r5
     5f6:	d008      	beq.n	60a <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     5f8:	2b00      	cmp	r3, #0
     5fa:	d108      	bne.n	60e <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     5fc:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     5fe:	0020      	movs	r0, r4
     600:	4b06      	ldr	r3, [pc, #24]	; (61c <calendar_init+0x40>)
     602:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     604:	4b06      	ldr	r3, [pc, #24]	; (620 <calendar_init+0x44>)
     606:	6163      	str	r3, [r4, #20]

	return ret;
}
     608:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     60a:	2000      	movs	r0, #0
     60c:	e7fc      	b.n	608 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     60e:	2012      	movs	r0, #18
     610:	4240      	negs	r0, r0
     612:	e7f9      	b.n	608 <calendar_init+0x2c>
     614:	00002710 	.word	0x00002710
     618:	00000bc1 	.word	0x00000bc1
     61c:	00000f85 	.word	0x00000f85
     620:	000007b2 	.word	0x000007b2

00000624 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0005      	movs	r5, r0
     628:	000c      	movs	r4, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     62a:	2800      	cmp	r0, #0
     62c:	d013      	beq.n	656 <dac_sync_init+0x32>
     62e:	0008      	movs	r0, r1
     630:	1e43      	subs	r3, r0, #1
     632:	4198      	sbcs	r0, r3
     634:	b2c0      	uxtb	r0, r0
     636:	2232      	movs	r2, #50	; 0x32
     638:	4908      	ldr	r1, [pc, #32]	; (65c <dac_sync_init+0x38>)
     63a:	4b09      	ldr	r3, [pc, #36]	; (660 <dac_sync_init+0x3c>)
     63c:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     63e:	0021      	movs	r1, r4
     640:	0028      	movs	r0, r5
     642:	4b08      	ldr	r3, [pc, #32]	; (664 <dac_sync_init+0x40>)
     644:	4798      	blx	r3
	if (rc) {
     646:	2800      	cmp	r0, #0
     648:	d104      	bne.n	654 <dac_sync_init+0x30>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     64a:	2300      	movs	r3, #0
     64c:	606b      	str	r3, [r5, #4]
		descr->sel_ch[i].length = 0;
     64e:	60ab      	str	r3, [r5, #8]
		descr->sel_ch[i].buffer = NULL;
     650:	60eb      	str	r3, [r5, #12]
		descr->sel_ch[i].length = 0;
     652:	612b      	str	r3, [r5, #16]
	}

	return ERR_NONE;
}
     654:	bd70      	pop	{r4, r5, r6, pc}
     656:	2000      	movs	r0, #0
     658:	e7ed      	b.n	636 <dac_sync_init+0x12>
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	0000272c 	.word	0x0000272c
     660:	00000bc1 	.word	0x00000bc1
     664:	00000e19 	.word	0x00000e19

00000668 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
     668:	b570      	push	{r4, r5, r6, lr}
     66a:	0004      	movs	r4, r0
     66c:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
     66e:	2800      	cmp	r0, #0
     670:	d010      	beq.n	694 <dac_sync_enable_channel+0x2c>
     672:	2000      	movs	r0, #0
     674:	2301      	movs	r3, #1
     676:	428b      	cmp	r3, r1
     678:	4140      	adcs	r0, r0
     67a:	b2c0      	uxtb	r0, r0
     67c:	2301      	movs	r3, #1
     67e:	4018      	ands	r0, r3
     680:	2252      	movs	r2, #82	; 0x52
     682:	4905      	ldr	r1, [pc, #20]	; (698 <dac_sync_enable_channel+0x30>)
     684:	4b05      	ldr	r3, [pc, #20]	; (69c <dac_sync_enable_channel+0x34>)
     686:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
     688:	0029      	movs	r1, r5
     68a:	0020      	movs	r0, r4
     68c:	4b04      	ldr	r3, [pc, #16]	; (6a0 <dac_sync_enable_channel+0x38>)
     68e:	4798      	blx	r3

	return ERR_NONE;
}
     690:	2000      	movs	r0, #0
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	2000      	movs	r0, #0
     696:	e7f1      	b.n	67c <dac_sync_enable_channel+0x14>
     698:	0000272c 	.word	0x0000272c
     69c:	00000bc1 	.word	0x00000bc1
     6a0:	00000e45 	.word	0x00000e45

000006a4 <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
     6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6a6:	46ce      	mov	lr, r9
     6a8:	b500      	push	{lr}
     6aa:	b082      	sub	sp, #8
     6ac:	0007      	movs	r7, r0
     6ae:	000d      	movs	r5, r1
     6b0:	4691      	mov	r9, r2
     6b2:	001e      	movs	r6, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
     6b4:	2800      	cmp	r0, #0
     6b6:	d02d      	beq.n	714 <dac_sync_write+0x70>
     6b8:	2000      	movs	r0, #0
     6ba:	2901      	cmp	r1, #1
     6bc:	d924      	bls.n	708 <dac_sync_write+0x64>
     6be:	226a      	movs	r2, #106	; 0x6a
     6c0:	4919      	ldr	r1, [pc, #100]	; (728 <dac_sync_write+0x84>)
     6c2:	4b1a      	ldr	r3, [pc, #104]	; (72c <dac_sync_write+0x88>)
     6c4:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
     6c6:	9701      	str	r7, [sp, #4]
     6c8:	0029      	movs	r1, r5
     6ca:	0038      	movs	r0, r7
     6cc:	4b18      	ldr	r3, [pc, #96]	; (730 <dac_sync_write+0x8c>)
     6ce:	4798      	blx	r3
     6d0:	2800      	cmp	r0, #0
     6d2:	d023      	beq.n	71c <dac_sync_write+0x78>
     6d4:	00ec      	lsls	r4, r5, #3
     6d6:	193c      	adds	r4, r7, r4
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
     6d8:	464b      	mov	r3, r9
     6da:	6063      	str	r3, [r4, #4]
	descr->sel_ch[ch].length = length;
     6dc:	60a6      	str	r6, [r4, #8]

	while (descr->sel_ch[ch].length) {
     6de:	2e00      	cmp	r6, #0
     6e0:	d01f      	beq.n	722 <dac_sync_write+0x7e>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
     6e2:	4f14      	ldr	r7, [pc, #80]	; (734 <dac_sync_write+0x90>)
     6e4:	6863      	ldr	r3, [r4, #4]
     6e6:	8819      	ldrh	r1, [r3, #0]
     6e8:	002a      	movs	r2, r5
     6ea:	9801      	ldr	r0, [sp, #4]
     6ec:	47b8      	blx	r7
		descr->sel_ch[ch].buffer++;
     6ee:	6863      	ldr	r3, [r4, #4]
     6f0:	3302      	adds	r3, #2
     6f2:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
     6f4:	68a3      	ldr	r3, [r4, #8]
     6f6:	3b01      	subs	r3, #1
     6f8:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
     6fa:	2b00      	cmp	r3, #0
     6fc:	d1f2      	bne.n	6e4 <dac_sync_write+0x40>
	}

	return ERR_NONE;
     6fe:	2000      	movs	r0, #0
}
     700:	b002      	add	sp, #8
     702:	bc04      	pop	{r2}
     704:	4691      	mov	r9, r2
     706:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
     708:	2a00      	cmp	r2, #0
     70a:	d005      	beq.n	718 <dac_sync_write+0x74>
     70c:	0030      	movs	r0, r6
     70e:	1e43      	subs	r3, r0, #1
     710:	4198      	sbcs	r0, r3
     712:	e7d4      	b.n	6be <dac_sync_write+0x1a>
     714:	2000      	movs	r0, #0
     716:	e7d2      	b.n	6be <dac_sync_write+0x1a>
     718:	2000      	movs	r0, #0
     71a:	e7d0      	b.n	6be <dac_sync_write+0x1a>
		return ERR_NOT_READY;
     71c:	201d      	movs	r0, #29
     71e:	4240      	negs	r0, r0
     720:	e7ee      	b.n	700 <dac_sync_write+0x5c>
	return ERR_NONE;
     722:	2000      	movs	r0, #0
     724:	e7ec      	b.n	700 <dac_sync_write+0x5c>
     726:	46c0      	nop			; (mov r8, r8)
     728:	0000272c 	.word	0x0000272c
     72c:	00000bc1 	.word	0x00000bc1
     730:	00000e9b 	.word	0x00000e9b
     734:	00000ebd 	.word	0x00000ebd

00000738 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     738:	b510      	push	{r4, lr}
     73a:	b084      	sub	sp, #16
     73c:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     73e:	ab01      	add	r3, sp, #4
     740:	3814      	subs	r0, #20
     742:	8b82      	ldrh	r2, [r0, #28]
     744:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     746:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     748:	4a05      	ldr	r2, [pc, #20]	; (760 <i2c_m_sync_write+0x28>)
     74a:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     74c:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     74e:	0019      	movs	r1, r3
     750:	4b04      	ldr	r3, [pc, #16]	; (764 <i2c_m_sync_write+0x2c>)
     752:	4798      	blx	r3

	if (ret) {
     754:	2800      	cmp	r0, #0
     756:	d100      	bne.n	75a <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     758:	0020      	movs	r0, r4
}
     75a:	b004      	add	sp, #16
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	ffff8000 	.word	0xffff8000
     764:	00001179 	.word	0x00001179

00000768 <i2c_m_sync_read>:
{
     768:	b510      	push	{r4, lr}
     76a:	b084      	sub	sp, #16
     76c:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     76e:	ab01      	add	r3, sp, #4
     770:	3814      	subs	r0, #20
     772:	8b82      	ldrh	r2, [r0, #28]
     774:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     776:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     778:	4a05      	ldr	r2, [pc, #20]	; (790 <i2c_m_sync_read+0x28>)
     77a:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     77c:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     77e:	0019      	movs	r1, r3
     780:	4b04      	ldr	r3, [pc, #16]	; (794 <i2c_m_sync_read+0x2c>)
     782:	4798      	blx	r3
	if (ret) {
     784:	2800      	cmp	r0, #0
     786:	d100      	bne.n	78a <i2c_m_sync_read+0x22>
	return n;
     788:	0020      	movs	r0, r4
}
     78a:	b004      	add	sp, #16
     78c:	bd10      	pop	{r4, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	ffff8001 	.word	0xffff8001
     794:	00001179 	.word	0x00001179

00000798 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     798:	b570      	push	{r4, r5, r6, lr}
     79a:	0004      	movs	r4, r0
     79c:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     79e:	1e43      	subs	r3, r0, #1
     7a0:	4198      	sbcs	r0, r3
     7a2:	b2c0      	uxtb	r0, r0
     7a4:	225e      	movs	r2, #94	; 0x5e
     7a6:	4907      	ldr	r1, [pc, #28]	; (7c4 <i2c_m_sync_init+0x2c>)
     7a8:	4b07      	ldr	r3, [pc, #28]	; (7c8 <i2c_m_sync_init+0x30>)
     7aa:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     7ac:	0029      	movs	r1, r5
     7ae:	0020      	movs	r0, r4
     7b0:	4b06      	ldr	r3, [pc, #24]	; (7cc <i2c_m_sync_init+0x34>)
     7b2:	4798      	blx	r3
	if (init_status) {
     7b4:	2800      	cmp	r0, #0
     7b6:	d103      	bne.n	7c0 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     7b8:	4b05      	ldr	r3, [pc, #20]	; (7d0 <i2c_m_sync_init+0x38>)
     7ba:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     7bc:	4b05      	ldr	r3, [pc, #20]	; (7d4 <i2c_m_sync_init+0x3c>)
     7be:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     7c0:	bd70      	pop	{r4, r5, r6, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	00002748 	.word	0x00002748
     7c8:	00000bc1 	.word	0x00000bc1
     7cc:	00001149 	.word	0x00001149
     7d0:	00000769 	.word	0x00000769
     7d4:	00000739 	.word	0x00000739

000007d8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     7d8:	b570      	push	{r4, r5, r6, lr}
     7da:	0004      	movs	r4, r0
     7dc:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     7de:	2800      	cmp	r0, #0
     7e0:	d016      	beq.n	810 <spi_m_sync_init+0x38>
     7e2:	0008      	movs	r0, r1
     7e4:	1e43      	subs	r3, r0, #1
     7e6:	4198      	sbcs	r0, r3
     7e8:	b2c0      	uxtb	r0, r0
     7ea:	2240      	movs	r2, #64	; 0x40
     7ec:	4909      	ldr	r1, [pc, #36]	; (814 <spi_m_sync_init+0x3c>)
     7ee:	4b0a      	ldr	r3, [pc, #40]	; (818 <spi_m_sync_init+0x40>)
     7f0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     7f2:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     7f4:	1d20      	adds	r0, r4, #4
     7f6:	0029      	movs	r1, r5
     7f8:	4b08      	ldr	r3, [pc, #32]	; (81c <spi_m_sync_init+0x44>)
     7fa:	4798      	blx	r3

	if (rc < 0) {
     7fc:	2800      	cmp	r0, #0
     7fe:	db06      	blt.n	80e <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     800:	4b07      	ldr	r3, [pc, #28]	; (820 <spi_m_sync_init+0x48>)
     802:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     804:	4b07      	ldr	r3, [pc, #28]	; (824 <spi_m_sync_init+0x4c>)
     806:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     808:	4b07      	ldr	r3, [pc, #28]	; (828 <spi_m_sync_init+0x50>)
     80a:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     80c:	2000      	movs	r0, #0
}
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	2000      	movs	r0, #0
     812:	e7ea      	b.n	7ea <spi_m_sync_init+0x12>
     814:	00002764 	.word	0x00002764
     818:	00000bc1 	.word	0x00000bc1
     81c:	000016b1 	.word	0x000016b1
     820:	ffff8000 	.word	0xffff8000
     824:	000008b1 	.word	0x000008b1
     828:	00000875 	.word	0x00000875

0000082c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     82c:	b530      	push	{r4, r5, lr}
     82e:	b087      	sub	sp, #28
     830:	0004      	movs	r4, r0
     832:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     834:	2800      	cmp	r0, #0
     836:	d014      	beq.n	862 <spi_m_sync_transfer+0x36>
     838:	0008      	movs	r0, r1
     83a:	1e43      	subs	r3, r0, #1
     83c:	4198      	sbcs	r0, r3
     83e:	b2c0      	uxtb	r0, r0
     840:	22b3      	movs	r2, #179	; 0xb3
     842:	4909      	ldr	r1, [pc, #36]	; (868 <spi_m_sync_transfer+0x3c>)
     844:	4b09      	ldr	r3, [pc, #36]	; (86c <spi_m_sync_transfer+0x40>)
     846:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     848:	682b      	ldr	r3, [r5, #0]
     84a:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     84c:	686b      	ldr	r3, [r5, #4]
     84e:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     850:	68ab      	ldr	r3, [r5, #8]
     852:	9301      	str	r3, [sp, #4]
     854:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     856:	1d20      	adds	r0, r4, #4
     858:	a903      	add	r1, sp, #12
     85a:	4b05      	ldr	r3, [pc, #20]	; (870 <spi_m_sync_transfer+0x44>)
     85c:	4798      	blx	r3
}
     85e:	b007      	add	sp, #28
     860:	bd30      	pop	{r4, r5, pc}
     862:	2000      	movs	r0, #0
     864:	e7ec      	b.n	840 <spi_m_sync_transfer+0x14>
     866:	46c0      	nop			; (mov r8, r8)
     868:	00002764 	.word	0x00002764
     86c:	00000bc1 	.word	0x00000bc1
     870:	000017ad 	.word	0x000017ad

00000874 <_spi_m_sync_io_write>:
{
     874:	b570      	push	{r4, r5, r6, lr}
     876:	b084      	sub	sp, #16
     878:	0004      	movs	r4, r0
     87a:	000e      	movs	r6, r1
     87c:	0015      	movs	r5, r2
	ASSERT(io);
     87e:	1e43      	subs	r3, r0, #1
     880:	4198      	sbcs	r0, r3
     882:	b2c0      	uxtb	r0, r0
     884:	22a3      	movs	r2, #163	; 0xa3
     886:	4907      	ldr	r1, [pc, #28]	; (8a4 <_spi_m_sync_io_write+0x30>)
     888:	4b07      	ldr	r3, [pc, #28]	; (8a8 <_spi_m_sync_io_write+0x34>)
     88a:	4798      	blx	r3
	xfer.rxbuf = 0;
     88c:	2300      	movs	r3, #0
     88e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     890:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     892:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     894:	0020      	movs	r0, r4
     896:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     898:	a901      	add	r1, sp, #4
     89a:	4b04      	ldr	r3, [pc, #16]	; (8ac <_spi_m_sync_io_write+0x38>)
     89c:	4798      	blx	r3
}
     89e:	b004      	add	sp, #16
     8a0:	bd70      	pop	{r4, r5, r6, pc}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	00002764 	.word	0x00002764
     8a8:	00000bc1 	.word	0x00000bc1
     8ac:	0000082d 	.word	0x0000082d

000008b0 <_spi_m_sync_io_read>:
{
     8b0:	b570      	push	{r4, r5, r6, lr}
     8b2:	b084      	sub	sp, #16
     8b4:	0004      	movs	r4, r0
     8b6:	000e      	movs	r6, r1
     8b8:	0015      	movs	r5, r2
	ASSERT(io);
     8ba:	1e43      	subs	r3, r0, #1
     8bc:	4198      	sbcs	r0, r3
     8be:	b2c0      	uxtb	r0, r0
     8c0:	2287      	movs	r2, #135	; 0x87
     8c2:	4907      	ldr	r1, [pc, #28]	; (8e0 <_spi_m_sync_io_read+0x30>)
     8c4:	4b07      	ldr	r3, [pc, #28]	; (8e4 <_spi_m_sync_io_read+0x34>)
     8c6:	4798      	blx	r3
	xfer.rxbuf = buf;
     8c8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     8ca:	2300      	movs	r3, #0
     8cc:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     8ce:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     8d0:	0020      	movs	r0, r4
     8d2:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     8d4:	a901      	add	r1, sp, #4
     8d6:	4b04      	ldr	r3, [pc, #16]	; (8e8 <_spi_m_sync_io_read+0x38>)
     8d8:	4798      	blx	r3
}
     8da:	b004      	add	sp, #16
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	00002764 	.word	0x00002764
     8e4:	00000bc1 	.word	0x00000bc1
     8e8:	0000082d 	.word	0x0000082d

000008ec <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ee:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     8f0:	4b0e      	ldr	r3, [pc, #56]	; (92c <_usb_d_find_ep+0x40>)
     8f2:	785a      	ldrb	r2, [r3, #1]
     8f4:	4290      	cmp	r0, r2
     8f6:	d017      	beq.n	928 <_usb_d_find_ep+0x3c>
     8f8:	2300      	movs	r3, #0
     8fa:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     8fc:	4f0b      	ldr	r7, [pc, #44]	; (92c <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     8fe:	260f      	movs	r6, #15
     900:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     902:	003d      	movs	r5, r7
     904:	e008      	b.n	918 <_usb_d_find_ep+0x2c>
     906:	3001      	adds	r0, #1
     908:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     90a:	2804      	cmp	r0, #4
     90c:	d00a      	beq.n	924 <_usb_d_find_ep+0x38>
     90e:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     910:	18ea      	adds	r2, r5, r3
     912:	7852      	ldrb	r2, [r2, #1]
     914:	42a2      	cmp	r2, r4
     916:	d006      	beq.n	926 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     918:	5dd9      	ldrb	r1, [r3, r7]
     91a:	2900      	cmp	r1, #0
     91c:	d1f3      	bne.n	906 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     91e:	4296      	cmp	r6, r2
     920:	d1f1      	bne.n	906 <_usb_d_find_ep+0x1a>
     922:	e000      	b.n	926 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     924:	3805      	subs	r0, #5
}
     926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     928:	2000      	movs	r0, #0
     92a:	e7fc      	b.n	926 <_usb_d_find_ep+0x3a>
     92c:	2000001c 	.word	0x2000001c

00000930 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     930:	2000      	movs	r0, #0
     932:	4770      	bx	lr

00000934 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     934:	b570      	push	{r4, r5, r6, lr}
     936:	0004      	movs	r4, r0
     938:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     93a:	4b0a      	ldr	r3, [pc, #40]	; (964 <usb_d_cb_trans_more+0x30>)
     93c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     93e:	0142      	lsls	r2, r0, #5
     940:	4b09      	ldr	r3, [pc, #36]	; (968 <usb_d_cb_trans_more+0x34>)
     942:	189b      	adds	r3, r3, r2
     944:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     946:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     948:	2a03      	cmp	r2, #3
     94a:	d001      	beq.n	950 <usb_d_cb_trans_more+0x1c>
}
     94c:	0018      	movs	r0, r3
     94e:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     950:	0140      	lsls	r0, r0, #5
     952:	4b05      	ldr	r3, [pc, #20]	; (968 <usb_d_cb_trans_more+0x34>)
     954:	1818      	adds	r0, r3, r0
     956:	6983      	ldr	r3, [r0, #24]
     958:	0029      	movs	r1, r5
     95a:	0020      	movs	r0, r4
     95c:	4798      	blx	r3
     95e:	0003      	movs	r3, r0
     960:	e7f4      	b.n	94c <usb_d_cb_trans_more+0x18>
     962:	46c0      	nop			; (mov r8, r8)
     964:	000008ed 	.word	0x000008ed
     968:	2000001c 	.word	0x2000001c

0000096c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	0005      	movs	r5, r0
     972:	000f      	movs	r7, r1
     974:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     976:	4b51      	ldr	r3, [pc, #324]	; (abc <_usb_d_cb_trans_done+0x150>)
     978:	4798      	blx	r3
     97a:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     97c:	2f00      	cmp	r7, #0
     97e:	d162      	bne.n	a46 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     980:	4b4f      	ldr	r3, [pc, #316]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     982:	0142      	lsls	r2, r0, #5
     984:	1899      	adds	r1, r3, r2
     986:	2000      	movs	r0, #0
     988:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     98a:	5cd3      	ldrb	r3, [r2, r3]
     98c:	2b00      	cmp	r3, #0
     98e:	d00e      	beq.n	9ae <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     990:	0162      	lsls	r2, r4, #5
     992:	4b4b      	ldr	r3, [pc, #300]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     994:	189b      	adds	r3, r3, r2
     996:	2201      	movs	r2, #1
     998:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     99a:	0164      	lsls	r4, r4, #5
     99c:	4b48      	ldr	r3, [pc, #288]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     99e:	191c      	adds	r4, r3, r4
     9a0:	78e1      	ldrb	r1, [r4, #3]
     9a2:	69e3      	ldr	r3, [r4, #28]
     9a4:	0032      	movs	r2, r6
     9a6:	0028      	movs	r0, r5
     9a8:	4798      	blx	r3
}
     9aa:	b005      	add	sp, #20
     9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     9ae:	788b      	ldrb	r3, [r1, #2]
     9b0:	2b03      	cmp	r3, #3
     9b2:	d00c      	beq.n	9ce <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     9b4:	4b42      	ldr	r3, [pc, #264]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     9b6:	0162      	lsls	r2, r4, #5
     9b8:	320c      	adds	r2, #12
     9ba:	189a      	adds	r2, r3, r2
     9bc:	0164      	lsls	r4, r4, #5
     9be:	191c      	adds	r4, r3, r4
     9c0:	7860      	ldrb	r0, [r4, #1]
     9c2:	2100      	movs	r1, #0
     9c4:	69e3      	ldr	r3, [r4, #28]
     9c6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     9c8:	2302      	movs	r3, #2
     9ca:	70a3      	strb	r3, [r4, #2]
     9cc:	e7ed      	b.n	9aa <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     9ce:	4a3c      	ldr	r2, [pc, #240]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     9d0:	000b      	movs	r3, r1
     9d2:	250c      	movs	r5, #12
     9d4:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     9d6:	0161      	lsls	r1, r4, #5
     9d8:	310c      	adds	r1, #12
     9da:	1852      	adds	r2, r2, r1
     9dc:	7858      	ldrb	r0, [r3, #1]
     9de:	69db      	ldr	r3, [r3, #28]
     9e0:	2101      	movs	r1, #1
     9e2:	4798      	blx	r3
		if (err) {
     9e4:	2800      	cmp	r0, #0
     9e6:	d017      	beq.n	a18 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     9e8:	0162      	lsls	r2, r4, #5
     9ea:	4b35      	ldr	r3, [pc, #212]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     9ec:	189b      	adds	r3, r3, r2
     9ee:	2205      	movs	r2, #5
     9f0:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     9f2:	3a03      	subs	r2, #3
     9f4:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     9f6:	2d00      	cmp	r5, #0
     9f8:	db09      	blt.n	a0e <_usb_d_cb_trans_done+0xa2>
     9fa:	0164      	lsls	r4, r4, #5
     9fc:	4b30      	ldr	r3, [pc, #192]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     9fe:	191c      	adds	r4, r3, r4
     a00:	7860      	ldrb	r0, [r4, #1]
     a02:	2380      	movs	r3, #128	; 0x80
     a04:	4318      	orrs	r0, r3
     a06:	2101      	movs	r1, #1
     a08:	4b2e      	ldr	r3, [pc, #184]	; (ac4 <_usb_d_cb_trans_done+0x158>)
     a0a:	4798      	blx	r3
     a0c:	e7cd      	b.n	9aa <_usb_d_cb_trans_done+0x3e>
     a0e:	0164      	lsls	r4, r4, #5
     a10:	4b2b      	ldr	r3, [pc, #172]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     a12:	191c      	adds	r4, r3, r4
     a14:	7860      	ldrb	r0, [r4, #1]
     a16:	e7f6      	b.n	a06 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     a18:	0164      	lsls	r4, r4, #5
     a1a:	4b29      	ldr	r3, [pc, #164]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     a1c:	191c      	adds	r4, r3, r4
     a1e:	2304      	movs	r3, #4
     a20:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     a22:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     a24:	2200      	movs	r2, #0
     a26:	9201      	str	r2, [sp, #4]
     a28:	9202      	str	r2, [sp, #8]
     a2a:	2d00      	cmp	r5, #0
     a2c:	db08      	blt.n	a40 <_usb_d_cb_trans_done+0xd4>
     a2e:	3280      	adds	r2, #128	; 0x80
     a30:	4313      	orrs	r3, r2
     a32:	a801      	add	r0, sp, #4
     a34:	7203      	strb	r3, [r0, #8]
     a36:	2301      	movs	r3, #1
     a38:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     a3a:	4b23      	ldr	r3, [pc, #140]	; (ac8 <_usb_d_cb_trans_done+0x15c>)
     a3c:	4798      	blx	r3
     a3e:	e7b4      	b.n	9aa <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     a40:	220f      	movs	r2, #15
     a42:	4013      	ands	r3, r2
     a44:	e7f5      	b.n	a32 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     a46:	2f01      	cmp	r7, #1
     a48:	d00a      	beq.n	a60 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     a4a:	2f02      	cmp	r7, #2
     a4c:	d01d      	beq.n	a8a <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     a4e:	2f03      	cmp	r7, #3
     a50:	d02c      	beq.n	aac <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     a52:	0142      	lsls	r2, r0, #5
     a54:	4b1a      	ldr	r3, [pc, #104]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     a56:	189b      	adds	r3, r3, r2
     a58:	2206      	movs	r2, #6
     a5a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     a5c:	70da      	strb	r2, [r3, #3]
     a5e:	e79c      	b.n	99a <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     a60:	4b17      	ldr	r3, [pc, #92]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     a62:	0142      	lsls	r2, r0, #5
     a64:	1899      	adds	r1, r3, r2
     a66:	2002      	movs	r0, #2
     a68:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a6a:	5cd3      	ldrb	r3, [r2, r3]
     a6c:	2b00      	cmp	r3, #0
     a6e:	d005      	beq.n	a7c <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     a70:	0162      	lsls	r2, r4, #5
     a72:	4b13      	ldr	r3, [pc, #76]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     a74:	189b      	adds	r3, r3, r2
     a76:	2205      	movs	r2, #5
     a78:	709a      	strb	r2, [r3, #2]
     a7a:	e78e      	b.n	99a <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a7c:	2202      	movs	r2, #2
     a7e:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     a80:	2100      	movs	r1, #0
     a82:	0028      	movs	r0, r5
     a84:	4b0f      	ldr	r3, [pc, #60]	; (ac4 <_usb_d_cb_trans_done+0x158>)
     a86:	4798      	blx	r3
     a88:	e787      	b.n	99a <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     a8a:	4b0d      	ldr	r3, [pc, #52]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     a8c:	0142      	lsls	r2, r0, #5
     a8e:	1899      	adds	r1, r3, r2
     a90:	2004      	movs	r0, #4
     a92:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a94:	5cd3      	ldrb	r3, [r2, r3]
     a96:	2b00      	cmp	r3, #0
     a98:	d005      	beq.n	aa6 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     a9a:	0162      	lsls	r2, r4, #5
     a9c:	4b08      	ldr	r3, [pc, #32]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     a9e:	189b      	adds	r3, r3, r2
     aa0:	2201      	movs	r2, #1
     aa2:	709a      	strb	r2, [r3, #2]
     aa4:	e779      	b.n	99a <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     aa6:	2302      	movs	r3, #2
     aa8:	708b      	strb	r3, [r1, #2]
			return;
     aaa:	e77e      	b.n	9aa <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     aac:	0142      	lsls	r2, r0, #5
     aae:	4b04      	ldr	r3, [pc, #16]	; (ac0 <_usb_d_cb_trans_done+0x154>)
     ab0:	189b      	adds	r3, r3, r2
     ab2:	2200      	movs	r2, #0
     ab4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     ab6:	3205      	adds	r2, #5
     ab8:	70da      	strb	r2, [r3, #3]
     aba:	e76e      	b.n	99a <_usb_d_cb_trans_done+0x2e>
     abc:	000008ed 	.word	0x000008ed
     ac0:	2000001c 	.word	0x2000001c
     ac4:	0000201d 	.word	0x0000201d
     ac8:	000021e9 	.word	0x000021e9

00000acc <usb_d_cb_trans_setup>:
{
     acc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ace:	46c6      	mov	lr, r8
     ad0:	b500      	push	{lr}
     ad2:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ad4:	4b1d      	ldr	r3, [pc, #116]	; (b4c <usb_d_cb_trans_setup+0x80>)
     ad6:	4798      	blx	r3
     ad8:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     ada:	0145      	lsls	r5, r0, #5
     adc:	350c      	adds	r5, #12
     ade:	4b1c      	ldr	r3, [pc, #112]	; (b50 <usb_d_cb_trans_setup+0x84>)
     ae0:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     ae2:	0029      	movs	r1, r5
     ae4:	0020      	movs	r0, r4
     ae6:	4b1b      	ldr	r3, [pc, #108]	; (b54 <usb_d_cb_trans_setup+0x88>)
     ae8:	4798      	blx	r3
	if (n != 8) {
     aea:	b2c0      	uxtb	r0, r0
     aec:	2808      	cmp	r0, #8
     aee:	d00a      	beq.n	b06 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     af0:	2101      	movs	r1, #1
     af2:	0020      	movs	r0, r4
     af4:	4d18      	ldr	r5, [pc, #96]	; (b58 <usb_d_cb_trans_setup+0x8c>)
     af6:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     af8:	2080      	movs	r0, #128	; 0x80
     afa:	4320      	orrs	r0, r4
     afc:	2101      	movs	r1, #1
     afe:	47a8      	blx	r5
}
     b00:	bc04      	pop	{r2}
     b02:	4690      	mov	r8, r2
     b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b06:	2100      	movs	r1, #0
     b08:	0020      	movs	r0, r4
     b0a:	4b13      	ldr	r3, [pc, #76]	; (b58 <usb_d_cb_trans_setup+0x8c>)
     b0c:	4698      	mov	r8, r3
     b0e:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     b10:	2780      	movs	r7, #128	; 0x80
     b12:	4327      	orrs	r7, r4
     b14:	2100      	movs	r1, #0
     b16:	0038      	movs	r0, r7
     b18:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     b1a:	0172      	lsls	r2, r6, #5
     b1c:	4b0c      	ldr	r3, [pc, #48]	; (b50 <usb_d_cb_trans_setup+0x84>)
     b1e:	189b      	adds	r3, r3, r2
     b20:	2201      	movs	r2, #1
     b22:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     b24:	695b      	ldr	r3, [r3, #20]
     b26:	0029      	movs	r1, r5
     b28:	0020      	movs	r0, r4
     b2a:	4798      	blx	r3
     b2c:	2800      	cmp	r0, #0
     b2e:	d1e7      	bne.n	b00 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     b30:	0176      	lsls	r6, r6, #5
     b32:	4b07      	ldr	r3, [pc, #28]	; (b50 <usb_d_cb_trans_setup+0x84>)
     b34:	199e      	adds	r6, r3, r6
     b36:	2305      	movs	r3, #5
     b38:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b3a:	2101      	movs	r1, #1
     b3c:	0020      	movs	r0, r4
     b3e:	4c06      	ldr	r4, [pc, #24]	; (b58 <usb_d_cb_trans_setup+0x8c>)
     b40:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b42:	2101      	movs	r1, #1
     b44:	0038      	movs	r0, r7
     b46:	47a0      	blx	r4
     b48:	e7da      	b.n	b00 <usb_d_cb_trans_setup+0x34>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	000008ed 	.word	0x000008ed
     b50:	2000001c 	.word	0x2000001c
     b54:	0000217d 	.word	0x0000217d
     b58:	0000201d 	.word	0x0000201d

00000b5c <usb_d_init>:

int32_t usb_d_init(void)
{
     b5c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     b5e:	4b10      	ldr	r3, [pc, #64]	; (ba0 <usb_d_init+0x44>)
     b60:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     b62:	2800      	cmp	r0, #0
     b64:	db1b      	blt.n	b9e <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     b66:	4c0f      	ldr	r4, [pc, #60]	; (ba4 <usb_d_init+0x48>)
     b68:	2280      	movs	r2, #128	; 0x80
     b6a:	2100      	movs	r1, #0
     b6c:	0020      	movs	r0, r4
     b6e:	4b0e      	ldr	r3, [pc, #56]	; (ba8 <usb_d_init+0x4c>)
     b70:	4798      	blx	r3
     b72:	0023      	movs	r3, r4
     b74:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     b76:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     b78:	4a0c      	ldr	r2, [pc, #48]	; (bac <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     b7a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     b7c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     b7e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     b80:	61da      	str	r2, [r3, #28]
     b82:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     b84:	42a3      	cmp	r3, r4
     b86:	d1f8      	bne.n	b7a <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     b88:	4909      	ldr	r1, [pc, #36]	; (bb0 <usb_d_init+0x54>)
     b8a:	2000      	movs	r0, #0
     b8c:	4c09      	ldr	r4, [pc, #36]	; (bb4 <usb_d_init+0x58>)
     b8e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     b90:	4909      	ldr	r1, [pc, #36]	; (bb8 <usb_d_init+0x5c>)
     b92:	2001      	movs	r0, #1
     b94:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     b96:	4909      	ldr	r1, [pc, #36]	; (bbc <usb_d_init+0x60>)
     b98:	2002      	movs	r0, #2
     b9a:	47a0      	blx	r4
	return ERR_NONE;
     b9c:	2000      	movs	r0, #0
}
     b9e:	bd10      	pop	{r4, pc}
     ba0:	00001f31 	.word	0x00001f31
     ba4:	2000001c 	.word	0x2000001c
     ba8:	000026e3 	.word	0x000026e3
     bac:	00000931 	.word	0x00000931
     bb0:	00000acd 	.word	0x00000acd
     bb4:	000023fd 	.word	0x000023fd
     bb8:	00000935 	.word	0x00000935
     bbc:	0000096d 	.word	0x0000096d

00000bc0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     bc0:	2800      	cmp	r0, #0
     bc2:	d100      	bne.n	bc6 <assert+0x6>
		__asm("BKPT #0");
     bc4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     bc6:	4770      	bx	lr

00000bc8 <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
     bc8:	2000      	movs	r0, #0
     bca:	4770      	bx	lr

00000bcc <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     bcc:	b570      	push	{r4, r5, r6, lr}
     bce:	0004      	movs	r4, r0
     bd0:	000d      	movs	r5, r1

	ASSERT(hw == ADC);
     bd2:	4b4c      	ldr	r3, [pc, #304]	; (d04 <_adc_init+0x138>)
     bd4:	18c0      	adds	r0, r0, r3
     bd6:	4243      	negs	r3, r0
     bd8:	4158      	adcs	r0, r3
     bda:	b2c0      	uxtb	r0, r0
     bdc:	22aa      	movs	r2, #170	; 0xaa
     bde:	494a      	ldr	r1, [pc, #296]	; (d08 <_adc_init+0x13c>)
     be0:	4b4a      	ldr	r3, [pc, #296]	; (d0c <_adc_init+0x140>)
     be2:	4798      	blx	r3
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     be4:	8c23      	ldrh	r3, [r4, #32]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     be6:	07db      	lsls	r3, r3, #31
     be8:	d418      	bmi.n	c1c <_adc_init+0x50>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bea:	2203      	movs	r2, #3
     bec:	8c23      	ldrh	r3, [r4, #32]
     bee:	4213      	tst	r3, r2
     bf0:	d1fc      	bne.n	bec <_adc_init+0x20>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     bf2:	7823      	ldrb	r3, [r4, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     bf4:	079b      	lsls	r3, r3, #30
     bf6:	d50b      	bpl.n	c10 <_adc_init+0x44>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     bf8:	7823      	ldrb	r3, [r4, #0]
     bfa:	2202      	movs	r2, #2
     bfc:	4393      	bics	r3, r2
     bfe:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c00:	3201      	adds	r2, #1
     c02:	8c23      	ldrh	r3, [r4, #32]
     c04:	4213      	tst	r3, r2
     c06:	d1fc      	bne.n	c02 <_adc_init+0x36>
     c08:	2202      	movs	r2, #2
     c0a:	8c23      	ldrh	r3, [r4, #32]
     c0c:	4213      	tst	r3, r2
     c0e:	d1fc      	bne.n	c0a <_adc_init+0x3e>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     c10:	2301      	movs	r3, #1
     c12:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c14:	2203      	movs	r2, #3
     c16:	8c23      	ldrh	r3, [r4, #32]
     c18:	4213      	tst	r3, r2
     c1a:	d1fc      	bne.n	c16 <_adc_init+0x4a>
     c1c:	2201      	movs	r2, #1
     c1e:	8c23      	ldrh	r3, [r4, #32]
     c20:	4213      	tst	r3, r2
     c22:	d1fc      	bne.n	c1e <_adc_init+0x52>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     c24:	00ea      	lsls	r2, r5, #3
     c26:	1b52      	subs	r2, r2, r5
     c28:	0092      	lsls	r2, r2, #2
     c2a:	4b39      	ldr	r3, [pc, #228]	; (d10 <_adc_init+0x144>)
     c2c:	189b      	adds	r3, r3, r2
     c2e:	789a      	ldrb	r2, [r3, #2]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
     c30:	7062      	strb	r2, [r4, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     c32:	78da      	ldrb	r2, [r3, #3]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
     c34:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     c36:	791a      	ldrb	r2, [r3, #4]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
     c38:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     c3a:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     c3c:	8123      	strh	r3, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c3e:	8c23      	ldrh	r3, [r4, #32]
     c40:	055b      	lsls	r3, r3, #21
     c42:	d1fc      	bne.n	c3e <_adc_init+0x72>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     c44:	00eb      	lsls	r3, r5, #3
     c46:	1b5b      	subs	r3, r3, r5
     c48:	009b      	lsls	r3, r3, #2
     c4a:	4a31      	ldr	r2, [pc, #196]	; (d10 <_adc_init+0x144>)
     c4c:	18d3      	adds	r3, r2, r3
     c4e:	891b      	ldrh	r3, [r3, #8]
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
     c50:	8163      	strh	r3, [r4, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c52:	8c23      	ldrh	r3, [r4, #32]
     c54:	055b      	lsls	r3, r3, #21
     c56:	d1fc      	bne.n	c52 <_adc_init+0x86>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     c58:	00eb      	lsls	r3, r5, #3
     c5a:	1b5b      	subs	r3, r3, r5
     c5c:	009b      	lsls	r3, r3, #2
     c5e:	4a2c      	ldr	r2, [pc, #176]	; (d10 <_adc_init+0x144>)
     c60:	18d3      	adds	r3, r2, r3
     c62:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
     c64:	7323      	strb	r3, [r4, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c66:	8c23      	ldrh	r3, [r4, #32]
     c68:	055b      	lsls	r3, r3, #21
     c6a:	d1fc      	bne.n	c66 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     c6c:	00eb      	lsls	r3, r5, #3
     c6e:	1b5b      	subs	r3, r3, r5
     c70:	009b      	lsls	r3, r3, #2
     c72:	4a27      	ldr	r2, [pc, #156]	; (d10 <_adc_init+0x144>)
     c74:	18d3      	adds	r3, r2, r3
     c76:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
     c78:	7363      	strb	r3, [r4, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c7a:	8c23      	ldrh	r3, [r4, #32]
     c7c:	055b      	lsls	r3, r3, #21
     c7e:	d1fc      	bne.n	c7a <_adc_init+0xae>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     c80:	00eb      	lsls	r3, r5, #3
     c82:	1b5b      	subs	r3, r3, r5
     c84:	009b      	lsls	r3, r3, #2
     c86:	4a22      	ldr	r2, [pc, #136]	; (d10 <_adc_init+0x144>)
     c88:	18d3      	adds	r3, r2, r3
     c8a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
     c8c:	81e3      	strh	r3, [r4, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c8e:	2240      	movs	r2, #64	; 0x40
     c90:	8c23      	ldrh	r3, [r4, #32]
     c92:	4213      	tst	r3, r2
     c94:	d1fc      	bne.n	c90 <_adc_init+0xc4>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     c96:	00eb      	lsls	r3, r5, #3
     c98:	1b5b      	subs	r3, r3, r5
     c9a:	009b      	lsls	r3, r3, #2
     c9c:	4a1c      	ldr	r2, [pc, #112]	; (d10 <_adc_init+0x144>)
     c9e:	18d3      	adds	r3, r2, r3
     ca0:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
     ca2:	8223      	strh	r3, [r4, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ca4:	2280      	movs	r2, #128	; 0x80
     ca6:	8c23      	ldrh	r3, [r4, #32]
     ca8:	4213      	tst	r3, r2
     caa:	d1fc      	bne.n	ca6 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     cac:	00eb      	lsls	r3, r5, #3
     cae:	1b5b      	subs	r3, r3, r5
     cb0:	009b      	lsls	r3, r3, #2
     cb2:	4a17      	ldr	r2, [pc, #92]	; (d10 <_adc_init+0x144>)
     cb4:	18d3      	adds	r3, r2, r3
     cb6:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
     cb8:	8263      	strh	r3, [r4, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cba:	2280      	movs	r2, #128	; 0x80
     cbc:	0052      	lsls	r2, r2, #1
     cbe:	8c23      	ldrh	r3, [r4, #32]
     cc0:	4213      	tst	r3, r2
     cc2:	d1fc      	bne.n	cbe <_adc_init+0xf2>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     cc4:	00eb      	lsls	r3, r5, #3
     cc6:	1b5b      	subs	r3, r3, r5
     cc8:	009b      	lsls	r3, r3, #2
     cca:	4a11      	ldr	r2, [pc, #68]	; (d10 <_adc_init+0x144>)
     ccc:	18d3      	adds	r3, r2, r3
     cce:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
     cd0:	82a3      	strh	r3, [r4, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cd2:	2280      	movs	r2, #128	; 0x80
     cd4:	0092      	lsls	r2, r2, #2
     cd6:	8c23      	ldrh	r3, [r4, #32]
     cd8:	4213      	tst	r3, r2
     cda:	d1fc      	bne.n	cd6 <_adc_init+0x10a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     cdc:	490c      	ldr	r1, [pc, #48]	; (d10 <_adc_init+0x144>)
     cde:	00eb      	lsls	r3, r5, #3
     ce0:	1b5a      	subs	r2, r3, r5
     ce2:	0092      	lsls	r2, r2, #2
     ce4:	188a      	adds	r2, r1, r2
     ce6:	7d12      	ldrb	r2, [r2, #20]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     ce8:	7722      	strb	r2, [r4, #28]
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
     cea:	2200      	movs	r2, #0
     cec:	62a2      	str	r2, [r4, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     cee:	1b5d      	subs	r5, r3, r5
     cf0:	00ad      	lsls	r5, r5, #2
     cf2:	194d      	adds	r5, r1, r5
     cf4:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
     cf6:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cf8:	3203      	adds	r2, #3
     cfa:	8c23      	ldrh	r3, [r4, #32]
     cfc:	4213      	tst	r3, r2
     cfe:	d1fc      	bne.n	cfa <_adc_init+0x12e>

	return ERR_NONE;
}
     d00:	2000      	movs	r0, #0
     d02:	bd70      	pop	{r4, r5, r6, pc}
     d04:	bcfff400 	.word	0xbcfff400
     d08:	0000279c 	.word	0x0000279c
     d0c:	00000bc1 	.word	0x00000bc1
     d10:	00002780 	.word	0x00002780

00000d14 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     d14:	b570      	push	{r4, r5, r6, lr}
     d16:	0005      	movs	r5, r0
     d18:	000c      	movs	r4, r1
	ASSERT(device);
     d1a:	1e43      	subs	r3, r0, #1
     d1c:	4198      	sbcs	r0, r3
     d1e:	b2c0      	uxtb	r0, r0
     d20:	22d7      	movs	r2, #215	; 0xd7
     d22:	4906      	ldr	r1, [pc, #24]	; (d3c <_adc_sync_init+0x28>)
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <_adc_sync_init+0x2c>)
     d26:	4798      	blx	r3

	device->hw = hw;
     d28:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     d2a:	0020      	movs	r0, r4
     d2c:	4b05      	ldr	r3, [pc, #20]	; (d44 <_adc_sync_init+0x30>)
     d2e:	4798      	blx	r3
     d30:	0001      	movs	r1, r0
     d32:	0020      	movs	r0, r4
     d34:	4b04      	ldr	r3, [pc, #16]	; (d48 <_adc_sync_init+0x34>)
     d36:	4798      	blx	r3
}
     d38:	bd70      	pop	{r4, r5, r6, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	0000279c 	.word	0x0000279c
     d40:	00000bc1 	.word	0x00000bc1
     d44:	00000bc9 	.word	0x00000bc9
     d48:	00000bcd 	.word	0x00000bcd

00000d4c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d4c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     d4e:	4b09      	ldr	r3, [pc, #36]	; (d74 <_init_chip+0x28>)
     d50:	685a      	ldr	r2, [r3, #4]
     d52:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     d54:	2002      	movs	r0, #2
     d56:	4b08      	ldr	r3, [pc, #32]	; (d78 <_init_chip+0x2c>)
     d58:	4798      	blx	r3

	_osc32kctrl_init_sources();
     d5a:	4b08      	ldr	r3, [pc, #32]	; (d7c <_init_chip+0x30>)
     d5c:	4798      	blx	r3
	_oscctrl_init_sources();
     d5e:	4b08      	ldr	r3, [pc, #32]	; (d80 <_init_chip+0x34>)
     d60:	4798      	blx	r3
	_mclk_init();
     d62:	4b08      	ldr	r3, [pc, #32]	; (d84 <_init_chip+0x38>)
     d64:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     d66:	4b08      	ldr	r3, [pc, #32]	; (d88 <_init_chip+0x3c>)
     d68:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d6a:	20ff      	movs	r0, #255	; 0xff
     d6c:	4b07      	ldr	r3, [pc, #28]	; (d8c <_init_chip+0x40>)
     d6e:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     d70:	bd10      	pop	{r4, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	41004000 	.word	0x41004000
     d78:	00000f5b 	.word	0x00000f5b
     d7c:	00000f09 	.word	0x00000f09
     d80:	00000f21 	.word	0x00000f21
     d84:	00000ef5 	.word	0x00000ef5
     d88:	00000f59 	.word	0x00000f59
     d8c:	00000ed1 	.word	0x00000ed1

00000d90 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
     d90:	b510      	push	{r4, lr}
     d92:	0004      	movs	r4, r0
	ASSERT(hw == DAC);
     d94:	4b1d      	ldr	r3, [pc, #116]	; (e0c <_dac_init+0x7c>)
     d96:	18c0      	adds	r0, r0, r3
     d98:	4243      	negs	r3, r0
     d9a:	4158      	adcs	r0, r3
     d9c:	b2c0      	uxtb	r0, r0
     d9e:	22dc      	movs	r2, #220	; 0xdc
     da0:	491b      	ldr	r1, [pc, #108]	; (e10 <_dac_init+0x80>)
     da2:	4b1c      	ldr	r3, [pc, #112]	; (e14 <_dac_init+0x84>)
     da4:	4798      	blx	r3
	};
}

static inline bool hri_dac_is_syncing(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	return ((Dac *)hw)->SYNCBUSY.reg & reg;
     da6:	68a3      	ldr	r3, [r4, #8]

	if (!hri_dac_is_syncing(hw, DAC_SYNCBUSY_SWRST)) {
     da8:	07db      	lsls	r3, r3, #31
     daa:	d418      	bmi.n	dde <_dac_init+0x4e>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     dac:	2203      	movs	r2, #3
     dae:	68a3      	ldr	r3, [r4, #8]
     db0:	421a      	tst	r2, r3
     db2:	d1fc      	bne.n	dae <_dac_init+0x1e>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
     db4:	7823      	ldrb	r3, [r4, #0]
		if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
     db6:	079b      	lsls	r3, r3, #30
     db8:	d50b      	bpl.n	dd2 <_dac_init+0x42>
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
     dba:	7823      	ldrb	r3, [r4, #0]
     dbc:	2202      	movs	r2, #2
     dbe:	4393      	bics	r3, r2
     dc0:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     dc2:	3201      	adds	r2, #1
     dc4:	68a3      	ldr	r3, [r4, #8]
     dc6:	421a      	tst	r2, r3
     dc8:	d1fc      	bne.n	dc4 <_dac_init+0x34>
     dca:	2202      	movs	r2, #2
     dcc:	68a3      	ldr	r3, [r4, #8]
     dce:	421a      	tst	r2, r3
     dd0:	d1fc      	bne.n	dcc <_dac_init+0x3c>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
     dd2:	2301      	movs	r3, #1
     dd4:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     dd6:	2203      	movs	r2, #3
     dd8:	68a3      	ldr	r3, [r4, #8]
     dda:	421a      	tst	r2, r3
     ddc:	d1fc      	bne.n	dd8 <_dac_init+0x48>
     dde:	2201      	movs	r2, #1
     de0:	68a3      	ldr	r3, [r4, #8]
     de2:	421a      	tst	r2, r3
     de4:	d1fc      	bne.n	de0 <_dac_init+0x50>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
     de6:	2300      	movs	r3, #0
     de8:	7063      	strb	r3, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
     dea:	70a3      	strb	r3, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
     dec:	81a3      	strh	r3, [r4, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     dee:	2202      	movs	r2, #2
     df0:	68a3      	ldr	r3, [r4, #8]
     df2:	421a      	tst	r2, r3
     df4:	d1fc      	bne.n	df0 <_dac_init+0x60>
	((Dac *)hw)->DACCTRL[index].reg = data;
     df6:	2300      	movs	r3, #0
     df8:	81e3      	strh	r3, [r4, #14]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     dfa:	2202      	movs	r2, #2
     dfc:	68a3      	ldr	r3, [r4, #8]
     dfe:	421a      	tst	r2, r3
     e00:	d1fc      	bne.n	dfc <_dac_init+0x6c>
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
     e02:	2301      	movs	r3, #1
     e04:	7623      	strb	r3, [r4, #24]
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
}
     e06:	2000      	movs	r0, #0
     e08:	bd10      	pop	{r4, pc}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	bdffd000 	.word	0xbdffd000
     e10:	000027b4 	.word	0x000027b4
     e14:	00000bc1 	.word	0x00000bc1

00000e18 <_dac_sync_init>:
{
     e18:	b570      	push	{r4, r5, r6, lr}
     e1a:	0005      	movs	r5, r0
     e1c:	000c      	movs	r4, r1
	ASSERT(device);
     e1e:	1e43      	subs	r3, r0, #1
     e20:	4198      	sbcs	r0, r3
     e22:	b2c0      	uxtb	r0, r0
     e24:	2252      	movs	r2, #82	; 0x52
     e26:	4904      	ldr	r1, [pc, #16]	; (e38 <_dac_sync_init+0x20>)
     e28:	4b04      	ldr	r3, [pc, #16]	; (e3c <_dac_sync_init+0x24>)
     e2a:	4798      	blx	r3
	device->hw = hw;
     e2c:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
     e2e:	0020      	movs	r0, r4
     e30:	4b03      	ldr	r3, [pc, #12]	; (e40 <_dac_sync_init+0x28>)
     e32:	4798      	blx	r3
}
     e34:	bd70      	pop	{r4, r5, r6, pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	000027b4 	.word	0x000027b4
     e3c:	00000bc1 	.word	0x00000bc1
     e40:	00000d91 	.word	0x00000d91

00000e44 <_dac_sync_enable_channel>:
{
     e44:	b510      	push	{r4, lr}
 * \param[in] hw The pointer to hardware instance
 * \param[in] ch The channel to enable
 */
static inline void _dac_enable_channel(void *const hw, const uint8_t ch)
{
	if (ch <= 1) {
     e46:	2901      	cmp	r1, #1
     e48:	d900      	bls.n	e4c <_dac_sync_enable_channel+0x8>
}
     e4a:	bd10      	pop	{r4, pc}
	_dac_enable_channel(device->hw, ch);
     e4c:	6803      	ldr	r3, [r0, #0]
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
     e4e:	781a      	ldrb	r2, [r3, #0]
     e50:	2002      	movs	r0, #2
     e52:	4382      	bics	r2, r0
     e54:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     e56:	3001      	adds	r0, #1
     e58:	689a      	ldr	r2, [r3, #8]
     e5a:	4210      	tst	r0, r2
     e5c:	d1fc      	bne.n	e58 <_dac_sync_enable_channel+0x14>
     e5e:	004a      	lsls	r2, r1, #1
     e60:	189a      	adds	r2, r3, r2
	((Dac *)hw)->DACCTRL[index].reg |= DAC_DACCTRL_ENABLE;
     e62:	8990      	ldrh	r0, [r2, #12]
     e64:	2402      	movs	r4, #2
     e66:	4320      	orrs	r0, r4
     e68:	8190      	strh	r0, [r2, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     e6a:	2002      	movs	r0, #2
     e6c:	689a      	ldr	r2, [r3, #8]
     e6e:	4210      	tst	r0, r2
     e70:	d1fc      	bne.n	e6c <_dac_sync_enable_channel+0x28>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
     e72:	781a      	ldrb	r2, [r3, #0]
     e74:	2002      	movs	r0, #2
     e76:	4302      	orrs	r2, r0
     e78:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     e7a:	3001      	adds	r0, #1
     e7c:	689a      	ldr	r2, [r3, #8]
     e7e:	4210      	tst	r0, r2
     e80:	d1fc      	bne.n	e7c <_dac_sync_enable_channel+0x38>
		hri_dac_clear_CTRLA_ENABLE_bit(hw);
		hri_dac_set_DACCTRL_ENABLE_bit(hw, ch);
		hri_dac_set_CTRLA_ENABLE_bit(hw);

		if (0 == ch) {
     e82:	2900      	cmp	r1, #0
     e84:	d104      	bne.n	e90 <_dac_sync_enable_channel+0x4c>
			while (!hri_dac_get_STATUS_READY0_bit(hw))
     e86:	3101      	adds	r1, #1
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY0) >> DAC_STATUS_READY0_Pos;
     e88:	79da      	ldrb	r2, [r3, #7]
     e8a:	420a      	tst	r2, r1
     e8c:	d0fc      	beq.n	e88 <_dac_sync_enable_channel+0x44>
     e8e:	e7dc      	b.n	e4a <_dac_sync_enable_channel+0x6>
				;
		} else {
			while (!hri_dac_get_STATUS_READY1_bit(hw))
     e90:	2102      	movs	r1, #2
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY1) >> DAC_STATUS_READY1_Pos;
     e92:	79da      	ldrb	r2, [r3, #7]
     e94:	420a      	tst	r2, r1
     e96:	d0fc      	beq.n	e92 <_dac_sync_enable_channel+0x4e>
     e98:	e7d7      	b.n	e4a <_dac_sync_enable_channel+0x6>

00000e9a <_dac_sync_is_channel_enable>:
{
	if (ch <= 1) {
		return hri_dac_get_DACCTRL_ENABLE_bit(hw, ch);
	}

	return false;
     e9a:	2300      	movs	r3, #0
	if (ch <= 1) {
     e9c:	2901      	cmp	r1, #1
     e9e:	d901      	bls.n	ea4 <_dac_sync_is_channel_enable+0xa>
}
     ea0:	0018      	movs	r0, r3
     ea2:	4770      	bx	lr
	return _dac_is_channel_enabled(device->hw, ch);
     ea4:	6802      	ldr	r2, [r0, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     ea6:	2002      	movs	r0, #2
     ea8:	6893      	ldr	r3, [r2, #8]
     eaa:	4218      	tst	r0, r3
     eac:	d1fc      	bne.n	ea8 <_dac_sync_is_channel_enable+0xe>
	tmp = ((Dac *)hw)->DACCTRL[index].reg;
     eae:	3104      	adds	r1, #4
     eb0:	0049      	lsls	r1, r1, #1
     eb2:	1852      	adds	r2, r2, r1
     eb4:	8893      	ldrh	r3, [r2, #4]
	return (bool)tmp;
     eb6:	079b      	lsls	r3, r3, #30
     eb8:	0fdb      	lsrs	r3, r3, #31
     eba:	e7f1      	b.n	ea0 <_dac_sync_is_channel_enable+0x6>

00000ebc <_dac_sync_write_data>:
	hri_dac_write_DATA_reg(device->hw, ch, data);
     ebc:	6800      	ldr	r0, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, uint8_t index, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA[index].reg = data;
     ebe:	3208      	adds	r2, #8
     ec0:	0052      	lsls	r2, r2, #1
     ec2:	5211      	strh	r1, [r2, r0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     ec4:	220c      	movs	r2, #12
     ec6:	6883      	ldr	r3, [r0, #8]
     ec8:	421a      	tst	r2, r3
     eca:	d1fc      	bne.n	ec6 <_dac_sync_write_data+0xa>
}
     ecc:	4770      	bx	lr
	...

00000ed0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ed0:	07c3      	lsls	r3, r0, #31
     ed2:	d507      	bpl.n	ee4 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ed4:	4a04      	ldr	r2, [pc, #16]	; (ee8 <_gclk_init_generators_by_fref+0x18>)
     ed6:	4b05      	ldr	r3, [pc, #20]	; (eec <_gclk_init_generators_by_fref+0x1c>)
     ed8:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     eda:	0019      	movs	r1, r3
     edc:	4a04      	ldr	r2, [pc, #16]	; (ef0 <_gclk_init_generators_by_fref+0x20>)
     ede:	684b      	ldr	r3, [r1, #4]
     ee0:	4213      	tst	r3, r2
     ee2:	d1fc      	bne.n	ede <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     ee4:	4770      	bx	lr
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00010106 	.word	0x00010106
     eec:	40001800 	.word	0x40001800
     ef0:	000007fd 	.word	0x000007fd

00000ef4 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     ef4:	4b03      	ldr	r3, [pc, #12]	; (f04 <_mclk_init+0x10>)
     ef6:	2208      	movs	r2, #8
     ef8:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     efa:	3a04      	subs	r2, #4
     efc:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     efe:	3a03      	subs	r2, #3
     f00:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     f02:	4770      	bx	lr
     f04:	40000400 	.word	0x40000400

00000f08 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     f08:	4b04      	ldr	r3, [pc, #16]	; (f1c <_osc32kctrl_init_sources+0x14>)
     f0a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f0c:	21f8      	movs	r1, #248	; 0xf8
     f0e:	0149      	lsls	r1, r1, #5
     f10:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f12:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f14:	2201      	movs	r2, #1
     f16:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     f18:	4770      	bx	lr
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	40001000 	.word	0x40001000

00000f20 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     f20:	2282      	movs	r2, #130	; 0x82
     f22:	4b0c      	ldr	r3, [pc, #48]	; (f54 <_oscctrl_init_sources+0x34>)
     f24:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f26:	0018      	movs	r0, r3
     f28:	2138      	movs	r1, #56	; 0x38
     f2a:	3a80      	subs	r2, #128	; 0x80
     f2c:	5c43      	ldrb	r3, [r0, r1]
     f2e:	4213      	tst	r3, r2
     f30:	d1fc      	bne.n	f2c <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     f32:	4908      	ldr	r1, [pc, #32]	; (f54 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     f34:	2210      	movs	r2, #16
     f36:	68cb      	ldr	r3, [r1, #12]
     f38:	421a      	tst	r2, r3
     f3a:	d0fc      	beq.n	f36 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     f3c:	4a05      	ldr	r2, [pc, #20]	; (f54 <_oscctrl_init_sources+0x34>)
     f3e:	7d13      	ldrb	r3, [r2, #20]
     f40:	2180      	movs	r1, #128	; 0x80
     f42:	430b      	orrs	r3, r1
     f44:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f46:	0010      	movs	r0, r2
     f48:	3948      	subs	r1, #72	; 0x48
     f4a:	220e      	movs	r2, #14
     f4c:	5c43      	ldrb	r3, [r0, r1]
     f4e:	4213      	tst	r3, r2
     f50:	d1fc      	bne.n	f4c <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     f52:	4770      	bx	lr
     f54:	40000c00 	.word	0x40000c00

00000f58 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     f58:	4770      	bx	lr

00000f5a <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     f5a:	2380      	movs	r3, #128	; 0x80
     f5c:	05db      	lsls	r3, r3, #23
     f5e:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     f60:	2203      	movs	r2, #3
     f62:	4013      	ands	r3, r2
     f64:	4298      	cmp	r0, r3
     f66:	d00c      	beq.n	f82 <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     f68:	2280      	movs	r2, #128	; 0x80
     f6a:	05d2      	lsls	r2, r2, #23
     f6c:	23ff      	movs	r3, #255	; 0xff
     f6e:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     f70:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     f72:	2103      	movs	r1, #3
     f74:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     f76:	4008      	ands	r0, r1
     f78:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     f7a:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     f7c:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     f7e:	2b00      	cmp	r3, #0
     f80:	d0fc      	beq.n	f7c <_set_performance_level+0x22>
			;
	}
}
     f82:	4770      	bx	lr

00000f84 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
     f84:	b510      	push	{r4, lr}
     f86:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     f88:	d037      	beq.n	ffa <_calendar_init+0x76>
     f8a:	6800      	ldr	r0, [r0, #0]
     f8c:	1e43      	subs	r3, r0, #1
     f8e:	4198      	sbcs	r0, r3
     f90:	b2c0      	uxtb	r0, r0
     f92:	222f      	movs	r2, #47	; 0x2f
     f94:	491a      	ldr	r1, [pc, #104]	; (1000 <_calendar_init+0x7c>)
     f96:	4b1b      	ldr	r3, [pc, #108]	; (1004 <_calendar_init+0x80>)
     f98:	4798      	blx	r3

	_rtc_dev = dev;
     f9a:	4b1b      	ldr	r3, [pc, #108]	; (1008 <_calendar_init+0x84>)
     f9c:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     f9e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     fa0:	2101      	movs	r1, #1
     fa2:	691a      	ldr	r2, [r3, #16]
     fa4:	4211      	tst	r1, r2
     fa6:	d1fc      	bne.n	fa2 <_calendar_init+0x1e>
     fa8:	4918      	ldr	r1, [pc, #96]	; (100c <_calendar_init+0x88>)
     faa:	691a      	ldr	r2, [r3, #16]
     fac:	420a      	tst	r2, r1
     fae:	d1fc      	bne.n	faa <_calendar_init+0x26>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
     fb0:	881a      	ldrh	r2, [r3, #0]
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
     fb2:	0792      	lsls	r2, r2, #30
     fb4:	d50c      	bpl.n	fd0 <_calendar_init+0x4c>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     fb6:	881a      	ldrh	r2, [r3, #0]
     fb8:	2102      	movs	r1, #2
     fba:	438a      	bics	r2, r1
     fbc:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     fbe:	4913      	ldr	r1, [pc, #76]	; (100c <_calendar_init+0x88>)
     fc0:	691a      	ldr	r2, [r3, #16]
     fc2:	420a      	tst	r2, r1
     fc4:	d1fc      	bne.n	fc0 <_calendar_init+0x3c>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
     fc6:	6821      	ldr	r1, [r4, #0]
     fc8:	2202      	movs	r2, #2
     fca:	690b      	ldr	r3, [r1, #16]
     fcc:	421a      	tst	r2, r3
     fce:	d1fc      	bne.n	fca <_calendar_init+0x46>
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
     fd0:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     fd2:	8813      	ldrh	r3, [r2, #0]
     fd4:	2101      	movs	r1, #1
     fd6:	430b      	orrs	r3, r1
     fd8:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     fda:	6913      	ldr	r3, [r2, #16]
     fdc:	4219      	tst	r1, r3
     fde:	d1fc      	bne.n	fda <_calendar_init+0x56>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     fe0:	6823      	ldr	r3, [r4, #0]
     fe2:	2101      	movs	r1, #1
     fe4:	691a      	ldr	r2, [r3, #16]
     fe6:	4211      	tst	r1, r2
     fe8:	d1fc      	bne.n	fe4 <_calendar_init+0x60>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     fea:	4a09      	ldr	r2, [pc, #36]	; (1010 <_calendar_init+0x8c>)
     fec:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     fee:	4907      	ldr	r1, [pc, #28]	; (100c <_calendar_init+0x88>)
     ff0:	691a      	ldr	r2, [r3, #16]
     ff2:	420a      	tst	r2, r1
     ff4:	d1fc      	bne.n	ff0 <_calendar_init+0x6c>
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	return ERR_NONE;
}
     ff6:	2000      	movs	r0, #0
     ff8:	bd10      	pop	{r4, pc}
     ffa:	2000      	movs	r0, #0
     ffc:	e7c9      	b.n	f92 <_calendar_init+0xe>
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	000027cc 	.word	0x000027cc
    1004:	00000bc1 	.word	0x00000bc1
    1008:	2000009c 	.word	0x2000009c
    100c:	00008003 	.word	0x00008003
    1010:	ffff8100 	.word	0xffff8100

00001014 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1014:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    1016:	4b07      	ldr	r3, [pc, #28]	; (1034 <RTC_Handler+0x20>)
    1018:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    101a:	6823      	ldr	r3, [r4, #0]
    101c:	899b      	ldrh	r3, [r3, #12]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    101e:	05db      	lsls	r3, r3, #23
    1020:	d400      	bmi.n	1024 <RTC_Handler+0x10>
}
    1022:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    1024:	0020      	movs	r0, r4
    1026:	6863      	ldr	r3, [r4, #4]
    1028:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    102a:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    102c:	2280      	movs	r2, #128	; 0x80
    102e:	0052      	lsls	r2, r2, #1
    1030:	819a      	strh	r2, [r3, #12]
}
    1032:	e7f6      	b.n	1022 <RTC_Handler+0xe>
    1034:	2000009c 	.word	0x2000009c

00001038 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1038:	b510      	push	{r4, lr}
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    103a:	4a08      	ldr	r2, [pc, #32]	; (105c <_get_i2cm_index+0x24>)
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
			return i;
    103c:	2300      	movs	r3, #0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    103e:	4290      	cmp	r0, r2
    1040:	d00a      	beq.n	1058 <_get_i2cm_index+0x20>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1042:	0380      	lsls	r0, r0, #14
		if (_i2cms[i].number == sercom_offset) {
    1044:	0e00      	lsrs	r0, r0, #24
    1046:	2805      	cmp	r0, #5
    1048:	d006      	beq.n	1058 <_get_i2cm_index+0x20>
		}
	}

	ASSERT(false);
    104a:	4a05      	ldr	r2, [pc, #20]	; (1060 <_get_i2cm_index+0x28>)
    104c:	4905      	ldr	r1, [pc, #20]	; (1064 <_get_i2cm_index+0x2c>)
    104e:	2000      	movs	r0, #0
    1050:	4b05      	ldr	r3, [pc, #20]	; (1068 <_get_i2cm_index+0x30>)
    1052:	4798      	blx	r3
	return -1;
    1054:	2301      	movs	r3, #1
    1056:	425b      	negs	r3, r3
}
    1058:	0018      	movs	r0, r3
    105a:	bd10      	pop	{r4, pc}
    105c:	43000400 	.word	0x43000400
    1060:	0000039b 	.word	0x0000039b
    1064:	000027fc 	.word	0x000027fc
    1068:	00000bc1 	.word	0x00000bc1

0000106c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    106c:	b570      	push	{r4, r5, r6, lr}
    106e:	0005      	movs	r5, r0
    1070:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1072:	0008      	movs	r0, r1
    1074:	4b31      	ldr	r3, [pc, #196]	; (113c <_i2c_m_sync_init_impl+0xd0>)
    1076:	4798      	blx	r3
    1078:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    107a:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    107c:	07db      	lsls	r3, r3, #31
    107e:	d421      	bmi.n	10c4 <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1080:	0043      	lsls	r3, r0, #1
    1082:	181b      	adds	r3, r3, r0
    1084:	00db      	lsls	r3, r3, #3
    1086:	4a2e      	ldr	r2, [pc, #184]	; (1140 <_i2c_m_sync_init_impl+0xd4>)
    1088:	18d3      	adds	r3, r2, r3
    108a:	6859      	ldr	r1, [r3, #4]
    108c:	231c      	movs	r3, #28
    108e:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1090:	2203      	movs	r2, #3
    1092:	69e3      	ldr	r3, [r4, #28]
    1094:	421a      	tst	r2, r3
    1096:	d1fc      	bne.n	1092 <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1098:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    109a:	079b      	lsls	r3, r3, #30
    109c:	d50b      	bpl.n	10b6 <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    109e:	6823      	ldr	r3, [r4, #0]
    10a0:	2202      	movs	r2, #2
    10a2:	4393      	bics	r3, r2
    10a4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10a6:	3201      	adds	r2, #1
    10a8:	69e3      	ldr	r3, [r4, #28]
    10aa:	421a      	tst	r2, r3
    10ac:	d1fc      	bne.n	10a8 <_i2c_m_sync_init_impl+0x3c>
    10ae:	2202      	movs	r2, #2
    10b0:	69e3      	ldr	r3, [r4, #28]
    10b2:	421a      	tst	r2, r3
    10b4:	d1fc      	bne.n	10b0 <_i2c_m_sync_init_impl+0x44>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    10b6:	2301      	movs	r3, #1
    10b8:	430b      	orrs	r3, r1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    10ba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10bc:	2203      	movs	r2, #3
    10be:	69e3      	ldr	r3, [r4, #28]
    10c0:	421a      	tst	r2, r3
    10c2:	d1fc      	bne.n	10be <_i2c_m_sync_init_impl+0x52>
    10c4:	2201      	movs	r2, #1
    10c6:	69e3      	ldr	r3, [r4, #28]
    10c8:	421a      	tst	r2, r3
    10ca:	d1fc      	bne.n	10c6 <_i2c_m_sync_init_impl+0x5a>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    10cc:	0043      	lsls	r3, r0, #1
    10ce:	181b      	adds	r3, r3, r0
    10d0:	00db      	lsls	r3, r3, #3
    10d2:	4a1b      	ldr	r2, [pc, #108]	; (1140 <_i2c_m_sync_init_impl+0xd4>)
    10d4:	18d3      	adds	r3, r2, r3
    10d6:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    10d8:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10da:	2203      	movs	r2, #3
    10dc:	69e3      	ldr	r3, [r4, #28]
    10de:	421a      	tst	r2, r3
    10e0:	d1fc      	bne.n	10dc <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    10e2:	0043      	lsls	r3, r0, #1
    10e4:	181b      	adds	r3, r3, r0
    10e6:	00db      	lsls	r3, r3, #3
    10e8:	4a15      	ldr	r2, [pc, #84]	; (1140 <_i2c_m_sync_init_impl+0xd4>)
    10ea:	18d3      	adds	r3, r2, r3
    10ec:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    10ee:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10f0:	2204      	movs	r2, #4
    10f2:	69e3      	ldr	r3, [r4, #28]
    10f4:	421a      	tst	r2, r3
    10f6:	d1fc      	bne.n	10f2 <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    10f8:	0043      	lsls	r3, r0, #1
    10fa:	181b      	adds	r3, r3, r0
    10fc:	00db      	lsls	r3, r3, #3
    10fe:	4a10      	ldr	r2, [pc, #64]	; (1140 <_i2c_m_sync_init_impl+0xd4>)
    1100:	18d3      	adds	r3, r2, r3
    1102:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1104:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1106:	0189      	lsls	r1, r1, #6
    1108:	0f89      	lsrs	r1, r1, #30
    110a:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    110c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    110e:	4e0d      	ldr	r6, [pc, #52]	; (1144 <_i2c_m_sync_init_impl+0xd8>)
    1110:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1112:	2301      	movs	r3, #1
    1114:	428b      	cmp	r3, r1
    1116:	419b      	sbcs	r3, r3
    1118:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    111a:	039b      	lsls	r3, r3, #14
    111c:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    111e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1120:	2204      	movs	r2, #4
    1122:	69e3      	ldr	r3, [r4, #28]
    1124:	421a      	tst	r2, r3
    1126:	d1fc      	bne.n	1122 <_i2c_m_sync_init_impl+0xb6>

	service->trise = _i2cms[i].trise;
    1128:	0043      	lsls	r3, r0, #1
    112a:	1818      	adds	r0, r3, r0
    112c:	00c0      	lsls	r0, r0, #3
    112e:	4b04      	ldr	r3, [pc, #16]	; (1140 <_i2c_m_sync_init_impl+0xd4>)
    1130:	1818      	adds	r0, r3, r0
    1132:	8a43      	ldrh	r3, [r0, #18]
    1134:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1136:	2000      	movs	r0, #0
    1138:	bd70      	pop	{r4, r5, r6, pc}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	00001039 	.word	0x00001039
    1140:	000027e4 	.word	0x000027e4
    1144:	ffffbfff 	.word	0xffffbfff

00001148 <_i2c_m_sync_init>:
{
    1148:	b570      	push	{r4, r5, r6, lr}
    114a:	0004      	movs	r4, r0
    114c:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    114e:	1e43      	subs	r3, r0, #1
    1150:	4198      	sbcs	r0, r3
    1152:	b2c0      	uxtb	r0, r0
    1154:	4a04      	ldr	r2, [pc, #16]	; (1168 <_i2c_m_sync_init+0x20>)
    1156:	4905      	ldr	r1, [pc, #20]	; (116c <_i2c_m_sync_init+0x24>)
    1158:	4b05      	ldr	r3, [pc, #20]	; (1170 <_i2c_m_sync_init+0x28>)
    115a:	4798      	blx	r3
	i2c_dev->hw = hw;
    115c:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    115e:	0029      	movs	r1, r5
    1160:	0020      	movs	r0, r4
    1162:	4b04      	ldr	r3, [pc, #16]	; (1174 <_i2c_m_sync_init+0x2c>)
    1164:	4798      	blx	r3
}
    1166:	bd70      	pop	{r4, r5, r6, pc}
    1168:	0000050a 	.word	0x0000050a
    116c:	000027fc 	.word	0x000027fc
    1170:	00000bc1 	.word	0x00000bc1
    1174:	0000106d 	.word	0x0000106d

00001178 <_i2c_m_sync_transfer>:
{
    1178:	b5f0      	push	{r4, r5, r6, r7, lr}
    117a:	46de      	mov	lr, fp
    117c:	4657      	mov	r7, sl
    117e:	464e      	mov	r6, r9
    1180:	4645      	mov	r5, r8
    1182:	b5e0      	push	{r5, r6, r7, lr}
    1184:	b083      	sub	sp, #12
    1186:	0005      	movs	r5, r0
    1188:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    118a:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    118c:	0006      	movs	r6, r0
    118e:	1e73      	subs	r3, r6, #1
    1190:	419e      	sbcs	r6, r3
    1192:	b2f3      	uxtb	r3, r6
    1194:	9301      	str	r3, [sp, #4]
    1196:	4fb3      	ldr	r7, [pc, #716]	; (1464 <_i2c_m_sync_transfer+0x2ec>)
    1198:	4ab3      	ldr	r2, [pc, #716]	; (1468 <_i2c_m_sync_transfer+0x2f0>)
    119a:	0039      	movs	r1, r7
    119c:	0018      	movs	r0, r3
    119e:	4eb3      	ldr	r6, [pc, #716]	; (146c <_i2c_m_sync_transfer+0x2f4>)
    11a0:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    11a2:	6928      	ldr	r0, [r5, #16]
    11a4:	1e43      	subs	r3, r0, #1
    11a6:	4198      	sbcs	r0, r3
    11a8:	b2c0      	uxtb	r0, r0
    11aa:	4ab1      	ldr	r2, [pc, #708]	; (1470 <_i2c_m_sync_transfer+0x2f8>)
    11ac:	0039      	movs	r1, r7
    11ae:	47b0      	blx	r6
	ASSERT(msg);
    11b0:	4640      	mov	r0, r8
    11b2:	1e43      	subs	r3, r0, #1
    11b4:	4198      	sbcs	r0, r3
    11b6:	b2c0      	uxtb	r0, r0
    11b8:	4aae      	ldr	r2, [pc, #696]	; (1474 <_i2c_m_sync_transfer+0x2fc>)
    11ba:	0039      	movs	r1, r7
    11bc:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    11be:	886b      	ldrh	r3, [r5, #2]
    11c0:	05db      	lsls	r3, r3, #23
    11c2:	d500      	bpl.n	11c6 <_i2c_m_sync_transfer+0x4e>
    11c4:	e225      	b.n	1612 <_i2c_m_sync_transfer+0x49a>
	msg->flags |= I2C_M_BUSY;
    11c6:	4643      	mov	r3, r8
    11c8:	885a      	ldrh	r2, [r3, #2]
    11ca:	2380      	movs	r3, #128	; 0x80
    11cc:	005b      	lsls	r3, r3, #1
    11ce:	431a      	orrs	r2, r3
    11d0:	4641      	mov	r1, r8
    11d2:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
    11d4:	002a      	movs	r2, r5
    11d6:	c9c1      	ldmia	r1!, {r0, r6, r7}
    11d8:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    11da:	6862      	ldr	r2, [r4, #4]
    11dc:	4313      	orrs	r3, r2
    11de:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11e0:	2204      	movs	r2, #4
    11e2:	69e3      	ldr	r3, [r4, #28]
    11e4:	421a      	tst	r2, r3
    11e6:	d1fc      	bne.n	11e2 <_i2c_m_sync_transfer+0x6a>
	void *             hw    = i2c_dev->hw;
    11e8:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    11ea:	683b      	ldr	r3, [r7, #0]
    11ec:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
    11ee:	4aa2      	ldr	r2, [pc, #648]	; (1478 <_i2c_m_sync_transfer+0x300>)
    11f0:	499c      	ldr	r1, [pc, #624]	; (1464 <_i2c_m_sync_transfer+0x2ec>)
    11f2:	9801      	ldr	r0, [sp, #4]
    11f4:	4b9d      	ldr	r3, [pc, #628]	; (146c <_i2c_m_sync_transfer+0x2f4>)
    11f6:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    11f8:	686b      	ldr	r3, [r5, #4]
    11fa:	2b01      	cmp	r3, #1
    11fc:	d05a      	beq.n	12b4 <_i2c_m_sync_transfer+0x13c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    11fe:	687b      	ldr	r3, [r7, #4]
    1200:	4a9e      	ldr	r2, [pc, #632]	; (147c <_i2c_m_sync_transfer+0x304>)
    1202:	4013      	ands	r3, r2
    1204:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1206:	2204      	movs	r2, #4
    1208:	69fb      	ldr	r3, [r7, #28]
    120a:	421a      	tst	r2, r3
    120c:	d1fc      	bne.n	1208 <_i2c_m_sync_transfer+0x90>
	if (msg->addr & I2C_M_TEN) {
    120e:	882b      	ldrh	r3, [r5, #0]
    1210:	055a      	lsls	r2, r3, #21
    1212:	d55c      	bpl.n	12ce <_i2c_m_sync_transfer+0x156>
		if (msg->flags & I2C_M_RD) {
    1214:	886a      	ldrh	r2, [r5, #2]
    1216:	07d2      	lsls	r2, r2, #31
    1218:	d504      	bpl.n	1224 <_i2c_m_sync_transfer+0xac>
			msg->flags |= I2C_M_TEN;
    121a:	886a      	ldrh	r2, [r5, #2]
    121c:	2180      	movs	r1, #128	; 0x80
    121e:	00c9      	lsls	r1, r1, #3
    1220:	430a      	orrs	r2, r1
    1222:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    1224:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1226:	4996      	ldr	r1, [pc, #600]	; (1480 <_i2c_m_sync_transfer+0x308>)
    1228:	4019      	ands	r1, r3
    122a:	2204      	movs	r2, #4
    122c:	69fb      	ldr	r3, [r7, #28]
    122e:	421a      	tst	r2, r3
    1230:	d1fc      	bne.n	122c <_i2c_m_sync_transfer+0xb4>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1234:	2280      	movs	r2, #128	; 0x80
    1236:	01d2      	lsls	r2, r2, #7
    1238:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
    123a:	2380      	movs	r3, #128	; 0x80
    123c:	021b      	lsls	r3, r3, #8
    123e:	4313      	orrs	r3, r2
    1240:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1242:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1244:	2204      	movs	r2, #4
    1246:	69fb      	ldr	r3, [r7, #28]
    1248:	421a      	tst	r2, r3
    124a:	d1fc      	bne.n	1246 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    124c:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    124e:	7e0b      	ldrb	r3, [r1, #24]
    1250:	b2db      	uxtb	r3, r3
    1252:	4a8c      	ldr	r2, [pc, #560]	; (1484 <_i2c_m_sync_transfer+0x30c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1254:	2003      	movs	r0, #3
    1256:	4218      	tst	r0, r3
    1258:	d104      	bne.n	1264 <_i2c_m_sync_transfer+0xec>
    125a:	7e0b      	ldrb	r3, [r1, #24]
    125c:	b2db      	uxtb	r3, r3
    125e:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    1260:	2a00      	cmp	r2, #0
    1262:	d1f8      	bne.n	1256 <_i2c_m_sync_transfer+0xde>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1264:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1266:	2104      	movs	r1, #4
    1268:	69fa      	ldr	r2, [r7, #28]
    126a:	4211      	tst	r1, r2
    126c:	d1fc      	bne.n	1268 <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    126e:	8b7a      	ldrh	r2, [r7, #26]
    1270:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1272:	07d9      	lsls	r1, r3, #31
    1274:	d400      	bmi.n	1278 <_i2c_m_sync_transfer+0x100>
    1276:	e0a0      	b.n	13ba <_i2c_m_sync_transfer+0x242>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1278:	0793      	lsls	r3, r2, #30
    127a:	d53e      	bpl.n	12fa <_i2c_m_sync_transfer+0x182>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    127c:	2301      	movs	r3, #1
    127e:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    1280:	886b      	ldrh	r3, [r5, #2]
    1282:	2180      	movs	r1, #128	; 0x80
    1284:	0149      	lsls	r1, r1, #5
    1286:	430b      	orrs	r3, r1
    1288:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    128a:	886b      	ldrh	r3, [r5, #2]
    128c:	497e      	ldr	r1, [pc, #504]	; (1488 <_i2c_m_sync_transfer+0x310>)
    128e:	400b      	ands	r3, r1
    1290:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1292:	2001      	movs	r0, #1
    1294:	0003      	movs	r3, r0
    1296:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    1298:	4258      	negs	r0, r3
    129a:	4158      	adcs	r0, r3
    129c:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    129e:	886b      	ldrh	r3, [r5, #2]
    12a0:	4a79      	ldr	r2, [pc, #484]	; (1488 <_i2c_m_sync_transfer+0x310>)
    12a2:	4013      	ands	r3, r2
    12a4:	806b      	strh	r3, [r5, #2]
}
    12a6:	b003      	add	sp, #12
    12a8:	bc3c      	pop	{r2, r3, r4, r5}
    12aa:	4690      	mov	r8, r2
    12ac:	4699      	mov	r9, r3
    12ae:	46a2      	mov	sl, r4
    12b0:	46ab      	mov	fp, r5
    12b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    12b4:	464b      	mov	r3, r9
    12b6:	011b      	lsls	r3, r3, #4
    12b8:	d5a1      	bpl.n	11fe <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    12ba:	687a      	ldr	r2, [r7, #4]
    12bc:	2380      	movs	r3, #128	; 0x80
    12be:	02db      	lsls	r3, r3, #11
    12c0:	4313      	orrs	r3, r2
    12c2:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12c4:	2204      	movs	r2, #4
    12c6:	69fb      	ldr	r3, [r7, #28]
    12c8:	421a      	tst	r2, r3
    12ca:	d1fc      	bne.n	12c6 <_i2c_m_sync_transfer+0x14e>
    12cc:	e79f      	b.n	120e <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    12ce:	886a      	ldrh	r2, [r5, #2]
    12d0:	005b      	lsls	r3, r3, #1
    12d2:	21ff      	movs	r1, #255	; 0xff
    12d4:	400b      	ands	r3, r1
    12d6:	39fe      	subs	r1, #254	; 0xfe
    12d8:	4011      	ands	r1, r2
    12da:	4319      	orrs	r1, r3
    12dc:	2204      	movs	r2, #4
    12de:	69fb      	ldr	r3, [r7, #28]
    12e0:	421a      	tst	r2, r3
    12e2:	d1fc      	bne.n	12de <_i2c_m_sync_transfer+0x166>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    12e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    12e6:	2280      	movs	r2, #128	; 0x80
    12e8:	01d2      	lsls	r2, r2, #7
    12ea:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    12ec:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    12ee:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12f0:	2204      	movs	r2, #4
    12f2:	69fb      	ldr	r3, [r7, #28]
    12f4:	421a      	tst	r2, r3
    12f6:	d1fc      	bne.n	12f2 <_i2c_m_sync_transfer+0x17a>
    12f8:	e7a8      	b.n	124c <_i2c_m_sync_transfer+0xd4>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    12fa:	0753      	lsls	r3, r2, #29
    12fc:	d41b      	bmi.n	1336 <_i2c_m_sync_transfer+0x1be>
			if (msg->flags & I2C_M_TEN) {
    12fe:	886b      	ldrh	r3, [r5, #2]
    1300:	055b      	lsls	r3, r3, #21
    1302:	d535      	bpl.n	1370 <_i2c_m_sync_transfer+0x1f8>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1304:	882b      	ldrh	r3, [r5, #0]
    1306:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1308:	2106      	movs	r1, #6
    130a:	4019      	ands	r1, r3
    130c:	2204      	movs	r2, #4
    130e:	69fb      	ldr	r3, [r7, #28]
    1310:	421a      	tst	r2, r3
    1312:	d1fc      	bne.n	130e <_i2c_m_sync_transfer+0x196>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1316:	2280      	movs	r2, #128	; 0x80
    1318:	01d2      	lsls	r2, r2, #7
    131a:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    131c:	22f1      	movs	r2, #241	; 0xf1
    131e:	4313      	orrs	r3, r2
    1320:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1322:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1324:	3aed      	subs	r2, #237	; 0xed
    1326:	69fb      	ldr	r3, [r7, #28]
    1328:	421a      	tst	r2, r3
    132a:	d1fc      	bne.n	1326 <_i2c_m_sync_transfer+0x1ae>
				msg->flags &= ~I2C_M_TEN;
    132c:	886b      	ldrh	r3, [r5, #2]
    132e:	4a57      	ldr	r2, [pc, #348]	; (148c <_i2c_m_sync_transfer+0x314>)
    1330:	4013      	ands	r3, r2
    1332:	806b      	strh	r3, [r5, #2]
    1334:	e066      	b.n	1404 <_i2c_m_sync_transfer+0x28c>
				if (msg->len > 0) {
    1336:	686b      	ldr	r3, [r5, #4]
    1338:	2b00      	cmp	r3, #0
    133a:	dd04      	ble.n	1346 <_i2c_m_sync_transfer+0x1ce>
					msg->flags |= I2C_M_FAIL;
    133c:	886b      	ldrh	r3, [r5, #2]
    133e:	2280      	movs	r2, #128	; 0x80
    1340:	0152      	lsls	r2, r2, #5
    1342:	4313      	orrs	r3, r2
    1344:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1346:	886b      	ldrh	r3, [r5, #2]
    1348:	b21b      	sxth	r3, r3
    134a:	2b00      	cmp	r3, #0
    134c:	db06      	blt.n	135c <_i2c_m_sync_transfer+0x1e4>
				msg->flags &= ~I2C_M_BUSY;
    134e:	886b      	ldrh	r3, [r5, #2]
    1350:	4a4d      	ldr	r2, [pc, #308]	; (1488 <_i2c_m_sync_transfer+0x310>)
    1352:	4013      	ands	r3, r2
    1354:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1356:	2002      	movs	r0, #2
    1358:	4240      	negs	r0, r0
    135a:	e7a0      	b.n	129e <_i2c_m_sync_transfer+0x126>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    135c:	687a      	ldr	r2, [r7, #4]
    135e:	23c0      	movs	r3, #192	; 0xc0
    1360:	029b      	lsls	r3, r3, #10
    1362:	4313      	orrs	r3, r2
    1364:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1366:	2304      	movs	r3, #4
    1368:	69fa      	ldr	r2, [r7, #28]
    136a:	4213      	tst	r3, r2
    136c:	d1fc      	bne.n	1368 <_i2c_m_sync_transfer+0x1f0>
    136e:	e7ee      	b.n	134e <_i2c_m_sync_transfer+0x1d6>
			if (msg->len == 0) {
    1370:	686b      	ldr	r3, [r5, #4]
    1372:	2b00      	cmp	r3, #0
    1374:	d112      	bne.n	139c <_i2c_m_sync_transfer+0x224>
				if (msg->flags & I2C_M_STOP) {
    1376:	886b      	ldrh	r3, [r5, #2]
    1378:	b21b      	sxth	r3, r3
    137a:	2b00      	cmp	r3, #0
    137c:	db04      	blt.n	1388 <_i2c_m_sync_transfer+0x210>
				msg->flags &= ~I2C_M_BUSY;
    137e:	886b      	ldrh	r3, [r5, #2]
    1380:	4a41      	ldr	r2, [pc, #260]	; (1488 <_i2c_m_sync_transfer+0x310>)
    1382:	4013      	ands	r3, r2
    1384:	806b      	strh	r3, [r5, #2]
    1386:	e03d      	b.n	1404 <_i2c_m_sync_transfer+0x28c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1388:	687a      	ldr	r2, [r7, #4]
    138a:	23c0      	movs	r3, #192	; 0xc0
    138c:	029b      	lsls	r3, r3, #10
    138e:	4313      	orrs	r3, r2
    1390:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1392:	2204      	movs	r2, #4
    1394:	69fb      	ldr	r3, [r7, #28]
    1396:	421a      	tst	r2, r3
    1398:	d1fc      	bne.n	1394 <_i2c_m_sync_transfer+0x21c>
    139a:	e7f0      	b.n	137e <_i2c_m_sync_transfer+0x206>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    139c:	68ab      	ldr	r3, [r5, #8]
    139e:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    13a0:	2328      	movs	r3, #40	; 0x28
    13a2:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13a4:	2204      	movs	r2, #4
    13a6:	69fb      	ldr	r3, [r7, #28]
    13a8:	421a      	tst	r2, r3
    13aa:	d1fc      	bne.n	13a6 <_i2c_m_sync_transfer+0x22e>
				msg->buffer++;
    13ac:	68ab      	ldr	r3, [r5, #8]
    13ae:	3301      	adds	r3, #1
    13b0:	60ab      	str	r3, [r5, #8]
				msg->len--;
    13b2:	686b      	ldr	r3, [r5, #4]
    13b4:	3b01      	subs	r3, #1
    13b6:	606b      	str	r3, [r5, #4]
    13b8:	e024      	b.n	1404 <_i2c_m_sync_transfer+0x28c>
	} else if (flags & SB_FLAG) {
    13ba:	079b      	lsls	r3, r3, #30
    13bc:	d522      	bpl.n	1404 <_i2c_m_sync_transfer+0x28c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    13be:	686b      	ldr	r3, [r5, #4]
    13c0:	2b00      	cmp	r3, #0
    13c2:	d040      	beq.n	1446 <_i2c_m_sync_transfer+0x2ce>
    13c4:	0752      	lsls	r2, r2, #29
    13c6:	d43e      	bmi.n	1446 <_i2c_m_sync_transfer+0x2ce>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    13c8:	0136      	lsls	r6, r6, #4
    13ca:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    13cc:	3b01      	subs	r3, #1
    13ce:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    13d0:	2b00      	cmp	r3, #0
    13d2:	d000      	beq.n	13d6 <_i2c_m_sync_transfer+0x25e>
    13d4:	e120      	b.n	1618 <_i2c_m_sync_transfer+0x4a0>
    13d6:	2e00      	cmp	r6, #0
    13d8:	d100      	bne.n	13dc <_i2c_m_sync_transfer+0x264>
    13da:	e123      	b.n	1624 <_i2c_m_sync_transfer+0x4ac>
				if (msg->flags & I2C_M_STOP) {
    13dc:	886b      	ldrh	r3, [r5, #2]
    13de:	b21b      	sxth	r3, r3
    13e0:	2b00      	cmp	r3, #0
    13e2:	db1d      	blt.n	1420 <_i2c_m_sync_transfer+0x2a8>
				msg->flags &= ~I2C_M_BUSY;
    13e4:	886b      	ldrh	r3, [r5, #2]
    13e6:	4a28      	ldr	r2, [pc, #160]	; (1488 <_i2c_m_sync_transfer+0x310>)
    13e8:	4013      	ands	r3, r2
    13ea:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    13ec:	68a9      	ldr	r1, [r5, #8]
    13ee:	1c4b      	adds	r3, r1, #1
    13f0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13f2:	2204      	movs	r2, #4
    13f4:	69fb      	ldr	r3, [r7, #28]
    13f6:	421a      	tst	r2, r3
    13f8:	d1fc      	bne.n	13f4 <_i2c_m_sync_transfer+0x27c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    13fa:	2328      	movs	r3, #40	; 0x28
    13fc:	5cfb      	ldrb	r3, [r7, r3]
    13fe:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1400:	2302      	movs	r3, #2
    1402:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    1404:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1406:	2380      	movs	r3, #128	; 0x80
    1408:	005b      	lsls	r3, r3, #1
    140a:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    140c:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    140e:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
    1410:	3bff      	subs	r3, #255	; 0xff
    1412:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
    1414:	3301      	adds	r3, #1
    1416:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1418:	3326      	adds	r3, #38	; 0x26
    141a:	469b      	mov	fp, r3
    141c:	9601      	str	r6, [sp, #4]
    141e:	e0c3      	b.n	15a8 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	4a19      	ldr	r2, [pc, #100]	; (1488 <_i2c_m_sync_transfer+0x310>)
    1424:	4013      	ands	r3, r2
    1426:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1428:	3206      	adds	r2, #6
    142a:	32ff      	adds	r2, #255	; 0xff
    142c:	69fb      	ldr	r3, [r7, #28]
    142e:	421a      	tst	r2, r3
    1430:	d1fc      	bne.n	142c <_i2c_m_sync_transfer+0x2b4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1432:	687a      	ldr	r2, [r7, #4]
    1434:	23c0      	movs	r3, #192	; 0xc0
    1436:	029b      	lsls	r3, r3, #10
    1438:	4313      	orrs	r3, r2
    143a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    143c:	2204      	movs	r2, #4
    143e:	69fb      	ldr	r3, [r7, #28]
    1440:	421a      	tst	r2, r3
    1442:	d1fc      	bne.n	143e <_i2c_m_sync_transfer+0x2c6>
    1444:	e7ce      	b.n	13e4 <_i2c_m_sync_transfer+0x26c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1446:	2302      	movs	r3, #2
    1448:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    144a:	2002      	movs	r0, #2
    144c:	4240      	negs	r0, r0
    144e:	e726      	b.n	129e <_i2c_m_sync_transfer+0x126>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1450:	6862      	ldr	r2, [r4, #4]
    1452:	23c0      	movs	r3, #192	; 0xc0
    1454:	029b      	lsls	r3, r3, #10
    1456:	4313      	orrs	r3, r2
    1458:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    145a:	2204      	movs	r2, #4
    145c:	69e3      	ldr	r3, [r4, #28]
    145e:	421a      	tst	r2, r3
    1460:	d1fc      	bne.n	145c <_i2c_m_sync_transfer+0x2e4>
    1462:	e0b6      	b.n	15d2 <_i2c_m_sync_transfer+0x45a>
    1464:	000027fc 	.word	0x000027fc
    1468:	000005c2 	.word	0x000005c2
    146c:	00000bc1 	.word	0x00000bc1
    1470:	000005c3 	.word	0x000005c3
    1474:	000005c4 	.word	0x000005c4
    1478:	00000597 	.word	0x00000597
    147c:	fffbffff 	.word	0xfffbffff
    1480:	000007fe 	.word	0x000007fe
    1484:	0000ffff 	.word	0x0000ffff
    1488:	fffffeff 	.word	0xfffffeff
    148c:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1490:	4202      	tst	r2, r0
    1492:	d11b      	bne.n	14cc <_i2c_m_sync_transfer+0x354>
			if (msg->flags & I2C_M_TEN) {
    1494:	886b      	ldrh	r3, [r5, #2]
    1496:	055b      	lsls	r3, r3, #21
    1498:	d535      	bpl.n	1506 <_i2c_m_sync_transfer+0x38e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    149a:	882b      	ldrh	r3, [r5, #0]
    149c:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    149e:	2006      	movs	r0, #6
    14a0:	4018      	ands	r0, r3
    14a2:	69e3      	ldr	r3, [r4, #28]
    14a4:	421a      	tst	r2, r3
    14a6:	d1fc      	bne.n	14a2 <_i2c_m_sync_transfer+0x32a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    14a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    14aa:	2680      	movs	r6, #128	; 0x80
    14ac:	01f6      	lsls	r6, r6, #7
    14ae:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
    14b0:	26f1      	movs	r6, #241	; 0xf1
    14b2:	4333      	orrs	r3, r6
    14b4:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    14b6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14b8:	69e3      	ldr	r3, [r4, #28]
    14ba:	421a      	tst	r2, r3
    14bc:	d1fc      	bne.n	14b8 <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_TEN;
    14be:	886b      	ldrh	r3, [r5, #2]
    14c0:	4878      	ldr	r0, [pc, #480]	; (16a4 <_i2c_m_sync_transfer+0x52c>)
    14c2:	4003      	ands	r3, r0
    14c4:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    14c6:	2300      	movs	r3, #0
    14c8:	9301      	str	r3, [sp, #4]
    14ca:	e06d      	b.n	15a8 <_i2c_m_sync_transfer+0x430>
				if (msg->len > 0) {
    14cc:	686b      	ldr	r3, [r5, #4]
    14ce:	2b00      	cmp	r3, #0
    14d0:	dd04      	ble.n	14dc <_i2c_m_sync_transfer+0x364>
					msg->flags |= I2C_M_FAIL;
    14d2:	886b      	ldrh	r3, [r5, #2]
    14d4:	2080      	movs	r0, #128	; 0x80
    14d6:	0140      	lsls	r0, r0, #5
    14d8:	4303      	orrs	r3, r0
    14da:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    14dc:	886b      	ldrh	r3, [r5, #2]
    14de:	b21b      	sxth	r3, r3
    14e0:	2b00      	cmp	r3, #0
    14e2:	db07      	blt.n	14f4 <_i2c_m_sync_transfer+0x37c>
				msg->flags &= ~I2C_M_BUSY;
    14e4:	886b      	ldrh	r3, [r5, #2]
    14e6:	4870      	ldr	r0, [pc, #448]	; (16a8 <_i2c_m_sync_transfer+0x530>)
    14e8:	4003      	ands	r3, r0
    14ea:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    14ec:	2302      	movs	r3, #2
    14ee:	425b      	negs	r3, r3
    14f0:	9301      	str	r3, [sp, #4]
    14f2:	e059      	b.n	15a8 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    14f4:	6860      	ldr	r0, [r4, #4]
    14f6:	23c0      	movs	r3, #192	; 0xc0
    14f8:	029b      	lsls	r3, r3, #10
    14fa:	4303      	orrs	r3, r0
    14fc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14fe:	69e3      	ldr	r3, [r4, #28]
    1500:	421a      	tst	r2, r3
    1502:	d1fc      	bne.n	14fe <_i2c_m_sync_transfer+0x386>
    1504:	e7ee      	b.n	14e4 <_i2c_m_sync_transfer+0x36c>
			if (msg->len == 0) {
    1506:	686b      	ldr	r3, [r5, #4]
    1508:	2b00      	cmp	r3, #0
    150a:	d113      	bne.n	1534 <_i2c_m_sync_transfer+0x3bc>
				if (msg->flags & I2C_M_STOP) {
    150c:	886b      	ldrh	r3, [r5, #2]
    150e:	b21b      	sxth	r3, r3
    1510:	2b00      	cmp	r3, #0
    1512:	db06      	blt.n	1522 <_i2c_m_sync_transfer+0x3aa>
				msg->flags &= ~I2C_M_BUSY;
    1514:	886b      	ldrh	r3, [r5, #2]
    1516:	4864      	ldr	r0, [pc, #400]	; (16a8 <_i2c_m_sync_transfer+0x530>)
    1518:	4003      	ands	r3, r0
    151a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    151c:	2300      	movs	r3, #0
    151e:	9301      	str	r3, [sp, #4]
    1520:	e042      	b.n	15a8 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1522:	6860      	ldr	r0, [r4, #4]
    1524:	23c0      	movs	r3, #192	; 0xc0
    1526:	029b      	lsls	r3, r3, #10
    1528:	4303      	orrs	r3, r0
    152a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    152c:	69e3      	ldr	r3, [r4, #28]
    152e:	421a      	tst	r2, r3
    1530:	d1fc      	bne.n	152c <_i2c_m_sync_transfer+0x3b4>
    1532:	e7ef      	b.n	1514 <_i2c_m_sync_transfer+0x39c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1534:	68ab      	ldr	r3, [r5, #8]
    1536:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1538:	4658      	mov	r0, fp
    153a:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    153c:	69e3      	ldr	r3, [r4, #28]
    153e:	421a      	tst	r2, r3
    1540:	d1fc      	bne.n	153c <_i2c_m_sync_transfer+0x3c4>
				msg->buffer++;
    1542:	68ab      	ldr	r3, [r5, #8]
    1544:	3301      	adds	r3, #1
    1546:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1548:	686b      	ldr	r3, [r5, #4]
    154a:	3b01      	subs	r3, #1
    154c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    154e:	2300      	movs	r3, #0
    1550:	9301      	str	r3, [sp, #4]
    1552:	e029      	b.n	15a8 <_i2c_m_sync_transfer+0x430>
	return I2C_OK;
    1554:	2600      	movs	r6, #0
    1556:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
    1558:	464e      	mov	r6, r9
    155a:	421e      	tst	r6, r3
    155c:	d024      	beq.n	15a8 <_i2c_m_sync_transfer+0x430>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    155e:	686b      	ldr	r3, [r5, #4]
    1560:	2b00      	cmp	r3, #0
    1562:	d04d      	beq.n	1600 <_i2c_m_sync_transfer+0x488>
    1564:	4202      	tst	r2, r0
    1566:	d14b      	bne.n	1600 <_i2c_m_sync_transfer+0x488>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1568:	0eff      	lsrs	r7, r7, #27
    156a:	4660      	mov	r0, ip
    156c:	4007      	ands	r7, r0
			msg->len--;
    156e:	3b01      	subs	r3, #1
    1570:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1572:	2b00      	cmp	r3, #0
    1574:	d000      	beq.n	1578 <_i2c_m_sync_transfer+0x400>
    1576:	e082      	b.n	167e <_i2c_m_sync_transfer+0x506>
    1578:	2f00      	cmp	r7, #0
    157a:	d100      	bne.n	157e <_i2c_m_sync_transfer+0x406>
    157c:	e085      	b.n	168a <_i2c_m_sync_transfer+0x512>
				if (msg->flags & I2C_M_STOP) {
    157e:	886b      	ldrh	r3, [r5, #2]
    1580:	b21b      	sxth	r3, r3
    1582:	2b00      	cmp	r3, #0
    1584:	db2c      	blt.n	15e0 <_i2c_m_sync_transfer+0x468>
				msg->flags &= ~I2C_M_BUSY;
    1586:	886b      	ldrh	r3, [r5, #2]
    1588:	4847      	ldr	r0, [pc, #284]	; (16a8 <_i2c_m_sync_transfer+0x530>)
    158a:	4003      	ands	r3, r0
    158c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    158e:	68a8      	ldr	r0, [r5, #8]
    1590:	1c43      	adds	r3, r0, #1
    1592:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1594:	69e3      	ldr	r3, [r4, #28]
    1596:	421a      	tst	r2, r3
    1598:	d1fc      	bne.n	1594 <_i2c_m_sync_transfer+0x41c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    159a:	465b      	mov	r3, fp
    159c:	5ce3      	ldrb	r3, [r4, r3]
    159e:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    15a0:	464b      	mov	r3, r9
    15a2:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    15a4:	2300      	movs	r3, #0
    15a6:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    15a8:	886b      	ldrh	r3, [r5, #2]
    15aa:	4650      	mov	r0, sl
    15ac:	4203      	tst	r3, r0
    15ae:	d02d      	beq.n	160c <_i2c_m_sync_transfer+0x494>
	void *   hw      = i2c_dev->hw;
    15b0:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    15b2:	7e33      	ldrb	r3, [r6, #24]
    15b4:	b2db      	uxtb	r3, r3
    15b6:	483d      	ldr	r0, [pc, #244]	; (16ac <_i2c_m_sync_transfer+0x534>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    15b8:	4219      	tst	r1, r3
    15ba:	d141      	bne.n	1640 <_i2c_m_sync_transfer+0x4c8>
    15bc:	7e33      	ldrb	r3, [r6, #24]
    15be:	b2db      	uxtb	r3, r3
    15c0:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    15c2:	2800      	cmp	r0, #0
    15c4:	d1f8      	bne.n	15b8 <_i2c_m_sync_transfer+0x440>
			if (msg->flags & I2C_M_STOP) {
    15c6:	4643      	mov	r3, r8
    15c8:	885b      	ldrh	r3, [r3, #2]
    15ca:	b21b      	sxth	r3, r3
    15cc:	2b00      	cmp	r3, #0
    15ce:	da00      	bge.n	15d2 <_i2c_m_sync_transfer+0x45a>
    15d0:	e73e      	b.n	1450 <_i2c_m_sync_transfer+0x2d8>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    15d2:	886b      	ldrh	r3, [r5, #2]
    15d4:	4a34      	ldr	r2, [pc, #208]	; (16a8 <_i2c_m_sync_transfer+0x530>)
    15d6:	4013      	ands	r3, r2
    15d8:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    15da:	2005      	movs	r0, #5
    15dc:	4240      	negs	r0, r0
			return ret;
    15de:	e662      	b.n	12a6 <_i2c_m_sync_transfer+0x12e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    15e0:	6863      	ldr	r3, [r4, #4]
    15e2:	4831      	ldr	r0, [pc, #196]	; (16a8 <_i2c_m_sync_transfer+0x530>)
    15e4:	4003      	ands	r3, r0
    15e6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15e8:	69e3      	ldr	r3, [r4, #28]
    15ea:	421a      	tst	r2, r3
    15ec:	d1fc      	bne.n	15e8 <_i2c_m_sync_transfer+0x470>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15ee:	6860      	ldr	r0, [r4, #4]
    15f0:	23c0      	movs	r3, #192	; 0xc0
    15f2:	029b      	lsls	r3, r3, #10
    15f4:	4303      	orrs	r3, r0
    15f6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15f8:	69e3      	ldr	r3, [r4, #28]
    15fa:	421a      	tst	r2, r3
    15fc:	d1fc      	bne.n	15f8 <_i2c_m_sync_transfer+0x480>
    15fe:	e7c2      	b.n	1586 <_i2c_m_sync_transfer+0x40e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1600:	464b      	mov	r3, r9
    1602:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1604:	2302      	movs	r3, #2
    1606:	425b      	negs	r3, r3
    1608:	9301      	str	r3, [sp, #4]
    160a:	e7cd      	b.n	15a8 <_i2c_m_sync_transfer+0x430>
    160c:	9e01      	ldr	r6, [sp, #4]
    160e:	0030      	movs	r0, r6
    1610:	e649      	b.n	12a6 <_i2c_m_sync_transfer+0x12e>
		return I2C_ERR_BUSY;
    1612:	2006      	movs	r0, #6
    1614:	4240      	negs	r0, r0
    1616:	e646      	b.n	12a6 <_i2c_m_sync_transfer+0x12e>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1618:	2b01      	cmp	r3, #1
    161a:	d000      	beq.n	161e <_i2c_m_sync_transfer+0x4a6>
    161c:	e6e6      	b.n	13ec <_i2c_m_sync_transfer+0x274>
    161e:	2e00      	cmp	r6, #0
    1620:	d100      	bne.n	1624 <_i2c_m_sync_transfer+0x4ac>
    1622:	e6e3      	b.n	13ec <_i2c_m_sync_transfer+0x274>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1624:	687a      	ldr	r2, [r7, #4]
    1626:	2380      	movs	r3, #128	; 0x80
    1628:	02db      	lsls	r3, r3, #11
    162a:	4313      	orrs	r3, r2
    162c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    162e:	2204      	movs	r2, #4
    1630:	69fb      	ldr	r3, [r7, #28]
    1632:	421a      	tst	r2, r3
    1634:	d1fc      	bne.n	1630 <_i2c_m_sync_transfer+0x4b8>
			if (msg->len == 0) {
    1636:	686b      	ldr	r3, [r5, #4]
    1638:	2b00      	cmp	r3, #0
    163a:	d100      	bne.n	163e <_i2c_m_sync_transfer+0x4c6>
    163c:	e6ce      	b.n	13dc <_i2c_m_sync_transfer+0x264>
    163e:	e6d5      	b.n	13ec <_i2c_m_sync_transfer+0x274>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1640:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1642:	69e0      	ldr	r0, [r4, #28]
    1644:	4202      	tst	r2, r0
    1646:	d1fc      	bne.n	1642 <_i2c_m_sync_transfer+0x4ca>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1648:	8b60      	ldrh	r0, [r4, #26]
    164a:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
    164c:	4666      	mov	r6, ip
    164e:	421e      	tst	r6, r3
    1650:	d100      	bne.n	1654 <_i2c_m_sync_transfer+0x4dc>
    1652:	e77f      	b.n	1554 <_i2c_m_sync_transfer+0x3dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1654:	464b      	mov	r3, r9
    1656:	4203      	tst	r3, r0
    1658:	d100      	bne.n	165c <_i2c_m_sync_transfer+0x4e4>
    165a:	e719      	b.n	1490 <_i2c_m_sync_transfer+0x318>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    165c:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    165e:	886b      	ldrh	r3, [r5, #2]
    1660:	2680      	movs	r6, #128	; 0x80
    1662:	0176      	lsls	r6, r6, #5
    1664:	4333      	orrs	r3, r6
    1666:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1668:	886b      	ldrh	r3, [r5, #2]
    166a:	4e0f      	ldr	r6, [pc, #60]	; (16a8 <_i2c_m_sync_transfer+0x530>)
    166c:	4033      	ands	r3, r6
    166e:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1670:	4663      	mov	r3, ip
    1672:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
    1674:	4246      	negs	r6, r0
    1676:	4146      	adcs	r6, r0
    1678:	1f73      	subs	r3, r6, #5
    167a:	9301      	str	r3, [sp, #4]
    167c:	e794      	b.n	15a8 <_i2c_m_sync_transfer+0x430>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    167e:	2b01      	cmp	r3, #1
    1680:	d000      	beq.n	1684 <_i2c_m_sync_transfer+0x50c>
    1682:	e784      	b.n	158e <_i2c_m_sync_transfer+0x416>
    1684:	2f00      	cmp	r7, #0
    1686:	d100      	bne.n	168a <_i2c_m_sync_transfer+0x512>
    1688:	e781      	b.n	158e <_i2c_m_sync_transfer+0x416>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    168a:	6860      	ldr	r0, [r4, #4]
    168c:	2380      	movs	r3, #128	; 0x80
    168e:	02db      	lsls	r3, r3, #11
    1690:	4303      	orrs	r3, r0
    1692:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1694:	69e3      	ldr	r3, [r4, #28]
    1696:	421a      	tst	r2, r3
    1698:	d1fc      	bne.n	1694 <_i2c_m_sync_transfer+0x51c>
			if (msg->len == 0) {
    169a:	686b      	ldr	r3, [r5, #4]
    169c:	2b00      	cmp	r3, #0
    169e:	d100      	bne.n	16a2 <_i2c_m_sync_transfer+0x52a>
    16a0:	e76d      	b.n	157e <_i2c_m_sync_transfer+0x406>
    16a2:	e774      	b.n	158e <_i2c_m_sync_transfer+0x416>
    16a4:	fffffbff 	.word	0xfffffbff
    16a8:	fffffeff 	.word	0xfffffeff
    16ac:	0000ffff 	.word	0x0000ffff

000016b0 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    16b0:	b570      	push	{r4, r5, r6, lr}
    16b2:	0005      	movs	r5, r0
    16b4:	000c      	movs	r4, r1
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    16b6:	4b36      	ldr	r3, [pc, #216]	; (1790 <_spi_m_sync_init+0xe0>)
    16b8:	4299      	cmp	r1, r3
    16ba:	d003      	beq.n	16c4 <_spi_m_sync_init+0x14>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    16bc:	038b      	lsls	r3, r1, #14
		if (sercomspi_regs[i].n == n) {
    16be:	0e1b      	lsrs	r3, r3, #24
    16c0:	2b01      	cmp	r3, #1
    16c2:	d00b      	beq.n	16dc <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    16c4:	2d00      	cmp	r5, #0
    16c6:	d051      	beq.n	176c <_spi_m_sync_init+0xbc>
    16c8:	1e60      	subs	r0, r4, #1
    16ca:	4184      	sbcs	r4, r0
    16cc:	b2e0      	uxtb	r0, r4
    16ce:	4a31      	ldr	r2, [pc, #196]	; (1794 <_spi_m_sync_init+0xe4>)
    16d0:	4931      	ldr	r1, [pc, #196]	; (1798 <_spi_m_sync_init+0xe8>)
    16d2:	4b32      	ldr	r3, [pc, #200]	; (179c <_spi_m_sync_init+0xec>)
    16d4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    16d6:	200d      	movs	r0, #13
    16d8:	4240      	negs	r0, r0
    16da:	e046      	b.n	176a <_spi_m_sync_init+0xba>
	ASSERT(dev && hw);
    16dc:	2800      	cmp	r0, #0
    16de:	d14d      	bne.n	177c <_spi_m_sync_init+0xcc>
    16e0:	4a2c      	ldr	r2, [pc, #176]	; (1794 <_spi_m_sync_init+0xe4>)
    16e2:	492d      	ldr	r1, [pc, #180]	; (1798 <_spi_m_sync_init+0xe8>)
    16e4:	2000      	movs	r0, #0
    16e6:	4b2d      	ldr	r3, [pc, #180]	; (179c <_spi_m_sync_init+0xec>)
    16e8:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    16ea:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    16ec:	07db      	lsls	r3, r3, #31
    16ee:	d418      	bmi.n	1722 <_spi_m_sync_init+0x72>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16f0:	2203      	movs	r2, #3
    16f2:	69e3      	ldr	r3, [r4, #28]
    16f4:	421a      	tst	r2, r3
    16f6:	d1fc      	bne.n	16f2 <_spi_m_sync_init+0x42>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    16f8:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    16fa:	079b      	lsls	r3, r3, #30
    16fc:	d50b      	bpl.n	1716 <_spi_m_sync_init+0x66>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    16fe:	6823      	ldr	r3, [r4, #0]
    1700:	2202      	movs	r2, #2
    1702:	4393      	bics	r3, r2
    1704:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1706:	3201      	adds	r2, #1
    1708:	69e3      	ldr	r3, [r4, #28]
    170a:	421a      	tst	r2, r3
    170c:	d1fc      	bne.n	1708 <_spi_m_sync_init+0x58>
    170e:	2202      	movs	r2, #2
    1710:	69e3      	ldr	r3, [r4, #28]
    1712:	421a      	tst	r2, r3
    1714:	d1fc      	bne.n	1710 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1716:	230d      	movs	r3, #13
    1718:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    171a:	2203      	movs	r2, #3
    171c:	69e3      	ldr	r3, [r4, #28]
    171e:	421a      	tst	r2, r3
    1720:	d1fc      	bne.n	171c <_spi_m_sync_init+0x6c>
    1722:	2201      	movs	r2, #1
    1724:	69e3      	ldr	r3, [r4, #28]
    1726:	421a      	tst	r2, r3
    1728:	d1fc      	bne.n	1724 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    172a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    172c:	0020      	movs	r0, r4
    172e:	1e43      	subs	r3, r0, #1
    1730:	4198      	sbcs	r0, r3
    1732:	b2c0      	uxtb	r0, r0
    1734:	4a1a      	ldr	r2, [pc, #104]	; (17a0 <_spi_m_sync_init+0xf0>)
    1736:	4918      	ldr	r1, [pc, #96]	; (1798 <_spi_m_sync_init+0xe8>)
    1738:	4b18      	ldr	r3, [pc, #96]	; (179c <_spi_m_sync_init+0xec>)
    173a:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    173c:	4b19      	ldr	r3, [pc, #100]	; (17a4 <_spi_m_sync_init+0xf4>)
    173e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1740:	2203      	movs	r2, #3
    1742:	69e3      	ldr	r3, [r4, #28]
    1744:	421a      	tst	r2, r3
    1746:	d1fc      	bne.n	1742 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1748:	2380      	movs	r3, #128	; 0x80
    174a:	029b      	lsls	r3, r3, #10
    174c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    174e:	2207      	movs	r2, #7
    1750:	69e3      	ldr	r3, [r4, #28]
    1752:	421a      	tst	r2, r3
    1754:	d1fc      	bne.n	1750 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1756:	2327      	movs	r3, #39	; 0x27
    1758:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    175a:	2200      	movs	r2, #0
    175c:	3309      	adds	r3, #9
    175e:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1760:	3b2f      	subs	r3, #47	; 0x2f
    1762:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1764:	4b10      	ldr	r3, [pc, #64]	; (17a8 <_spi_m_sync_init+0xf8>)
    1766:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1768:	2000      	movs	r0, #0
}
    176a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    176c:	4a09      	ldr	r2, [pc, #36]	; (1794 <_spi_m_sync_init+0xe4>)
    176e:	490a      	ldr	r1, [pc, #40]	; (1798 <_spi_m_sync_init+0xe8>)
    1770:	2000      	movs	r0, #0
    1772:	4b0a      	ldr	r3, [pc, #40]	; (179c <_spi_m_sync_init+0xec>)
    1774:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1776:	200d      	movs	r0, #13
    1778:	4240      	negs	r0, r0
    177a:	e7f6      	b.n	176a <_spi_m_sync_init+0xba>
	ASSERT(dev && hw);
    177c:	0008      	movs	r0, r1
    177e:	1e43      	subs	r3, r0, #1
    1780:	4198      	sbcs	r0, r3
    1782:	b2c0      	uxtb	r0, r0
    1784:	4a03      	ldr	r2, [pc, #12]	; (1794 <_spi_m_sync_init+0xe4>)
    1786:	4904      	ldr	r1, [pc, #16]	; (1798 <_spi_m_sync_init+0xe8>)
    1788:	4b04      	ldr	r3, [pc, #16]	; (179c <_spi_m_sync_init+0xec>)
    178a:	4798      	blx	r3
    178c:	e7ad      	b.n	16ea <_spi_m_sync_init+0x3a>
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	43000400 	.word	0x43000400
    1794:	0000091e 	.word	0x0000091e
    1798:	000027fc 	.word	0x000027fc
    179c:	00000bc1 	.word	0x00000bc1
    17a0:	000008e8 	.word	0x000008e8
    17a4:	0020000c 	.word	0x0020000c
    17a8:	000001ff 	.word	0x000001ff

000017ac <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    17ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ae:	46de      	mov	lr, fp
    17b0:	4657      	mov	r7, sl
    17b2:	464e      	mov	r6, r9
    17b4:	4645      	mov	r5, r8
    17b6:	b5e0      	push	{r5, r6, r7, lr}
    17b8:	b083      	sub	sp, #12
    17ba:	4681      	mov	r9, r0
    17bc:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    17be:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    17c0:	680b      	ldr	r3, [r1, #0]
    17c2:	4698      	mov	r8, r3
    17c4:	684d      	ldr	r5, [r1, #4]
    17c6:	7903      	ldrb	r3, [r0, #4]
    17c8:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    17ca:	2800      	cmp	r0, #0
    17cc:	d015      	beq.n	17fa <_spi_m_sync_trans+0x4e>
    17ce:	0020      	movs	r0, r4
    17d0:	1e43      	subs	r3, r0, #1
    17d2:	4198      	sbcs	r0, r3
    17d4:	b2c0      	uxtb	r0, r0
    17d6:	4a36      	ldr	r2, [pc, #216]	; (18b0 <_spi_m_sync_trans+0x104>)
    17d8:	4936      	ldr	r1, [pc, #216]	; (18b4 <_spi_m_sync_trans+0x108>)
    17da:	4b37      	ldr	r3, [pc, #220]	; (18b8 <_spi_m_sync_trans+0x10c>)
    17dc:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    17de:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    17e0:	075b      	lsls	r3, r3, #29
    17e2:	d13f      	bne.n	1864 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17e4:	2303      	movs	r3, #3
    17e6:	69e0      	ldr	r0, [r4, #28]
    17e8:	4018      	ands	r0, r3
    17ea:	d1fc      	bne.n	17e6 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17ec:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    17ee:	079b      	lsls	r3, r3, #30
    17f0:	d53b      	bpl.n	186a <_spi_m_sync_trans+0xbe>
    17f2:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    17f4:	2301      	movs	r3, #1
    17f6:	469c      	mov	ip, r3
    17f8:	e009      	b.n	180e <_spi_m_sync_trans+0x62>
    17fa:	2000      	movs	r0, #0
    17fc:	e7eb      	b.n	17d6 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    17fe:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1800:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1802:	b25b      	sxtb	r3, r3
    1804:	2b00      	cmp	r3, #0
    1806:	db16      	blt.n	1836 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1808:	68b3      	ldr	r3, [r6, #8]
    180a:	4283      	cmp	r3, r0
    180c:	d927      	bls.n	185e <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    180e:	7e23      	ldrb	r3, [r4, #24]
    1810:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1812:	2104      	movs	r1, #4
    1814:	4219      	tst	r1, r3
    1816:	d02b      	beq.n	1870 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1818:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    181a:	2d00      	cmp	r5, #0
    181c:	d0f0      	beq.n	1800 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    181e:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1820:	9901      	ldr	r1, [sp, #4]
    1822:	2901      	cmp	r1, #1
    1824:	d9eb      	bls.n	17fe <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1826:	0a3f      	lsrs	r7, r7, #8
    1828:	706f      	strb	r7, [r5, #1]
    182a:	3502      	adds	r5, #2
    182c:	e7e8      	b.n	1800 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    182e:	2101      	movs	r1, #1
    1830:	468b      	mov	fp, r1
    1832:	44d8      	add	r8, fp
    1834:	e037      	b.n	18a6 <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1836:	2301      	movs	r3, #1
    1838:	425b      	negs	r3, r3
    183a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    183c:	3381      	adds	r3, #129	; 0x81
    183e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1840:	2013      	movs	r0, #19
    1842:	4240      	negs	r0, r0
	tmp &= mask;
    1844:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1846:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1848:	4213      	tst	r3, r2
    184a:	d0fc      	beq.n	1846 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    184c:	2303      	movs	r3, #3
    184e:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1850:	b003      	add	sp, #12
    1852:	bc3c      	pop	{r2, r3, r4, r5}
    1854:	4690      	mov	r8, r2
    1856:	4699      	mov	r9, r3
    1858:	46a2      	mov	sl, r4
    185a:	46ab      	mov	fp, r5
    185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    185e:	4293      	cmp	r3, r2
    1860:	d8d5      	bhi.n	180e <_spi_m_sync_trans+0x62>
    1862:	e7ef      	b.n	1844 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    1864:	2004      	movs	r0, #4
    1866:	4240      	negs	r0, r0
    1868:	e7f2      	b.n	1850 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    186a:	2014      	movs	r0, #20
    186c:	4240      	negs	r0, r0
    186e:	e7ef      	b.n	1850 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1870:	4290      	cmp	r0, r2
    1872:	d8c6      	bhi.n	1802 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1874:	4667      	mov	r7, ip
    1876:	421f      	tst	r7, r3
    1878:	d0c3      	beq.n	1802 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    187a:	464f      	mov	r7, r9
    187c:	88ff      	ldrh	r7, [r7, #6]
    187e:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    1880:	4647      	mov	r7, r8
    1882:	2f00      	cmp	r7, #0
    1884:	d00f      	beq.n	18a6 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    1886:	783f      	ldrb	r7, [r7, #0]
    1888:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    188a:	9901      	ldr	r1, [sp, #4]
    188c:	2901      	cmp	r1, #1
    188e:	d9ce      	bls.n	182e <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    1890:	4647      	mov	r7, r8
    1892:	787f      	ldrb	r7, [r7, #1]
    1894:	023f      	lsls	r7, r7, #8
    1896:	46bb      	mov	fp, r7
    1898:	4657      	mov	r7, sl
    189a:	4659      	mov	r1, fp
    189c:	430f      	orrs	r7, r1
    189e:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    18a0:	2102      	movs	r1, #2
    18a2:	468b      	mov	fp, r1
    18a4:	44d8      	add	r8, fp
	ctrl->txcnt++;
    18a6:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    18a8:	4657      	mov	r7, sl
    18aa:	62a7      	str	r7, [r4, #40]	; 0x28
    18ac:	e7a9      	b.n	1802 <_spi_m_sync_trans+0x56>
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	00000a7e 	.word	0x00000a7e
    18b4:	000027fc 	.word	0x000027fc
    18b8:	00000bc1 	.word	0x00000bc1

000018bc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    18bc:	2000      	movs	r0, #0
    18be:	4770      	bx	lr

000018c0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    18c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    18c2:	7c83      	ldrb	r3, [r0, #18]
    18c4:	220f      	movs	r2, #15
    18c6:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    18c8:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    18ca:	3a08      	subs	r2, #8
    18cc:	400a      	ands	r2, r1
    18ce:	2a01      	cmp	r2, #1
    18d0:	d00b      	beq.n	18ea <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18d2:	015a      	lsls	r2, r3, #5
    18d4:	491a      	ldr	r1, [pc, #104]	; (1940 <_usb_d_dev_handle_setup+0x80>)
    18d6:	468c      	mov	ip, r1
    18d8:	4462      	add	r2, ip
    18da:	2110      	movs	r1, #16
    18dc:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    18de:	015b      	lsls	r3, r3, #5
    18e0:	4a18      	ldr	r2, [pc, #96]	; (1944 <_usb_d_dev_handle_setup+0x84>)
    18e2:	4694      	mov	ip, r2
    18e4:	4463      	add	r3, ip
    18e6:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    18e8:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    18ea:	064a      	lsls	r2, r1, #25
    18ec:	d50f      	bpl.n	190e <_usb_d_dev_handle_setup+0x4e>
		ept->flags.bits.is_busy = 0;
    18ee:	7cc2      	ldrb	r2, [r0, #19]
    18f0:	2140      	movs	r1, #64	; 0x40
    18f2:	438a      	bics	r2, r1
    18f4:	74c2      	strb	r2, [r0, #19]
    18f6:	015a      	lsls	r2, r3, #5
    18f8:	2482      	movs	r4, #130	; 0x82
    18fa:	05e4      	lsls	r4, r4, #23
    18fc:	46a4      	mov	ip, r4
    18fe:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1900:	2580      	movs	r5, #128	; 0x80
    1902:	2482      	movs	r4, #130	; 0x82
    1904:	0064      	lsls	r4, r4, #1
    1906:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1908:	2406      	movs	r4, #6
    190a:	34ff      	adds	r4, #255	; 0xff
    190c:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    190e:	7cc2      	ldrb	r2, [r0, #19]
    1910:	2108      	movs	r1, #8
    1912:	438a      	bics	r2, r1
    1914:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1916:	490c      	ldr	r1, [pc, #48]	; (1948 <_usb_d_dev_handle_setup+0x88>)
    1918:	015a      	lsls	r2, r3, #5
    191a:	188c      	adds	r4, r1, r2
    191c:	2500      	movs	r5, #0
    191e:	72a5      	strb	r5, [r4, #10]
    1920:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1922:	0013      	movs	r3, r2
    1924:	4c06      	ldr	r4, [pc, #24]	; (1940 <_usb_d_dev_handle_setup+0x80>)
    1926:	46a4      	mov	ip, r4
    1928:	4463      	add	r3, ip
    192a:	246f      	movs	r4, #111	; 0x6f
    192c:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    192e:	4b05      	ldr	r3, [pc, #20]	; (1944 <_usb_d_dev_handle_setup+0x84>)
    1930:	469c      	mov	ip, r3
    1932:	4462      	add	r2, ip
    1934:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    1936:	7c80      	ldrb	r0, [r0, #18]
    1938:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    193a:	4798      	blx	r3
    193c:	e7d4      	b.n	18e8 <_usb_d_dev_handle_setup+0x28>
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	41000100 	.word	0x41000100
    1944:	41000108 	.word	0x41000108
    1948:	200000a0 	.word	0x200000a0

0000194c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    194c:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    194e:	2220      	movs	r2, #32
    1950:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1952:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1954:	7c81      	ldrb	r1, [r0, #18]
    1956:	230f      	movs	r3, #15
    1958:	400b      	ands	r3, r1
    195a:	015b      	lsls	r3, r3, #5
    195c:	4905      	ldr	r1, [pc, #20]	; (1974 <_usb_d_dev_handle_stall+0x28>)
    195e:	468c      	mov	ip, r1
    1960:	4463      	add	r3, ip
    1962:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1964:	6882      	ldr	r2, [r0, #8]
    1966:	7c80      	ldrb	r0, [r0, #18]
    1968:	4b03      	ldr	r3, [pc, #12]	; (1978 <_usb_d_dev_handle_stall+0x2c>)
    196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    196c:	2101      	movs	r1, #1
    196e:	4798      	blx	r3
}
    1970:	bd10      	pop	{r4, pc}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	41000108 	.word	0x41000108
    1978:	200000a0 	.word	0x200000a0

0000197c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    197c:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    197e:	7c83      	ldrb	r3, [r0, #18]
    1980:	2bff      	cmp	r3, #255	; 0xff
    1982:	d002      	beq.n	198a <_usb_d_dev_trans_done+0xe>
    1984:	7cc2      	ldrb	r2, [r0, #19]
    1986:	0652      	lsls	r2, r2, #25
    1988:	d400      	bmi.n	198c <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    198a:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    198c:	7cc2      	ldrb	r2, [r0, #19]
    198e:	2440      	movs	r4, #64	; 0x40
    1990:	43a2      	bics	r2, r4
    1992:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1994:	6882      	ldr	r2, [r0, #8]
    1996:	4802      	ldr	r0, [pc, #8]	; (19a0 <_usb_d_dev_trans_done+0x24>)
    1998:	6f04      	ldr	r4, [r0, #112]	; 0x70
    199a:	0018      	movs	r0, r3
    199c:	47a0      	blx	r4
    199e:	e7f4      	b.n	198a <_usb_d_dev_trans_done+0xe>
    19a0:	200000a0 	.word	0x200000a0

000019a4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    19a4:	b530      	push	{r4, r5, lr}
    19a6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    19a8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    19aa:	ac01      	add	r4, sp, #4
    19ac:	2525      	movs	r5, #37	; 0x25
    19ae:	7025      	strb	r5, [r4, #0]
    19b0:	3525      	adds	r5, #37	; 0x25
    19b2:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    19b4:	2bff      	cmp	r3, #255	; 0xff
    19b6:	d01b      	beq.n	19f0 <_usb_d_dev_trans_stop+0x4c>
    19b8:	7cc4      	ldrb	r4, [r0, #19]
    19ba:	0664      	lsls	r4, r4, #25
    19bc:	d518      	bpl.n	19f0 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    19be:	240f      	movs	r4, #15
    19c0:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    19c2:	2900      	cmp	r1, #0
    19c4:	d016      	beq.n	19f4 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    19c6:	015c      	lsls	r4, r3, #5
    19c8:	4d0e      	ldr	r5, [pc, #56]	; (1a04 <_usb_d_dev_trans_stop+0x60>)
    19ca:	46ac      	mov	ip, r5
    19cc:	4464      	add	r4, ip
    19ce:	2580      	movs	r5, #128	; 0x80
    19d0:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    19d2:	ac01      	add	r4, sp, #4
    19d4:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    19d6:	0159      	lsls	r1, r3, #5
    19d8:	4d0a      	ldr	r5, [pc, #40]	; (1a04 <_usb_d_dev_trans_stop+0x60>)
    19da:	46ac      	mov	ip, r5
    19dc:	4461      	add	r1, ip
    19de:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    19e0:	015b      	lsls	r3, r3, #5
    19e2:	4909      	ldr	r1, [pc, #36]	; (1a08 <_usb_d_dev_trans_stop+0x64>)
    19e4:	468c      	mov	ip, r1
    19e6:	4463      	add	r3, ip
    19e8:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    19ea:	0011      	movs	r1, r2
    19ec:	4b07      	ldr	r3, [pc, #28]	; (1a0c <_usb_d_dev_trans_stop+0x68>)
    19ee:	4798      	blx	r3
}
    19f0:	b003      	add	sp, #12
    19f2:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19f4:	015c      	lsls	r4, r3, #5
    19f6:	4d03      	ldr	r5, [pc, #12]	; (1a04 <_usb_d_dev_trans_stop+0x60>)
    19f8:	46ac      	mov	ip, r5
    19fa:	4464      	add	r4, ip
    19fc:	2540      	movs	r5, #64	; 0x40
    19fe:	7165      	strb	r5, [r4, #5]
    1a00:	e7e7      	b.n	19d2 <_usb_d_dev_trans_stop+0x2e>
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	41000100 	.word	0x41000100
    1a08:	41000108 	.word	0x41000108
    1a0c:	0000197d 	.word	0x0000197d

00001a10 <_usb_d_dev_handle_trfail>:
{
    1a10:	b570      	push	{r4, r5, r6, lr}
    1a12:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1a14:	7c83      	ldrb	r3, [r0, #18]
    1a16:	220f      	movs	r2, #15
    1a18:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1a1a:	aa01      	add	r2, sp, #4
    1a1c:	2404      	movs	r4, #4
    1a1e:	7014      	strb	r4, [r2, #0]
    1a20:	3404      	adds	r4, #4
    1a22:	7054      	strb	r4, [r2, #1]
    1a24:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    1a26:	2900      	cmp	r1, #0
    1a28:	d032      	beq.n	1a90 <_usb_d_dev_handle_trfail+0x80>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1a2a:	001a      	movs	r2, r3
    1a2c:	3208      	adds	r2, #8
    1a2e:	0152      	lsls	r2, r2, #5
    1a30:	2482      	movs	r4, #130	; 0x82
    1a32:	05e4      	lsls	r4, r4, #23
    1a34:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1a36:	0664      	lsls	r4, r4, #25
    1a38:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1a3a:	010a      	lsls	r2, r1, #4
    1a3c:	1952      	adds	r2, r2, r5
    1a3e:	4d30      	ldr	r5, [pc, #192]	; (1b00 <_usb_d_dev_handle_trfail+0xf0>)
    1a40:	18aa      	adds	r2, r5, r2
    1a42:	7a95      	ldrb	r5, [r2, #10]
    1a44:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1a46:	2c02      	cmp	r4, #2
    1a48:	d02b      	beq.n	1aa2 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1a4a:	07ac      	lsls	r4, r5, #30
    1a4c:	d542      	bpl.n	1ad4 <_usb_d_dev_handle_trfail+0xc4>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1a4e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1a50:	7a94      	ldrb	r4, [r2, #10]
    1a52:	2602      	movs	r6, #2
    1a54:	43b4      	bics	r4, r6
    1a56:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1a58:	aa01      	add	r2, sp, #4
    1a5a:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a5c:	015a      	lsls	r2, r3, #5
    1a5e:	4e29      	ldr	r6, [pc, #164]	; (1b04 <_usb_d_dev_handle_trfail+0xf4>)
    1a60:	46b4      	mov	ip, r6
    1a62:	4462      	add	r2, ip
    1a64:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1a66:	015b      	lsls	r3, r3, #5
    1a68:	4a27      	ldr	r2, [pc, #156]	; (1b08 <_usb_d_dev_handle_trfail+0xf8>)
    1a6a:	4694      	mov	ip, r2
    1a6c:	4463      	add	r3, ip
    1a6e:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1a70:	2307      	movs	r3, #7
    1a72:	402b      	ands	r3, r5
    1a74:	2b01      	cmp	r3, #1
    1a76:	d140      	bne.n	1afa <_usb_d_dev_handle_trfail+0xea>
    1a78:	7cc3      	ldrb	r3, [r0, #19]
    1a7a:	065b      	lsls	r3, r3, #25
    1a7c:	d53d      	bpl.n	1afa <_usb_d_dev_handle_trfail+0xea>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1a7e:	7cc3      	ldrb	r3, [r0, #19]
    1a80:	09db      	lsrs	r3, r3, #7
    1a82:	4299      	cmp	r1, r3
    1a84:	d039      	beq.n	1afa <_usb_d_dev_handle_trfail+0xea>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1a86:	2200      	movs	r2, #0
    1a88:	0019      	movs	r1, r3
    1a8a:	4b20      	ldr	r3, [pc, #128]	; (1b0c <_usb_d_dev_handle_trfail+0xfc>)
    1a8c:	4798      	blx	r3
    1a8e:	e034      	b.n	1afa <_usb_d_dev_handle_trfail+0xea>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1a90:	001a      	movs	r2, r3
    1a92:	3208      	adds	r2, #8
    1a94:	0152      	lsls	r2, r2, #5
    1a96:	2482      	movs	r4, #130	; 0x82
    1a98:	05e4      	lsls	r4, r4, #23
    1a9a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1a9c:	2207      	movs	r2, #7
    1a9e:	4014      	ands	r4, r2
    1aa0:	e7cb      	b.n	1a3a <_usb_d_dev_handle_trfail+0x2a>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1aa2:	07ec      	lsls	r4, r5, #31
    1aa4:	d5d1      	bpl.n	1a4a <_usb_d_dev_handle_trfail+0x3a>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1aa6:	7a94      	ldrb	r4, [r2, #10]
    1aa8:	2501      	movs	r5, #1
    1aaa:	43ac      	bics	r4, r5
    1aac:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1aae:	aa01      	add	r2, sp, #4
    1ab0:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ab2:	015a      	lsls	r2, r3, #5
    1ab4:	4d13      	ldr	r5, [pc, #76]	; (1b04 <_usb_d_dev_handle_trfail+0xf4>)
    1ab6:	46ac      	mov	ip, r5
    1ab8:	4462      	add	r2, ip
    1aba:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1abc:	015b      	lsls	r3, r3, #5
    1abe:	4a12      	ldr	r2, [pc, #72]	; (1b08 <_usb_d_dev_handle_trfail+0xf8>)
    1ac0:	4694      	mov	ip, r2
    1ac2:	4463      	add	r3, ip
    1ac4:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1ac6:	1e4b      	subs	r3, r1, #1
    1ac8:	4199      	sbcs	r1, r3
    1aca:	b2c9      	uxtb	r1, r1
    1acc:	2204      	movs	r2, #4
    1ace:	4b0f      	ldr	r3, [pc, #60]	; (1b0c <_usb_d_dev_handle_trfail+0xfc>)
    1ad0:	4798      	blx	r3
    1ad2:	e012      	b.n	1afa <_usb_d_dev_handle_trfail+0xea>
	bank->STATUS_BK.reg     = 0;
    1ad4:	005a      	lsls	r2, r3, #1
    1ad6:	1852      	adds	r2, r2, r1
    1ad8:	0112      	lsls	r2, r2, #4
    1ada:	4809      	ldr	r0, [pc, #36]	; (1b00 <_usb_d_dev_handle_trfail+0xf0>)
    1adc:	1882      	adds	r2, r0, r2
    1ade:	2000      	movs	r0, #0
    1ae0:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1ae2:	aa01      	add	r2, sp, #4
    1ae4:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ae6:	015a      	lsls	r2, r3, #5
    1ae8:	4806      	ldr	r0, [pc, #24]	; (1b04 <_usb_d_dev_handle_trfail+0xf4>)
    1aea:	4684      	mov	ip, r0
    1aec:	4462      	add	r2, ip
    1aee:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1af0:	015b      	lsls	r3, r3, #5
    1af2:	4a05      	ldr	r2, [pc, #20]	; (1b08 <_usb_d_dev_handle_trfail+0xf8>)
    1af4:	4694      	mov	ip, r2
    1af6:	4463      	add	r3, ip
    1af8:	7019      	strb	r1, [r3, #0]
}
    1afa:	b002      	add	sp, #8
    1afc:	bd70      	pop	{r4, r5, r6, pc}
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	200000a0 	.word	0x200000a0
    1b04:	41000100 	.word	0x41000100
    1b08:	41000108 	.word	0x41000108
    1b0c:	000019a5 	.word	0x000019a5

00001b10 <_usb_d_dev_reset_epts>:
{
    1b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b12:	46c6      	mov	lr, r8
    1b14:	b500      	push	{lr}
    1b16:	4d0c      	ldr	r5, [pc, #48]	; (1b48 <_usb_d_dev_reset_epts+0x38>)
    1b18:	002c      	movs	r4, r5
    1b1a:	3474      	adds	r4, #116	; 0x74
    1b1c:	3529      	adds	r5, #41	; 0x29
    1b1e:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1b20:	4b0a      	ldr	r3, [pc, #40]	; (1b4c <_usb_d_dev_reset_epts+0x3c>)
    1b22:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1b24:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1b26:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1b28:	2103      	movs	r1, #3
    1b2a:	0020      	movs	r0, r4
    1b2c:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1b2e:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1b30:	74e6      	strb	r6, [r4, #19]
    1b32:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1b34:	42ac      	cmp	r4, r5
    1b36:	d1f7      	bne.n	1b28 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1b38:	2260      	movs	r2, #96	; 0x60
    1b3a:	2100      	movs	r1, #0
    1b3c:	4802      	ldr	r0, [pc, #8]	; (1b48 <_usb_d_dev_reset_epts+0x38>)
    1b3e:	4b04      	ldr	r3, [pc, #16]	; (1b50 <_usb_d_dev_reset_epts+0x40>)
    1b40:	4798      	blx	r3
}
    1b42:	bc04      	pop	{r2}
    1b44:	4690      	mov	r8, r2
    1b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b48:	200000a0 	.word	0x200000a0
    1b4c:	0000197d 	.word	0x0000197d
    1b50:	000026e3 	.word	0x000026e3

00001b54 <_usb_d_dev_in_next>:
{
    1b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b56:	46c6      	mov	lr, r8
    1b58:	b500      	push	{lr}
    1b5a:	0004      	movs	r4, r0
    1b5c:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1b5e:	7c83      	ldrb	r3, [r0, #18]
    1b60:	250f      	movs	r5, #15
    1b62:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1b64:	2900      	cmp	r1, #0
    1b66:	d100      	bne.n	1b6a <_usb_d_dev_in_next+0x16>
    1b68:	e0aa      	b.n	1cc0 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1b6a:	016a      	lsls	r2, r5, #5
    1b6c:	4b5a      	ldr	r3, [pc, #360]	; (1cd8 <_usb_d_dev_in_next+0x184>)
    1b6e:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1b70:	6958      	ldr	r0, [r3, #20]
    1b72:	0480      	lsls	r0, r0, #18
    1b74:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1b76:	8a23      	ldrh	r3, [r4, #16]
    1b78:	4a58      	ldr	r2, [pc, #352]	; (1cdc <_usb_d_dev_in_next+0x188>)
    1b7a:	4293      	cmp	r3, r2
    1b7c:	d100      	bne.n	1b80 <_usb_d_dev_in_next+0x2c>
    1b7e:	e09a      	b.n	1cb6 <_usb_d_dev_in_next+0x162>
    1b80:	3b01      	subs	r3, #1
    1b82:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1b84:	7ce3      	ldrb	r3, [r4, #19]
    1b86:	2707      	movs	r7, #7
    1b88:	401f      	ands	r7, r3
	if (isr) {
    1b8a:	2e00      	cmp	r6, #0
    1b8c:	d005      	beq.n	1b9a <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b8e:	016b      	lsls	r3, r5, #5
    1b90:	4953      	ldr	r1, [pc, #332]	; (1ce0 <_usb_d_dev_in_next+0x18c>)
    1b92:	468c      	mov	ip, r1
    1b94:	4463      	add	r3, ip
    1b96:	2102      	movs	r1, #2
    1b98:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1b9a:	68a3      	ldr	r3, [r4, #8]
    1b9c:	18c1      	adds	r1, r0, r3
    1b9e:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1ba0:	6863      	ldr	r3, [r4, #4]
    1ba2:	4299      	cmp	r1, r3
    1ba4:	d24a      	bcs.n	1c3c <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1ba6:	1a5b      	subs	r3, r3, r1
    1ba8:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1baa:	7ce2      	ldrb	r2, [r4, #19]
    1bac:	0692      	lsls	r2, r2, #26
    1bae:	d535      	bpl.n	1c1c <_usb_d_dev_in_next+0xc8>
    1bb0:	8a22      	ldrh	r2, [r4, #16]
    1bb2:	1c10      	adds	r0, r2, #0
    1bb4:	b292      	uxth	r2, r2
    1bb6:	429a      	cmp	r2, r3
    1bb8:	d900      	bls.n	1bbc <_usb_d_dev_in_next+0x68>
    1bba:	1c18      	adds	r0, r3, #0
    1bbc:	b283      	uxth	r3, r0
    1bbe:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1bc0:	6823      	ldr	r3, [r4, #0]
    1bc2:	469c      	mov	ip, r3
    1bc4:	4461      	add	r1, ip
    1bc6:	4642      	mov	r2, r8
    1bc8:	68e0      	ldr	r0, [r4, #12]
    1bca:	4b46      	ldr	r3, [pc, #280]	; (1ce4 <_usb_d_dev_in_next+0x190>)
    1bcc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1bce:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1bd0:	016a      	lsls	r2, r5, #5
    1bd2:	4b41      	ldr	r3, [pc, #260]	; (1cd8 <_usb_d_dev_in_next+0x184>)
    1bd4:	189b      	adds	r3, r3, r2
    1bd6:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1bd8:	016a      	lsls	r2, r5, #5
    1bda:	4b3f      	ldr	r3, [pc, #252]	; (1cd8 <_usb_d_dev_in_next+0x184>)
    1bdc:	189b      	adds	r3, r3, r2
    1bde:	695a      	ldr	r2, [r3, #20]
    1be0:	4641      	mov	r1, r8
    1be2:	0489      	lsls	r1, r1, #18
    1be4:	0c89      	lsrs	r1, r1, #18
    1be6:	0b92      	lsrs	r2, r2, #14
    1be8:	0392      	lsls	r2, r2, #14
    1bea:	430a      	orrs	r2, r1
    1bec:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1bee:	695a      	ldr	r2, [r3, #20]
    1bf0:	493d      	ldr	r1, [pc, #244]	; (1ce8 <_usb_d_dev_in_next+0x194>)
    1bf2:	400a      	ands	r2, r1
    1bf4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1bf6:	2e00      	cmp	r6, #0
    1bf8:	d107      	bne.n	1c0a <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1bfa:	2f01      	cmp	r7, #1
    1bfc:	d059      	beq.n	1cb2 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1bfe:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1c00:	016b      	lsls	r3, r5, #5
    1c02:	493a      	ldr	r1, [pc, #232]	; (1cec <_usb_d_dev_in_next+0x198>)
    1c04:	468c      	mov	ip, r1
    1c06:	4463      	add	r3, ip
    1c08:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c0a:	016d      	lsls	r5, r5, #5
    1c0c:	4b34      	ldr	r3, [pc, #208]	; (1ce0 <_usb_d_dev_in_next+0x18c>)
    1c0e:	469c      	mov	ip, r3
    1c10:	4465      	add	r5, ip
    1c12:	2380      	movs	r3, #128	; 0x80
    1c14:	716b      	strb	r3, [r5, #5]
}
    1c16:	bc04      	pop	{r2}
    1c18:	4690      	mov	r8, r2
    1c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c1c:	1c1a      	adds	r2, r3, #0
    1c1e:	2080      	movs	r0, #128	; 0x80
    1c20:	0180      	lsls	r0, r0, #6
    1c22:	4283      	cmp	r3, r0
    1c24:	d901      	bls.n	1c2a <_usb_d_dev_in_next+0xd6>
    1c26:	4b32      	ldr	r3, [pc, #200]	; (1cf0 <_usb_d_dev_in_next+0x19c>)
    1c28:	881a      	ldrh	r2, [r3, #0]
    1c2a:	b293      	uxth	r3, r2
    1c2c:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1c2e:	6823      	ldr	r3, [r4, #0]
    1c30:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1c32:	016a      	lsls	r2, r5, #5
    1c34:	4b28      	ldr	r3, [pc, #160]	; (1cd8 <_usb_d_dev_in_next+0x184>)
    1c36:	189b      	adds	r3, r3, r2
    1c38:	6119      	str	r1, [r3, #16]
    1c3a:	e7cd      	b.n	1bd8 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1c3c:	7ce3      	ldrb	r3, [r4, #19]
    1c3e:	06db      	lsls	r3, r3, #27
    1c40:	d50f      	bpl.n	1c62 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1c42:	7ce3      	ldrb	r3, [r4, #19]
    1c44:	2210      	movs	r2, #16
    1c46:	4393      	bics	r3, r2
    1c48:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1c4a:	016a      	lsls	r2, r5, #5
    1c4c:	4b22      	ldr	r3, [pc, #136]	; (1cd8 <_usb_d_dev_in_next+0x184>)
    1c4e:	189b      	adds	r3, r3, r2
    1c50:	695a      	ldr	r2, [r3, #20]
    1c52:	0b92      	lsrs	r2, r2, #14
    1c54:	0392      	lsls	r2, r2, #14
    1c56:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1c58:	695a      	ldr	r2, [r3, #20]
    1c5a:	4923      	ldr	r1, [pc, #140]	; (1ce8 <_usb_d_dev_in_next+0x194>)
    1c5c:	400a      	ands	r2, r1
    1c5e:	615a      	str	r2, [r3, #20]
    1c60:	e7c9      	b.n	1bf6 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1c62:	2f01      	cmp	r7, #1
    1c64:	d00e      	beq.n	1c84 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c66:	016d      	lsls	r5, r5, #5
    1c68:	4b22      	ldr	r3, [pc, #136]	; (1cf4 <_usb_d_dev_in_next+0x1a0>)
    1c6a:	469c      	mov	ip, r3
    1c6c:	4465      	add	r5, ip
    1c6e:	234a      	movs	r3, #74	; 0x4a
    1c70:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1c72:	8a21      	ldrh	r1, [r4, #16]
    1c74:	4002      	ands	r2, r0
    1c76:	4291      	cmp	r1, r2
    1c78:	d00b      	beq.n	1c92 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1c7a:	2100      	movs	r1, #0
    1c7c:	0020      	movs	r0, r4
    1c7e:	4b1e      	ldr	r3, [pc, #120]	; (1cf8 <_usb_d_dev_in_next+0x1a4>)
    1c80:	4798      	blx	r3
	return;
    1c82:	e7c8      	b.n	1c16 <_usb_d_dev_in_next+0xc2>
    1c84:	016d      	lsls	r5, r5, #5
    1c86:	4b1b      	ldr	r3, [pc, #108]	; (1cf4 <_usb_d_dev_in_next+0x1a0>)
    1c88:	469c      	mov	ip, r3
    1c8a:	4465      	add	r5, ip
    1c8c:	234b      	movs	r3, #75	; 0x4b
    1c8e:	702b      	strb	r3, [r5, #0]
    1c90:	e7ef      	b.n	1c72 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1c92:	7ce3      	ldrb	r3, [r4, #19]
    1c94:	2240      	movs	r2, #64	; 0x40
    1c96:	4393      	bics	r3, r2
    1c98:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1c9a:	7ca0      	ldrb	r0, [r4, #18]
    1c9c:	4b0e      	ldr	r3, [pc, #56]	; (1cd8 <_usb_d_dev_in_next+0x184>)
    1c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1ca0:	68a1      	ldr	r1, [r4, #8]
    1ca2:	4798      	blx	r3
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d1b6      	bne.n	1c16 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1ca8:	7ce3      	ldrb	r3, [r4, #19]
    1caa:	2240      	movs	r2, #64	; 0x40
    1cac:	4313      	orrs	r3, r2
    1cae:	74e3      	strb	r3, [r4, #19]
    1cb0:	e7e3      	b.n	1c7a <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1cb2:	224e      	movs	r2, #78	; 0x4e
    1cb4:	e7a4      	b.n	1c00 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1cb6:	7ce7      	ldrb	r7, [r4, #19]
    1cb8:	2307      	movs	r3, #7
    1cba:	401f      	ands	r7, r3
    1cbc:	4a07      	ldr	r2, [pc, #28]	; (1cdc <_usb_d_dev_in_next+0x188>)
    1cbe:	e766      	b.n	1b8e <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1cc0:	8a03      	ldrh	r3, [r0, #16]
    1cc2:	4a06      	ldr	r2, [pc, #24]	; (1cdc <_usb_d_dev_in_next+0x188>)
    1cc4:	2000      	movs	r0, #0
    1cc6:	4293      	cmp	r3, r2
    1cc8:	d000      	beq.n	1ccc <_usb_d_dev_in_next+0x178>
    1cca:	e759      	b.n	1b80 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1ccc:	7ce3      	ldrb	r3, [r4, #19]
    1cce:	2707      	movs	r7, #7
    1cd0:	401f      	ands	r7, r3
    1cd2:	2000      	movs	r0, #0
    1cd4:	4a01      	ldr	r2, [pc, #4]	; (1cdc <_usb_d_dev_in_next+0x188>)
    1cd6:	e760      	b.n	1b9a <_usb_d_dev_in_next+0x46>
    1cd8:	200000a0 	.word	0x200000a0
    1cdc:	000003ff 	.word	0x000003ff
    1ce0:	41000100 	.word	0x41000100
    1ce4:	000026d1 	.word	0x000026d1
    1ce8:	f0003fff 	.word	0xf0003fff
    1cec:	41000109 	.word	0x41000109
    1cf0:	00002818 	.word	0x00002818
    1cf4:	41000108 	.word	0x41000108
    1cf8:	0000197d 	.word	0x0000197d

00001cfc <_usb_d_dev_out_next>:
{
    1cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cfe:	46de      	mov	lr, fp
    1d00:	4657      	mov	r7, sl
    1d02:	464e      	mov	r6, r9
    1d04:	4645      	mov	r5, r8
    1d06:	b5e0      	push	{r5, r6, r7, lr}
    1d08:	0004      	movs	r4, r0
    1d0a:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1d0c:	7c83      	ldrb	r3, [r0, #18]
    1d0e:	250f      	movs	r5, #15
    1d10:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1d12:	2900      	cmp	r1, #0
    1d14:	d057      	beq.n	1dc6 <_usb_d_dev_out_next+0xca>
    1d16:	016a      	lsls	r2, r5, #5
    1d18:	4b7d      	ldr	r3, [pc, #500]	; (1f10 <_usb_d_dev_out_next+0x214>)
    1d1a:	189b      	adds	r3, r3, r2
    1d1c:	685a      	ldr	r2, [r3, #4]
    1d1e:	0112      	lsls	r2, r2, #4
    1d20:	0c92      	lsrs	r2, r2, #18
    1d22:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1d24:	685f      	ldr	r7, [r3, #4]
    1d26:	04bf      	lsls	r7, r7, #18
    1d28:	0cbf      	lsrs	r7, r7, #18
    1d2a:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1d2c:	8a06      	ldrh	r6, [r0, #16]
    1d2e:	4b79      	ldr	r3, [pc, #484]	; (1f14 <_usb_d_dev_out_next+0x218>)
    1d30:	429e      	cmp	r6, r3
    1d32:	d100      	bne.n	1d36 <_usb_d_dev_out_next+0x3a>
    1d34:	e0cd      	b.n	1ed2 <_usb_d_dev_out_next+0x1d6>
    1d36:	3e01      	subs	r6, #1
    1d38:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1d3a:	465f      	mov	r7, fp
    1d3c:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d3e:	7ce3      	ldrb	r3, [r4, #19]
    1d40:	2207      	movs	r2, #7
    1d42:	401a      	ands	r2, r3
    1d44:	4691      	mov	r9, r2
	if (isr) {
    1d46:	4643      	mov	r3, r8
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d005      	beq.n	1d58 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d4c:	016b      	lsls	r3, r5, #5
    1d4e:	4a72      	ldr	r2, [pc, #456]	; (1f18 <_usb_d_dev_out_next+0x21c>)
    1d50:	4694      	mov	ip, r2
    1d52:	4463      	add	r3, ip
    1d54:	2201      	movs	r2, #1
    1d56:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1d58:	7ce3      	ldrb	r3, [r4, #19]
    1d5a:	069b      	lsls	r3, r3, #26
    1d5c:	d50f      	bpl.n	1d7e <_usb_d_dev_out_next+0x82>
    1d5e:	6863      	ldr	r3, [r4, #4]
    1d60:	2b00      	cmp	r3, #0
    1d62:	d039      	beq.n	1dd8 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1d64:	68a0      	ldr	r0, [r4, #8]
    1d66:	1a1b      	subs	r3, r3, r0
    1d68:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1d6a:	6822      	ldr	r2, [r4, #0]
    1d6c:	4694      	mov	ip, r2
    1d6e:	4460      	add	r0, ip
    1d70:	68e1      	ldr	r1, [r4, #12]
    1d72:	001a      	movs	r2, r3
    1d74:	42bb      	cmp	r3, r7
    1d76:	d900      	bls.n	1d7a <_usb_d_dev_out_next+0x7e>
    1d78:	003a      	movs	r2, r7
    1d7a:	4b68      	ldr	r3, [pc, #416]	; (1f1c <_usb_d_dev_out_next+0x220>)
    1d7c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1d7e:	6863      	ldr	r3, [r4, #4]
    1d80:	2b00      	cmp	r3, #0
    1d82:	d029      	beq.n	1dd8 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1d84:	4642      	mov	r2, r8
    1d86:	2a00      	cmp	r2, #0
    1d88:	d042      	beq.n	1e10 <_usb_d_dev_out_next+0x114>
    1d8a:	8a22      	ldrh	r2, [r4, #16]
    1d8c:	42ba      	cmp	r2, r7
    1d8e:	d93f      	bls.n	1e10 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1d90:	7ce3      	ldrb	r3, [r4, #19]
    1d92:	2210      	movs	r2, #16
    1d94:	4393      	bics	r3, r2
    1d96:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1d98:	68a3      	ldr	r3, [r4, #8]
    1d9a:	445b      	add	r3, fp
    1d9c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1d9e:	464b      	mov	r3, r9
    1da0:	2b01      	cmp	r3, #1
    1da2:	d100      	bne.n	1da6 <_usb_d_dev_out_next+0xaa>
    1da4:	e087      	b.n	1eb6 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1da6:	016b      	lsls	r3, r5, #5
    1da8:	4a5d      	ldr	r2, [pc, #372]	; (1f20 <_usb_d_dev_out_next+0x224>)
    1daa:	4694      	mov	ip, r2
    1dac:	4463      	add	r3, ip
    1dae:	2225      	movs	r2, #37	; 0x25
    1db0:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1db2:	2d00      	cmp	r5, #0
    1db4:	d102      	bne.n	1dbc <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1db6:	4b56      	ldr	r3, [pc, #344]	; (1f10 <_usb_d_dev_out_next+0x214>)
    1db8:	68e2      	ldr	r2, [r4, #12]
    1dba:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1dbc:	2100      	movs	r1, #0
    1dbe:	0020      	movs	r0, r4
    1dc0:	4b58      	ldr	r3, [pc, #352]	; (1f24 <_usb_d_dev_out_next+0x228>)
    1dc2:	4798      	blx	r3
	return;
    1dc4:	e059      	b.n	1e7a <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1dc6:	8a06      	ldrh	r6, [r0, #16]
    1dc8:	4b52      	ldr	r3, [pc, #328]	; (1f14 <_usb_d_dev_out_next+0x218>)
    1dca:	429e      	cmp	r6, r3
    1dcc:	d100      	bne.n	1dd0 <_usb_d_dev_out_next+0xd4>
    1dce:	e08e      	b.n	1eee <_usb_d_dev_out_next+0x1f2>
    1dd0:	2300      	movs	r3, #0
    1dd2:	469b      	mov	fp, r3
    1dd4:	469a      	mov	sl, r3
    1dd6:	e7ae      	b.n	1d36 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1dd8:	7ce3      	ldrb	r3, [r4, #19]
    1dda:	06db      	lsls	r3, r3, #27
    1ddc:	d400      	bmi.n	1de0 <_usb_d_dev_out_next+0xe4>
    1dde:	e07f      	b.n	1ee0 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1de0:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1de2:	2210      	movs	r2, #16
    1de4:	4393      	bics	r3, r2
    1de6:	2220      	movs	r2, #32
    1de8:	4313      	orrs	r3, r2
    1dea:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1dec:	4a48      	ldr	r2, [pc, #288]	; (1f10 <_usb_d_dev_out_next+0x214>)
    1dee:	016b      	lsls	r3, r5, #5
    1df0:	68e1      	ldr	r1, [r4, #12]
    1df2:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1df4:	8a21      	ldrh	r1, [r4, #16]
    1df6:	18d3      	adds	r3, r2, r3
    1df8:	685a      	ldr	r2, [r3, #4]
    1dfa:	0489      	lsls	r1, r1, #18
    1dfc:	0909      	lsrs	r1, r1, #4
    1dfe:	484a      	ldr	r0, [pc, #296]	; (1f28 <_usb_d_dev_out_next+0x22c>)
    1e00:	4002      	ands	r2, r0
    1e02:	430a      	orrs	r2, r1
    1e04:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1e06:	685a      	ldr	r2, [r3, #4]
    1e08:	0b92      	lsrs	r2, r2, #14
    1e0a:	0392      	lsls	r2, r2, #14
    1e0c:	605a      	str	r2, [r3, #4]
    1e0e:	e022      	b.n	1e56 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1e10:	68a2      	ldr	r2, [r4, #8]
    1e12:	4452      	add	r2, sl
    1e14:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1e16:	4293      	cmp	r3, r2
    1e18:	d9c1      	bls.n	1d9e <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1e1a:	1a9b      	subs	r3, r3, r2
    1e1c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1e1e:	7ce1      	ldrb	r1, [r4, #19]
    1e20:	0689      	lsls	r1, r1, #26
    1e22:	d530      	bpl.n	1e86 <_usb_d_dev_out_next+0x18a>
    1e24:	8a22      	ldrh	r2, [r4, #16]
    1e26:	1c11      	adds	r1, r2, #0
    1e28:	b292      	uxth	r2, r2
    1e2a:	429a      	cmp	r2, r3
    1e2c:	d900      	bls.n	1e30 <_usb_d_dev_out_next+0x134>
    1e2e:	1c19      	adds	r1, r3, #0
    1e30:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1e32:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1e34:	016a      	lsls	r2, r5, #5
    1e36:	4936      	ldr	r1, [pc, #216]	; (1f10 <_usb_d_dev_out_next+0x214>)
    1e38:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1e3a:	016a      	lsls	r2, r5, #5
    1e3c:	4934      	ldr	r1, [pc, #208]	; (1f10 <_usb_d_dev_out_next+0x214>)
    1e3e:	1889      	adds	r1, r1, r2
    1e40:	684a      	ldr	r2, [r1, #4]
    1e42:	049b      	lsls	r3, r3, #18
    1e44:	091b      	lsrs	r3, r3, #4
    1e46:	4838      	ldr	r0, [pc, #224]	; (1f28 <_usb_d_dev_out_next+0x22c>)
    1e48:	4002      	ands	r2, r0
    1e4a:	4313      	orrs	r3, r2
    1e4c:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1e4e:	684b      	ldr	r3, [r1, #4]
    1e50:	0b9b      	lsrs	r3, r3, #14
    1e52:	039b      	lsls	r3, r3, #14
    1e54:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1e56:	4643      	mov	r3, r8
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d108      	bne.n	1e6e <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    1e5c:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    1e5e:	464b      	mov	r3, r9
    1e60:	2b01      	cmp	r3, #1
    1e62:	d02f      	beq.n	1ec4 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1e64:	016b      	lsls	r3, r5, #5
    1e66:	4931      	ldr	r1, [pc, #196]	; (1f2c <_usb_d_dev_out_next+0x230>)
    1e68:	468c      	mov	ip, r1
    1e6a:	4463      	add	r3, ip
    1e6c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1e6e:	016d      	lsls	r5, r5, #5
    1e70:	4b29      	ldr	r3, [pc, #164]	; (1f18 <_usb_d_dev_out_next+0x21c>)
    1e72:	469c      	mov	ip, r3
    1e74:	4465      	add	r5, ip
    1e76:	2340      	movs	r3, #64	; 0x40
    1e78:	712b      	strb	r3, [r5, #4]
}
    1e7a:	bc3c      	pop	{r2, r3, r4, r5}
    1e7c:	4690      	mov	r8, r2
    1e7e:	4699      	mov	r9, r3
    1e80:	46a2      	mov	sl, r4
    1e82:	46ab      	mov	fp, r5
    1e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1e86:	8a21      	ldrh	r1, [r4, #16]
    1e88:	428b      	cmp	r3, r1
    1e8a:	d90a      	bls.n	1ea2 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1e8c:	2180      	movs	r1, #128	; 0x80
    1e8e:	0189      	lsls	r1, r1, #6
    1e90:	428b      	cmp	r3, r1
    1e92:	d80d      	bhi.n	1eb0 <_usb_d_dev_out_next+0x1b4>
    1e94:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1e96:	6821      	ldr	r1, [r4, #0]
    1e98:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    1e9a:	0169      	lsls	r1, r5, #5
    1e9c:	481c      	ldr	r0, [pc, #112]	; (1f10 <_usb_d_dev_out_next+0x214>)
    1e9e:	500a      	str	r2, [r1, r0]
    1ea0:	e7cb      	b.n	1e3a <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1ea2:	428b      	cmp	r3, r1
    1ea4:	d2f7      	bcs.n	1e96 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1ea6:	7ce1      	ldrb	r1, [r4, #19]
    1ea8:	2020      	movs	r0, #32
    1eaa:	4301      	orrs	r1, r0
    1eac:	74e1      	strb	r1, [r4, #19]
    1eae:	e7f2      	b.n	1e96 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1eb0:	2380      	movs	r3, #128	; 0x80
    1eb2:	019b      	lsls	r3, r3, #6
    1eb4:	e7ef      	b.n	1e96 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1eb6:	016b      	lsls	r3, r5, #5
    1eb8:	4a19      	ldr	r2, [pc, #100]	; (1f20 <_usb_d_dev_out_next+0x224>)
    1eba:	4694      	mov	ip, r2
    1ebc:	4463      	add	r3, ip
    1ebe:	222d      	movs	r2, #45	; 0x2d
    1ec0:	701a      	strb	r2, [r3, #0]
    1ec2:	e776      	b.n	1db2 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1ec4:	016a      	lsls	r2, r5, #5
    1ec6:	4b12      	ldr	r3, [pc, #72]	; (1f10 <_usb_d_dev_out_next+0x214>)
    1ec8:	189b      	adds	r3, r3, r2
    1eca:	2200      	movs	r2, #0
    1ecc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1ece:	322d      	adds	r2, #45	; 0x2d
    1ed0:	e7c8      	b.n	1e64 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1ed2:	05bf      	lsls	r7, r7, #22
    1ed4:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ed6:	7cc3      	ldrb	r3, [r0, #19]
    1ed8:	2207      	movs	r2, #7
    1eda:	401a      	ands	r2, r3
    1edc:	4691      	mov	r9, r2
    1ede:	e735      	b.n	1d4c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1ee0:	4643      	mov	r3, r8
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d10c      	bne.n	1f00 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1ee6:	68a3      	ldr	r3, [r4, #8]
    1ee8:	4453      	add	r3, sl
    1eea:	60a3      	str	r3, [r4, #8]
    1eec:	e757      	b.n	1d9e <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1eee:	7cc3      	ldrb	r3, [r0, #19]
    1ef0:	2207      	movs	r2, #7
    1ef2:	401a      	ands	r2, r3
    1ef4:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1ef6:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1ef8:	2300      	movs	r3, #0
    1efa:	469b      	mov	fp, r3
    1efc:	469a      	mov	sl, r3
    1efe:	e72b      	b.n	1d58 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1f00:	8a23      	ldrh	r3, [r4, #16]
    1f02:	42bb      	cmp	r3, r7
    1f04:	d900      	bls.n	1f08 <_usb_d_dev_out_next+0x20c>
    1f06:	e743      	b.n	1d90 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1f08:	68a3      	ldr	r3, [r4, #8]
    1f0a:	4453      	add	r3, sl
    1f0c:	60a3      	str	r3, [r4, #8]
    1f0e:	e746      	b.n	1d9e <_usb_d_dev_out_next+0xa2>
    1f10:	200000a0 	.word	0x200000a0
    1f14:	000003ff 	.word	0x000003ff
    1f18:	41000100 	.word	0x41000100
    1f1c:	000026d1 	.word	0x000026d1
    1f20:	41000108 	.word	0x41000108
    1f24:	0000197d 	.word	0x0000197d
    1f28:	f0003fff 	.word	0xf0003fff
    1f2c:	41000109 	.word	0x41000109

00001f30 <_usb_d_dev_init>:
{
    1f30:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1f32:	2382      	movs	r3, #130	; 0x82
    1f34:	05db      	lsls	r3, r3, #23
    1f36:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1f38:	07db      	lsls	r3, r3, #31
    1f3a:	d424      	bmi.n	1f86 <_usb_d_dev_init+0x56>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1f3c:	2182      	movs	r1, #130	; 0x82
    1f3e:	05c9      	lsls	r1, r1, #23
    1f40:	2203      	movs	r2, #3
    1f42:	788b      	ldrb	r3, [r1, #2]
    1f44:	4213      	tst	r3, r2
    1f46:	d1fc      	bne.n	1f42 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1f48:	2382      	movs	r3, #130	; 0x82
    1f4a:	05db      	lsls	r3, r3, #23
    1f4c:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1f4e:	079b      	lsls	r3, r3, #30
    1f50:	d510      	bpl.n	1f74 <_usb_d_dev_init+0x44>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1f52:	2282      	movs	r2, #130	; 0x82
    1f54:	05d2      	lsls	r2, r2, #23
    1f56:	7813      	ldrb	r3, [r2, #0]
    1f58:	2102      	movs	r1, #2
    1f5a:	438b      	bics	r3, r1
    1f5c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1f5e:	0011      	movs	r1, r2
    1f60:	2203      	movs	r2, #3
    1f62:	788b      	ldrb	r3, [r1, #2]
    1f64:	4213      	tst	r3, r2
    1f66:	d1fc      	bne.n	1f62 <_usb_d_dev_init+0x32>
    1f68:	2182      	movs	r1, #130	; 0x82
    1f6a:	05c9      	lsls	r1, r1, #23
    1f6c:	2202      	movs	r2, #2
    1f6e:	788b      	ldrb	r3, [r1, #2]
    1f70:	4213      	tst	r3, r2
    1f72:	d1fc      	bne.n	1f6e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1f74:	2201      	movs	r2, #1
    1f76:	2382      	movs	r3, #130	; 0x82
    1f78:	05db      	lsls	r3, r3, #23
    1f7a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1f7c:	0019      	movs	r1, r3
    1f7e:	3202      	adds	r2, #2
    1f80:	788b      	ldrb	r3, [r1, #2]
    1f82:	4213      	tst	r3, r2
    1f84:	d1fc      	bne.n	1f80 <_usb_d_dev_init+0x50>
    1f86:	2182      	movs	r1, #130	; 0x82
    1f88:	05c9      	lsls	r1, r1, #23
    1f8a:	2201      	movs	r2, #1
    1f8c:	788b      	ldrb	r3, [r1, #2]
    1f8e:	4213      	tst	r3, r2
    1f90:	d1fc      	bne.n	1f8c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1f92:	4b1e      	ldr	r3, [pc, #120]	; (200c <STACK_SIZE+0xc>)
    1f94:	4a1e      	ldr	r2, [pc, #120]	; (2010 <STACK_SIZE+0x10>)
    1f96:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1f98:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1f9a:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1f9c:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1f9e:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1fa0:	4b1c      	ldr	r3, [pc, #112]	; (2014 <STACK_SIZE+0x14>)
    1fa2:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1fa4:	4b1c      	ldr	r3, [pc, #112]	; (2018 <STACK_SIZE+0x18>)
    1fa6:	681b      	ldr	r3, [r3, #0]
    1fa8:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    1faa:	211f      	movs	r1, #31
    1fac:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1fae:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1fb0:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1fb2:	019b      	lsls	r3, r3, #6
    1fb4:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1fb6:	2a1f      	cmp	r2, #31
    1fb8:	d021      	beq.n	1ffe <_usb_d_dev_init+0xce>
	if (pad_transp == 0x1F) {
    1fba:	291f      	cmp	r1, #31
    1fbc:	d021      	beq.n	2002 <STACK_SIZE+0x2>
	if (pad_trim == 0x7) {
    1fbe:	2b07      	cmp	r3, #7
    1fc0:	d021      	beq.n	2006 <STACK_SIZE+0x6>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1fc2:	0192      	lsls	r2, r2, #6
    1fc4:	430a      	orrs	r2, r1
    1fc6:	031b      	lsls	r3, r3, #12
    1fc8:	4313      	orrs	r3, r2
    1fca:	2282      	movs	r2, #130	; 0x82
    1fcc:	05d2      	lsls	r2, r2, #23
    1fce:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1fd0:	78d3      	ldrb	r3, [r2, #3]
    1fd2:	2103      	movs	r1, #3
    1fd4:	430b      	orrs	r3, r1
    1fd6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1fd8:	78d3      	ldrb	r3, [r2, #3]
    1fda:	210c      	movs	r1, #12
    1fdc:	430b      	orrs	r3, r1
    1fde:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1fe0:	2304      	movs	r3, #4
    1fe2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1fe4:	0011      	movs	r1, r2
    1fe6:	2203      	movs	r2, #3
    1fe8:	788b      	ldrb	r3, [r1, #2]
    1fea:	4213      	tst	r3, r2
    1fec:	d1fc      	bne.n	1fe8 <_usb_d_dev_init+0xb8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1fee:	2382      	movs	r3, #130	; 0x82
    1ff0:	05db      	lsls	r3, r3, #23
    1ff2:	4a06      	ldr	r2, [pc, #24]	; (200c <STACK_SIZE+0xc>)
    1ff4:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1ff6:	2201      	movs	r2, #1
    1ff8:	811a      	strh	r2, [r3, #8]
}
    1ffa:	2000      	movs	r0, #0
    1ffc:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1ffe:	3a1a      	subs	r2, #26
    2000:	e7db      	b.n	1fba <_usb_d_dev_init+0x8a>
		pad_transp = 29;
    2002:	3902      	subs	r1, #2
    2004:	e7db      	b.n	1fbe <_usb_d_dev_init+0x8e>
		pad_trim = 5;
    2006:	3b02      	subs	r3, #2
    2008:	e7db      	b.n	1fc2 <_usb_d_dev_init+0x92>
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	200000a0 	.word	0x200000a0
    2010:	000018bd 	.word	0x000018bd
    2014:	00001b11 	.word	0x00001b11
    2018:	0080601c 	.word	0x0080601c

0000201c <_usb_d_dev_ep_stall>:
{
    201c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    201e:	230f      	movs	r3, #15
    2020:	4003      	ands	r3, r0
    2022:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2024:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2026:	2b00      	cmp	r3, #0
    2028:	d009      	beq.n	203e <_usb_d_dev_ep_stall+0x22>
    202a:	001a      	movs	r2, r3
    202c:	2800      	cmp	r0, #0
    202e:	db04      	blt.n	203a <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    2030:	2b02      	cmp	r3, #2
    2032:	d905      	bls.n	2040 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    2034:	2012      	movs	r0, #18
    2036:	4240      	negs	r0, r0
    2038:	e019      	b.n	206e <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    203a:	1c9a      	adds	r2, r3, #2
    203c:	e7f8      	b.n	2030 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    203e:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    2040:	2901      	cmp	r1, #1
    2042:	d015      	beq.n	2070 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2044:	2900      	cmp	r1, #0
    2046:	d036      	beq.n	20b6 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2048:	0093      	lsls	r3, r2, #2
    204a:	189b      	adds	r3, r3, r2
    204c:	009b      	lsls	r3, r3, #2
    204e:	4a47      	ldr	r2, [pc, #284]	; (216c <_usb_d_dev_ep_stall+0x150>)
    2050:	18d2      	adds	r2, r2, r3
    2052:	3286      	adds	r2, #134	; 0x86
    2054:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2056:	230f      	movs	r3, #15
    2058:	4013      	ands	r3, r2
    205a:	015b      	lsls	r3, r3, #5
    205c:	4a44      	ldr	r2, [pc, #272]	; (2170 <_usb_d_dev_ep_stall+0x154>)
    205e:	4694      	mov	ip, r2
    2060:	4463      	add	r3, ip
    2062:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2064:	2310      	movs	r3, #16
    2066:	40a3      	lsls	r3, r4
    2068:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    206a:	1e43      	subs	r3, r0, #1
    206c:	4198      	sbcs	r0, r3
}
    206e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2070:	2510      	movs	r5, #16
    2072:	40a5      	lsls	r5, r4
    2074:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2076:	493d      	ldr	r1, [pc, #244]	; (216c <_usb_d_dev_ep_stall+0x150>)
    2078:	0090      	lsls	r0, r2, #2
    207a:	1883      	adds	r3, r0, r2
    207c:	009b      	lsls	r3, r3, #2
    207e:	18cb      	adds	r3, r1, r3
    2080:	3386      	adds	r3, #134	; 0x86
    2082:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2084:	230f      	movs	r3, #15
    2086:	4033      	ands	r3, r6
    2088:	015e      	lsls	r6, r3, #5
    208a:	4f39      	ldr	r7, [pc, #228]	; (2170 <_usb_d_dev_ep_stall+0x154>)
    208c:	46bc      	mov	ip, r7
    208e:	4466      	add	r6, ip
    2090:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2092:	2520      	movs	r5, #32
    2094:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    2096:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2098:	015b      	lsls	r3, r3, #5
    209a:	4d36      	ldr	r5, [pc, #216]	; (2174 <_usb_d_dev_ep_stall+0x158>)
    209c:	46ac      	mov	ip, r5
    209e:	4463      	add	r3, ip
    20a0:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    20a2:	1882      	adds	r2, r0, r2
    20a4:	0092      	lsls	r2, r2, #2
    20a6:	188a      	adds	r2, r1, r2
    20a8:	3280      	adds	r2, #128	; 0x80
    20aa:	79d3      	ldrb	r3, [r2, #7]
    20ac:	2108      	movs	r1, #8
    20ae:	430b      	orrs	r3, r1
    20b0:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    20b2:	2000      	movs	r0, #0
    20b4:	e7db      	b.n	206e <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    20b6:	0093      	lsls	r3, r2, #2
    20b8:	189b      	adds	r3, r3, r2
    20ba:	0099      	lsls	r1, r3, #2
    20bc:	4b2b      	ldr	r3, [pc, #172]	; (216c <_usb_d_dev_ep_stall+0x150>)
    20be:	185b      	adds	r3, r3, r1
    20c0:	3386      	adds	r3, #134	; 0x86
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	210f      	movs	r1, #15
    20c6:	400b      	ands	r3, r1
    20c8:	015d      	lsls	r5, r3, #5
    20ca:	2182      	movs	r1, #130	; 0x82
    20cc:	05c9      	lsls	r1, r1, #23
    20ce:	468c      	mov	ip, r1
    20d0:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    20d2:	2183      	movs	r1, #131	; 0x83
    20d4:	0049      	lsls	r1, r1, #1
    20d6:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    20d8:	39f6      	subs	r1, #246	; 0xf6
    20da:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    20dc:	2000      	movs	r0, #0
	if (!is_stalled) {
    20de:	420e      	tst	r6, r1
    20e0:	d0c5      	beq.n	206e <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    20e2:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    20e4:	3005      	adds	r0, #5
    20e6:	30ff      	adds	r0, #255	; 0xff
    20e8:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    20ea:	2120      	movs	r1, #32
    20ec:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    20ee:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    20f0:	015b      	lsls	r3, r3, #5
    20f2:	4e21      	ldr	r6, [pc, #132]	; (2178 <_usb_d_dev_ep_stall+0x15c>)
    20f4:	46b4      	mov	ip, r6
    20f6:	4463      	add	r3, ip
    20f8:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    20fa:	2308      	movs	r3, #8
    20fc:	33ff      	adds	r3, #255	; 0xff
    20fe:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2100:	420b      	tst	r3, r1
    2102:	d009      	beq.n	2118 <_usb_d_dev_ep_stall+0xfc>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2104:	2308      	movs	r3, #8
    2106:	33ff      	adds	r3, #255	; 0xff
    2108:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    210a:	3b07      	subs	r3, #7
    210c:	3bff      	subs	r3, #255	; 0xff
    210e:	40a3      	lsls	r3, r4
    2110:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2112:	2182      	movs	r1, #130	; 0x82
    2114:	0049      	lsls	r1, r1, #1
    2116:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2118:	0093      	lsls	r3, r2, #2
    211a:	189b      	adds	r3, r3, r2
    211c:	0099      	lsls	r1, r3, #2
    211e:	4b13      	ldr	r3, [pc, #76]	; (216c <_usb_d_dev_ep_stall+0x150>)
    2120:	185b      	adds	r3, r3, r1
    2122:	3380      	adds	r3, #128	; 0x80
    2124:	79d9      	ldrb	r1, [r3, #7]
    2126:	2307      	movs	r3, #7
    2128:	400b      	ands	r3, r1
    212a:	2b01      	cmp	r3, #1
    212c:	d00b      	beq.n	2146 <_usb_d_dev_ep_stall+0x12a>
		ept->flags.bits.is_stalled = 0;
    212e:	0093      	lsls	r3, r2, #2
    2130:	189a      	adds	r2, r3, r2
    2132:	0092      	lsls	r2, r2, #2
    2134:	4b0d      	ldr	r3, [pc, #52]	; (216c <_usb_d_dev_ep_stall+0x150>)
    2136:	189b      	adds	r3, r3, r2
    2138:	3380      	adds	r3, #128	; 0x80
    213a:	79da      	ldrb	r2, [r3, #7]
    213c:	2108      	movs	r1, #8
    213e:	438a      	bics	r2, r1
    2140:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2142:	2000      	movs	r0, #0
    2144:	e793      	b.n	206e <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2146:	3306      	adds	r3, #6
    2148:	33ff      	adds	r3, #255	; 0xff
    214a:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    214c:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    214e:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2150:	4219      	tst	r1, r3
    2152:	d000      	beq.n	2156 <_usb_d_dev_ep_stall+0x13a>
    2154:	e78b      	b.n	206e <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2156:	0093      	lsls	r3, r2, #2
    2158:	189a      	adds	r2, r3, r2
    215a:	0092      	lsls	r2, r2, #2
    215c:	4b03      	ldr	r3, [pc, #12]	; (216c <_usb_d_dev_ep_stall+0x150>)
    215e:	189b      	adds	r3, r3, r2
    2160:	3380      	adds	r3, #128	; 0x80
    2162:	79da      	ldrb	r2, [r3, #7]
    2164:	2108      	movs	r1, #8
    2166:	438a      	bics	r2, r1
    2168:	71da      	strb	r2, [r3, #7]
    216a:	e780      	b.n	206e <_usb_d_dev_ep_stall+0x52>
    216c:	200000a0 	.word	0x200000a0
    2170:	41000100 	.word	0x41000100
    2174:	41000109 	.word	0x41000109
    2178:	41000108 	.word	0x41000108

0000217c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    217c:	b570      	push	{r4, r5, r6, lr}
    217e:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    2180:	230f      	movs	r3, #15
    2182:	4018      	ands	r0, r3
    2184:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2186:	4b16      	ldr	r3, [pc, #88]	; (21e0 <_usb_d_dev_ep_read_req+0x64>)
    2188:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    218a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    218c:	685b      	ldr	r3, [r3, #4]
    218e:	049b      	lsls	r3, r3, #18
    2190:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    2192:	2802      	cmp	r0, #2
    2194:	d81b      	bhi.n	21ce <_usb_d_dev_ep_read_req+0x52>
    2196:	2d00      	cmp	r5, #0
    2198:	d01c      	beq.n	21d4 <_usb_d_dev_ep_read_req+0x58>
    219a:	2382      	movs	r3, #130	; 0x82
    219c:	05db      	lsls	r3, r3, #23
    219e:	469c      	mov	ip, r3
    21a0:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    21a2:	2380      	movs	r3, #128	; 0x80
    21a4:	005b      	lsls	r3, r3, #1
    21a6:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    21a8:	2b11      	cmp	r3, #17
    21aa:	d116      	bne.n	21da <_usb_d_dev_ep_read_req+0x5e>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    21ac:	2308      	movs	r3, #8
    21ae:	33ff      	adds	r3, #255	; 0xff
    21b0:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    21b2:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    21b4:	06db      	lsls	r3, r3, #27
    21b6:	d400      	bmi.n	21ba <_usb_d_dev_ep_read_req+0x3e>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    21b8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    21ba:	2208      	movs	r2, #8
    21bc:	0028      	movs	r0, r5
    21be:	4b09      	ldr	r3, [pc, #36]	; (21e4 <_usb_d_dev_ep_read_req+0x68>)
    21c0:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    21c2:	2210      	movs	r2, #16
    21c4:	2308      	movs	r3, #8
    21c6:	33ff      	adds	r3, #255	; 0xff
    21c8:	54e2      	strb	r2, [r4, r3]
	return bytes;
    21ca:	0030      	movs	r0, r6
    21cc:	e7f4      	b.n	21b8 <_usb_d_dev_ep_read_req+0x3c>
		return -USB_ERR_PARAM;
    21ce:	2012      	movs	r0, #18
    21d0:	4240      	negs	r0, r0
    21d2:	e7f1      	b.n	21b8 <_usb_d_dev_ep_read_req+0x3c>
    21d4:	2012      	movs	r0, #18
    21d6:	4240      	negs	r0, r0
    21d8:	e7ee      	b.n	21b8 <_usb_d_dev_ep_read_req+0x3c>
		return -USB_ERR_FUNC;
    21da:	2013      	movs	r0, #19
    21dc:	4240      	negs	r0, r0
    21de:	e7eb      	b.n	21b8 <_usb_d_dev_ep_read_req+0x3c>
    21e0:	200000a0 	.word	0x200000a0
    21e4:	000026d1 	.word	0x000026d1

000021e8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ea:	46de      	mov	lr, fp
    21ec:	4657      	mov	r7, sl
    21ee:	464e      	mov	r6, r9
    21f0:	4645      	mov	r5, r8
    21f2:	b5e0      	push	{r5, r6, r7, lr}
    21f4:	b085      	sub	sp, #20
    21f6:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    21f8:	7a06      	ldrb	r6, [r0, #8]
    21fa:	230f      	movs	r3, #15
    21fc:	4033      	ands	r3, r6
    21fe:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2200:	2b00      	cmp	r3, #0
    2202:	d100      	bne.n	2206 <_usb_d_dev_ep_trans+0x1e>
    2204:	e0d3      	b.n	23ae <_usb_d_dev_ep_trans+0x1c6>
    2206:	0018      	movs	r0, r3
    2208:	2e00      	cmp	r6, #0
    220a:	db39      	blt.n	2280 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    220c:	0004      	movs	r4, r0
    220e:	4a73      	ldr	r2, [pc, #460]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    2210:	3260      	adds	r2, #96	; 0x60
    2212:	1c41      	adds	r1, r0, #1
    2214:	008d      	lsls	r5, r1, #2
    2216:	186d      	adds	r5, r5, r1
    2218:	00ad      	lsls	r5, r5, #2
    221a:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    221c:	0081      	lsls	r1, r0, #2
    221e:	1809      	adds	r1, r1, r0
    2220:	0089      	lsls	r1, r1, #2
    2222:	1852      	adds	r2, r2, r1
    2224:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2226:	4a6e      	ldr	r2, [pc, #440]	; (23e0 <_usb_d_dev_ep_trans+0x1f8>)
    2228:	4291      	cmp	r1, r2
    222a:	d02b      	beq.n	2284 <_usb_d_dev_ep_trans+0x9c>
    222c:	1e4f      	subs	r7, r1, #1
    222e:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    2230:	4642      	mov	r2, r8
    2232:	6852      	ldr	r2, [r2, #4]
    2234:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2236:	2b02      	cmp	r3, #2
    2238:	d900      	bls.n	223c <_usb_d_dev_ep_trans+0x54>
    223a:	e0a4      	b.n	2386 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    223c:	4643      	mov	r3, r8
    223e:	681b      	ldr	r3, [r3, #0]
    2240:	4868      	ldr	r0, [pc, #416]	; (23e4 <_usb_d_dev_ep_trans+0x1fc>)
    2242:	4283      	cmp	r3, r0
    2244:	d920      	bls.n	2288 <_usb_d_dev_ep_trans+0xa0>
    2246:	1898      	adds	r0, r3, r2
    2248:	9001      	str	r0, [sp, #4]
    224a:	4867      	ldr	r0, [pc, #412]	; (23e8 <_usb_d_dev_ep_trans+0x200>)
    224c:	4684      	mov	ip, r0
    224e:	9801      	ldr	r0, [sp, #4]
    2250:	4560      	cmp	r0, ip
    2252:	d819      	bhi.n	2288 <_usb_d_dev_ep_trans+0xa0>
    2254:	079b      	lsls	r3, r3, #30
    2256:	d117      	bne.n	2288 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    2258:	2e00      	cmp	r6, #0
    225a:	db32      	blt.n	22c2 <_usb_d_dev_ep_trans+0xda>
    225c:	4291      	cmp	r1, r2
    225e:	d900      	bls.n	2262 <_usb_d_dev_ep_trans+0x7a>
    2260:	e0af      	b.n	23c2 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2262:	2f00      	cmp	r7, #0
    2264:	d030      	beq.n	22c8 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    2266:	00a3      	lsls	r3, r4, #2
    2268:	191b      	adds	r3, r3, r4
    226a:	009a      	lsls	r2, r3, #2
    226c:	4b5b      	ldr	r3, [pc, #364]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    226e:	189b      	adds	r3, r3, r2
    2270:	3380      	adds	r3, #128	; 0x80
    2272:	681b      	ldr	r3, [r3, #0]
    2274:	2b00      	cmp	r3, #0
    2276:	d100      	bne.n	227a <_usb_d_dev_ep_trans+0x92>
    2278:	e08b      	b.n	2392 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    227a:	2300      	movs	r3, #0
    227c:	4699      	mov	r9, r3
    227e:	e00f      	b.n	22a0 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2280:	1c98      	adds	r0, r3, #2
    2282:	e7c3      	b.n	220c <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2284:	000f      	movs	r7, r1
    2286:	e7d3      	b.n	2230 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    2288:	00a3      	lsls	r3, r4, #2
    228a:	191b      	adds	r3, r3, r4
    228c:	009a      	lsls	r2, r3, #2
    228e:	4b53      	ldr	r3, [pc, #332]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    2290:	189b      	adds	r3, r3, r2
    2292:	3380      	adds	r3, #128	; 0x80
    2294:	681b      	ldr	r3, [r3, #0]
    2296:	2b00      	cmp	r3, #0
    2298:	d100      	bne.n	229c <_usb_d_dev_ep_trans+0xb4>
    229a:	e077      	b.n	238c <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    229c:	2301      	movs	r3, #1
    229e:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    22a0:	00a3      	lsls	r3, r4, #2
    22a2:	191b      	adds	r3, r3, r4
    22a4:	009a      	lsls	r2, r3, #2
    22a6:	4b4d      	ldr	r3, [pc, #308]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    22a8:	189b      	adds	r3, r3, r2
    22aa:	3380      	adds	r3, #128	; 0x80
    22ac:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    22ae:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    22b0:	071b      	lsls	r3, r3, #28
    22b2:	d50c      	bpl.n	22ce <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    22b4:	b005      	add	sp, #20
    22b6:	bc3c      	pop	{r2, r3, r4, r5}
    22b8:	4690      	mov	r8, r2
    22ba:	4699      	mov	r9, r3
    22bc:	46a2      	mov	sl, r4
    22be:	46ab      	mov	fp, r5
    22c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    22c2:	2300      	movs	r3, #0
    22c4:	4699      	mov	r9, r3
    22c6:	e7eb      	b.n	22a0 <_usb_d_dev_ep_trans+0xb8>
    22c8:	2300      	movs	r3, #0
    22ca:	4699      	mov	r9, r3
    22cc:	e7e8      	b.n	22a0 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    22ce:	a803      	add	r0, sp, #12
    22d0:	4b46      	ldr	r3, [pc, #280]	; (23ec <_usb_d_dev_ep_trans+0x204>)
    22d2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    22d4:	00a3      	lsls	r3, r4, #2
    22d6:	191b      	adds	r3, r3, r4
    22d8:	009a      	lsls	r2, r3, #2
    22da:	4b40      	ldr	r3, [pc, #256]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    22dc:	189b      	adds	r3, r3, r2
    22de:	3380      	adds	r3, #128	; 0x80
    22e0:	79db      	ldrb	r3, [r3, #7]
    22e2:	065b      	lsls	r3, r3, #25
    22e4:	d444      	bmi.n	2370 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    22e6:	00a3      	lsls	r3, r4, #2
    22e8:	191b      	adds	r3, r3, r4
    22ea:	009b      	lsls	r3, r3, #2
    22ec:	4a3b      	ldr	r2, [pc, #236]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    22ee:	4693      	mov	fp, r2
    22f0:	449b      	add	fp, r3
    22f2:	2380      	movs	r3, #128	; 0x80
    22f4:	445b      	add	r3, fp
    22f6:	469a      	mov	sl, r3
    22f8:	79db      	ldrb	r3, [r3, #7]
    22fa:	2240      	movs	r2, #64	; 0x40
    22fc:	4313      	orrs	r3, r2
    22fe:	4652      	mov	r2, sl
    2300:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    2302:	a803      	add	r0, sp, #12
    2304:	4b3a      	ldr	r3, [pc, #232]	; (23f0 <_usb_d_dev_ep_trans+0x208>)
    2306:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2308:	465b      	mov	r3, fp
    230a:	4642      	mov	r2, r8
    230c:	6812      	ldr	r2, [r2, #0]
    230e:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    2310:	4642      	mov	r2, r8
    2312:	6852      	ldr	r2, [r2, #4]
    2314:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    2316:	2300      	movs	r3, #0
    2318:	465a      	mov	r2, fp
    231a:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    231c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    231e:	01d2      	lsls	r2, r2, #7
    2320:	4653      	mov	r3, sl
    2322:	79d9      	ldrb	r1, [r3, #7]
    2324:	237f      	movs	r3, #127	; 0x7f
    2326:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    2328:	4649      	mov	r1, r9
    232a:	0149      	lsls	r1, r1, #5
    232c:	4313      	orrs	r3, r2
    232e:	2220      	movs	r2, #32
    2330:	4393      	bics	r3, r2
    2332:	430b      	orrs	r3, r1
    2334:	4652      	mov	r2, sl
    2336:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2338:	4643      	mov	r3, r8
    233a:	7a5b      	ldrb	r3, [r3, #9]
    233c:	2200      	movs	r2, #0
    233e:	2b00      	cmp	r3, #0
    2340:	d002      	beq.n	2348 <_usb_d_dev_ep_trans+0x160>
    2342:	427a      	negs	r2, r7
    2344:	417a      	adcs	r2, r7
    2346:	b2d2      	uxtb	r2, r2
    2348:	00a3      	lsls	r3, r4, #2
    234a:	191c      	adds	r4, r3, r4
    234c:	00a4      	lsls	r4, r4, #2
    234e:	4b23      	ldr	r3, [pc, #140]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    2350:	191b      	adds	r3, r3, r4
    2352:	3380      	adds	r3, #128	; 0x80
    2354:	0112      	lsls	r2, r2, #4
    2356:	79df      	ldrb	r7, [r3, #7]
    2358:	2110      	movs	r1, #16
    235a:	438f      	bics	r7, r1
    235c:	4317      	orrs	r7, r2
    235e:	71df      	strb	r7, [r3, #7]
	if (dir) {
    2360:	2e00      	cmp	r6, #0
    2362:	db0a      	blt.n	237a <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    2364:	2100      	movs	r1, #0
    2366:	0028      	movs	r0, r5
    2368:	4b22      	ldr	r3, [pc, #136]	; (23f4 <_usb_d_dev_ep_trans+0x20c>)
    236a:	4798      	blx	r3
	return ERR_NONE;
    236c:	2000      	movs	r0, #0
    236e:	e7a1      	b.n	22b4 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    2370:	a803      	add	r0, sp, #12
    2372:	4b1f      	ldr	r3, [pc, #124]	; (23f0 <_usb_d_dev_ep_trans+0x208>)
    2374:	4798      	blx	r3
		return USB_BUSY;
    2376:	2001      	movs	r0, #1
    2378:	e79c      	b.n	22b4 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    237a:	2100      	movs	r1, #0
    237c:	0028      	movs	r0, r5
    237e:	4b1e      	ldr	r3, [pc, #120]	; (23f8 <_usb_d_dev_ep_trans+0x210>)
    2380:	4798      	blx	r3
	return ERR_NONE;
    2382:	2000      	movs	r0, #0
    2384:	e796      	b.n	22b4 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    2386:	2012      	movs	r0, #18
    2388:	4240      	negs	r0, r0
    238a:	e793      	b.n	22b4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    238c:	2013      	movs	r0, #19
    238e:	4240      	negs	r0, r0
    2390:	e790      	b.n	22b4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    2392:	2012      	movs	r0, #18
    2394:	4240      	negs	r0, r0
    2396:	e78d      	b.n	22b4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2398:	2013      	movs	r0, #19
    239a:	4240      	negs	r0, r0
    239c:	e78a      	b.n	22b4 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    239e:	4643      	mov	r3, r8
    23a0:	685a      	ldr	r2, [r3, #4]
    23a2:	0597      	lsls	r7, r2, #22
    23a4:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    23a6:	4d0d      	ldr	r5, [pc, #52]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    23a8:	3574      	adds	r5, #116	; 0x74
    23aa:	2400      	movs	r4, #0
    23ac:	e746      	b.n	223c <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    23ae:	4a0b      	ldr	r2, [pc, #44]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    23b0:	3260      	adds	r2, #96	; 0x60
    23b2:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    23b4:	4a0a      	ldr	r2, [pc, #40]	; (23e0 <_usb_d_dev_ep_trans+0x1f8>)
    23b6:	4291      	cmp	r1, r2
    23b8:	d0f1      	beq.n	239e <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    23ba:	4d08      	ldr	r5, [pc, #32]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    23bc:	3574      	adds	r5, #116	; 0x74
    23be:	2400      	movs	r4, #0
    23c0:	e734      	b.n	222c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    23c2:	00a3      	lsls	r3, r4, #2
    23c4:	191b      	adds	r3, r3, r4
    23c6:	009a      	lsls	r2, r3, #2
    23c8:	4b04      	ldr	r3, [pc, #16]	; (23dc <_usb_d_dev_ep_trans+0x1f4>)
    23ca:	189b      	adds	r3, r3, r2
    23cc:	3380      	adds	r3, #128	; 0x80
    23ce:	681b      	ldr	r3, [r3, #0]
    23d0:	2b00      	cmp	r3, #0
    23d2:	d0e1      	beq.n	2398 <_usb_d_dev_ep_trans+0x1b0>
    23d4:	2301      	movs	r3, #1
    23d6:	4699      	mov	r9, r3
    23d8:	e762      	b.n	22a0 <_usb_d_dev_ep_trans+0xb8>
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	200000a0 	.word	0x200000a0
    23e0:	000003ff 	.word	0x000003ff
    23e4:	1fffffff 	.word	0x1fffffff
    23e8:	20009fff 	.word	0x20009fff
    23ec:	000005c1 	.word	0x000005c1
    23f0:	000005cf 	.word	0x000005cf
    23f4:	00001cfd 	.word	0x00001cfd
    23f8:	00001b55 	.word	0x00001b55

000023fc <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    23fc:	1e0b      	subs	r3, r1, #0
    23fe:	d008      	beq.n	2412 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2400:	2800      	cmp	r0, #0
    2402:	d008      	beq.n	2416 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2404:	2801      	cmp	r0, #1
    2406:	d009      	beq.n	241c <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2408:	2802      	cmp	r0, #2
    240a:	d106      	bne.n	241a <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    240c:	4a05      	ldr	r2, [pc, #20]	; (2424 <_usb_d_dev_register_ep_callback+0x28>)
    240e:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    2410:	e003      	b.n	241a <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2412:	4b05      	ldr	r3, [pc, #20]	; (2428 <_usb_d_dev_register_ep_callback+0x2c>)
    2414:	e7f4      	b.n	2400 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2416:	4a03      	ldr	r2, [pc, #12]	; (2424 <_usb_d_dev_register_ep_callback+0x28>)
    2418:	6693      	str	r3, [r2, #104]	; 0x68
}
    241a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    241c:	4a01      	ldr	r2, [pc, #4]	; (2424 <_usb_d_dev_register_ep_callback+0x28>)
    241e:	66d3      	str	r3, [r2, #108]	; 0x6c
    2420:	e7fb      	b.n	241a <_usb_d_dev_register_ep_callback+0x1e>
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	200000a0 	.word	0x200000a0
    2428:	000018bd 	.word	0x000018bd

0000242c <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    242e:	2382      	movs	r3, #130	; 0x82
    2430:	05db      	lsls	r3, r3, #23
    2432:	8c1e      	ldrh	r6, [r3, #32]
    2434:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2436:	2e00      	cmp	r6, #0
    2438:	d003      	beq.n	2442 <USB_Handler+0x16>
    243a:	4c83      	ldr	r4, [pc, #524]	; (2648 <USB_Handler+0x21c>)
    243c:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    243e:	2500      	movs	r5, #0
    2440:	e0c0      	b.n	25c4 <USB_Handler+0x198>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2442:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2444:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2446:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2448:	075a      	lsls	r2, r3, #29
    244a:	d418      	bmi.n	247e <USB_Handler+0x52>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    244c:	059a      	lsls	r2, r3, #22
    244e:	d41e      	bmi.n	248e <USB_Handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2450:	061a      	lsls	r2, r3, #24
    2452:	d441      	bmi.n	24d8 <USB_Handler+0xac>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2454:	2270      	movs	r2, #112	; 0x70
    2456:	421a      	tst	r2, r3
    2458:	d148      	bne.n	24ec <USB_Handler+0xc0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    245a:	071a      	lsls	r2, r3, #28
    245c:	d464      	bmi.n	2528 <USB_Handler+0xfc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    245e:	07db      	lsls	r3, r3, #31
    2460:	d5eb      	bpl.n	243a <USB_Handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2462:	2382      	movs	r3, #130	; 0x82
    2464:	05db      	lsls	r3, r3, #23
    2466:	4a79      	ldr	r2, [pc, #484]	; (264c <USB_Handler+0x220>)
    2468:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    246a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    246c:	3a92      	subs	r2, #146	; 0x92
    246e:	3aff      	subs	r2, #255	; 0xff
    2470:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2472:	4b75      	ldr	r3, [pc, #468]	; (2648 <USB_Handler+0x21c>)
    2474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2476:	2100      	movs	r1, #0
    2478:	2004      	movs	r0, #4
    247a:	4798      	blx	r3
    247c:	e006      	b.n	248c <USB_Handler+0x60>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    247e:	2204      	movs	r2, #4
    2480:	2382      	movs	r3, #130	; 0x82
    2482:	05db      	lsls	r3, r3, #23
    2484:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2486:	4b70      	ldr	r3, [pc, #448]	; (2648 <USB_Handler+0x21c>)
    2488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    248a:	4798      	blx	r3

	_usb_d_dev_handler();
}
    248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    248e:	2382      	movs	r3, #130	; 0x82
    2490:	05db      	lsls	r3, r3, #23
    2492:	4a6e      	ldr	r2, [pc, #440]	; (264c <USB_Handler+0x220>)
    2494:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2496:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2498:	3a92      	subs	r2, #146	; 0x92
    249a:	3aff      	subs	r2, #255	; 0xff
    249c:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    249e:	4b6a      	ldr	r3, [pc, #424]	; (2648 <USB_Handler+0x21c>)
    24a0:	891b      	ldrh	r3, [r3, #8]
    24a2:	071b      	lsls	r3, r3, #28
    24a4:	0f1b      	lsrs	r3, r3, #28
    24a6:	2b03      	cmp	r3, #3
    24a8:	d00c      	beq.n	24c4 <USB_Handler+0x98>
    24aa:	4b67      	ldr	r3, [pc, #412]	; (2648 <USB_Handler+0x21c>)
    24ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    24ae:	071b      	lsls	r3, r3, #28
    24b0:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    24b2:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    24b4:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    24b6:	2b03      	cmp	r3, #3
    24b8:	d005      	beq.n	24c6 <USB_Handler+0x9a>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    24ba:	4b63      	ldr	r3, [pc, #396]	; (2648 <USB_Handler+0x21c>)
    24bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    24be:	2003      	movs	r0, #3
    24c0:	4798      	blx	r3
    24c2:	e7e3      	b.n	248c <USB_Handler+0x60>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    24c4:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    24c6:	0152      	lsls	r2, r2, #5
    24c8:	4b5f      	ldr	r3, [pc, #380]	; (2648 <USB_Handler+0x21c>)
    24ca:	189b      	adds	r3, r3, r2
    24cc:	8919      	ldrh	r1, [r3, #8]
    24ce:	0449      	lsls	r1, r1, #17
    24d0:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    24d2:	2200      	movs	r2, #0
    24d4:	811a      	strh	r2, [r3, #8]
    24d6:	e7f0      	b.n	24ba <USB_Handler+0x8e>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    24d8:	2280      	movs	r2, #128	; 0x80
    24da:	2382      	movs	r3, #130	; 0x82
    24dc:	05db      	lsls	r3, r3, #23
    24de:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    24e0:	4b59      	ldr	r3, [pc, #356]	; (2648 <USB_Handler+0x21c>)
    24e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    24e4:	2100      	movs	r1, #0
    24e6:	2005      	movs	r0, #5
    24e8:	4798      	blx	r3
    24ea:	e7cf      	b.n	248c <USB_Handler+0x60>
    24ec:	2382      	movs	r3, #130	; 0x82
    24ee:	05db      	lsls	r3, r3, #23
    24f0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    24f2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    24f4:	4a55      	ldr	r2, [pc, #340]	; (264c <USB_Handler+0x220>)
    24f6:	831a      	strh	r2, [r3, #24]
}

static inline bool hri_oscctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
    24f8:	4b55      	ldr	r3, [pc, #340]	; (2650 <USB_Handler+0x224>)
    24fa:	8b1b      	ldrh	r3, [r3, #24]
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(OSCCTRL)) {
    24fc:	075b      	lsls	r3, r3, #29
    24fe:	d50c      	bpl.n	251a <USB_Handler+0xee>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2500:	4953      	ldr	r1, [pc, #332]	; (2650 <USB_Handler+0x224>)
	tmp &= mask;
    2502:	2290      	movs	r2, #144	; 0x90
    2504:	0112      	lsls	r2, r2, #4
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2506:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    2508:	4013      	ands	r3, r2
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    250a:	4293      	cmp	r3, r2
    250c:	d1fb      	bne.n	2506 <USB_Handler+0xda>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    250e:	4b4e      	ldr	r3, [pc, #312]	; (2648 <USB_Handler+0x21c>)
    2510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2512:	2100      	movs	r1, #0
    2514:	2002      	movs	r0, #2
    2516:	4798      	blx	r3
    2518:	e7b8      	b.n	248c <USB_Handler+0x60>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    251a:	494d      	ldr	r1, [pc, #308]	; (2650 <USB_Handler+0x224>)
	tmp &= mask;
    251c:	2280      	movs	r2, #128	; 0x80
    251e:	0052      	lsls	r2, r2, #1
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2520:	68cb      	ldr	r3, [r1, #12]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2522:	4213      	tst	r3, r2
    2524:	d0fc      	beq.n	2520 <USB_Handler+0xf4>
    2526:	e7f2      	b.n	250e <USB_Handler+0xe2>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2528:	2382      	movs	r3, #130	; 0x82
    252a:	05db      	lsls	r3, r3, #23
    252c:	2100      	movs	r1, #0
    252e:	2280      	movs	r2, #128	; 0x80
    2530:	0052      	lsls	r2, r2, #1
    2532:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2534:	3af8      	subs	r2, #248	; 0xf8
    2536:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2538:	3268      	adds	r2, #104	; 0x68
    253a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    253c:	4a43      	ldr	r2, [pc, #268]	; (264c <USB_Handler+0x220>)
    253e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2540:	4b44      	ldr	r3, [pc, #272]	; (2654 <USB_Handler+0x228>)
    2542:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2544:	4b40      	ldr	r3, [pc, #256]	; (2648 <USB_Handler+0x21c>)
    2546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2548:	2100      	movs	r1, #0
    254a:	2001      	movs	r0, #1
    254c:	4798      	blx	r3
    254e:	e79d      	b.n	248c <USB_Handler+0x60>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2550:	06cb      	lsls	r3, r1, #27
    2552:	d407      	bmi.n	2564 <USB_Handler+0x138>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2554:	064b      	lsls	r3, r1, #25
    2556:	d408      	bmi.n	256a <USB_Handler+0x13e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2558:	068b      	lsls	r3, r1, #26
    255a:	d52e      	bpl.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 0);
    255c:	2100      	movs	r1, #0
    255e:	4b3e      	ldr	r3, [pc, #248]	; (2658 <USB_Handler+0x22c>)
    2560:	4798      	blx	r3
    2562:	e02a      	b.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_handle_setup(ept);
    2564:	4b3d      	ldr	r3, [pc, #244]	; (265c <USB_Handler+0x230>)
    2566:	4798      	blx	r3
    2568:	e027      	b.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 1);
    256a:	2101      	movs	r1, #1
    256c:	4b3a      	ldr	r3, [pc, #232]	; (2658 <USB_Handler+0x22c>)
    256e:	4798      	blx	r3
    2570:	e023      	b.n	25ba <USB_Handler+0x18e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2572:	064b      	lsls	r3, r1, #25
    2574:	d40e      	bmi.n	2594 <USB_Handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2576:	070b      	lsls	r3, r1, #28
    2578:	d410      	bmi.n	259c <USB_Handler+0x170>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    257a:	078b      	lsls	r3, r1, #30
    257c:	d412      	bmi.n	25a4 <USB_Handler+0x178>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    257e:	2307      	movs	r3, #7
    2580:	401a      	ands	r2, r3
    2582:	2a01      	cmp	r2, #1
    2584:	d119      	bne.n	25ba <USB_Handler+0x18e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2586:	074b      	lsls	r3, r1, #29
    2588:	d410      	bmi.n	25ac <USB_Handler+0x180>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    258a:	06cb      	lsls	r3, r1, #27
    258c:	d515      	bpl.n	25ba <USB_Handler+0x18e>
			_usb_d_dev_handle_setup(ept);
    258e:	4b33      	ldr	r3, [pc, #204]	; (265c <USB_Handler+0x230>)
    2590:	4798      	blx	r3
    2592:	e012      	b.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 1);
    2594:	2101      	movs	r1, #1
    2596:	4b30      	ldr	r3, [pc, #192]	; (2658 <USB_Handler+0x22c>)
    2598:	4798      	blx	r3
    259a:	e00e      	b.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_handle_trfail(ept, 1);
    259c:	2101      	movs	r1, #1
    259e:	4b30      	ldr	r3, [pc, #192]	; (2660 <USB_Handler+0x234>)
    25a0:	4798      	blx	r3
    25a2:	e00a      	b.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_in_next(ept, true);
    25a4:	2101      	movs	r1, #1
    25a6:	4b2f      	ldr	r3, [pc, #188]	; (2664 <USB_Handler+0x238>)
    25a8:	4798      	blx	r3
    25aa:	e006      	b.n	25ba <USB_Handler+0x18e>
			_usb_d_dev_handle_trfail(ept, 0);
    25ac:	2100      	movs	r1, #0
    25ae:	4b2c      	ldr	r3, [pc, #176]	; (2660 <USB_Handler+0x234>)
    25b0:	4798      	blx	r3
    25b2:	e002      	b.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 0);
    25b4:	2100      	movs	r1, #0
    25b6:	4b28      	ldr	r3, [pc, #160]	; (2658 <USB_Handler+0x22c>)
    25b8:	4798      	blx	r3
    25ba:	3501      	adds	r5, #1
    25bc:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    25be:	2d09      	cmp	r5, #9
    25c0:	d100      	bne.n	25c4 <USB_Handler+0x198>
    25c2:	e763      	b.n	248c <USB_Handler+0x60>
    25c4:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    25c6:	7ca1      	ldrb	r1, [r4, #18]
    25c8:	29ff      	cmp	r1, #255	; 0xff
    25ca:	d0f6      	beq.n	25ba <USB_Handler+0x18e>
	if (!(epint & (1u << epn))) {
    25cc:	230f      	movs	r3, #15
    25ce:	400b      	ands	r3, r1
    25d0:	2101      	movs	r1, #1
    25d2:	4099      	lsls	r1, r3
    25d4:	420e      	tst	r6, r1
    25d6:	d0f0      	beq.n	25ba <USB_Handler+0x18e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    25d8:	0159      	lsls	r1, r3, #5
    25da:	4f23      	ldr	r7, [pc, #140]	; (2668 <USB_Handler+0x23c>)
    25dc:	46bc      	mov	ip, r7
    25de:	4461      	add	r1, ip
    25e0:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    25e2:	015b      	lsls	r3, r3, #5
    25e4:	4f21      	ldr	r7, [pc, #132]	; (266c <USB_Handler+0x240>)
    25e6:	46bc      	mov	ip, r7
    25e8:	4463      	add	r3, ip
    25ea:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    25ec:	4019      	ands	r1, r3
	if (flags) {
    25ee:	d0e4      	beq.n	25ba <USB_Handler+0x18e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    25f0:	00ab      	lsls	r3, r5, #2
    25f2:	195a      	adds	r2, r3, r5
    25f4:	0092      	lsls	r2, r2, #2
    25f6:	4b14      	ldr	r3, [pc, #80]	; (2648 <USB_Handler+0x21c>)
    25f8:	469c      	mov	ip, r3
    25fa:	4462      	add	r2, ip
    25fc:	3270      	adds	r2, #112	; 0x70
    25fe:	7dd2      	ldrb	r2, [r2, #23]
    2600:	2347      	movs	r3, #71	; 0x47
    2602:	4013      	ands	r3, r2
    2604:	2b01      	cmp	r3, #1
    2606:	d0a3      	beq.n	2550 <USB_Handler+0x124>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2608:	b253      	sxtb	r3, r2
    260a:	2b00      	cmp	r3, #0
    260c:	dbb1      	blt.n	2572 <USB_Handler+0x146>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    260e:	068b      	lsls	r3, r1, #26
    2610:	d4d0      	bmi.n	25b4 <USB_Handler+0x188>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2612:	074b      	lsls	r3, r1, #29
    2614:	d40c      	bmi.n	2630 <USB_Handler+0x204>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2616:	07cb      	lsls	r3, r1, #31
    2618:	d40e      	bmi.n	2638 <USB_Handler+0x20c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    261a:	2307      	movs	r3, #7
    261c:	401a      	ands	r2, r3
    261e:	2a01      	cmp	r2, #1
    2620:	d1cb      	bne.n	25ba <USB_Handler+0x18e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2622:	070b      	lsls	r3, r1, #28
    2624:	d40c      	bmi.n	2640 <USB_Handler+0x214>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2626:	06cb      	lsls	r3, r1, #27
    2628:	d5c7      	bpl.n	25ba <USB_Handler+0x18e>
			_usb_d_dev_handle_setup(ept);
    262a:	4b0c      	ldr	r3, [pc, #48]	; (265c <USB_Handler+0x230>)
    262c:	4798      	blx	r3
    262e:	e7c4      	b.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_handle_trfail(ept, 0);
    2630:	2100      	movs	r1, #0
    2632:	4b0b      	ldr	r3, [pc, #44]	; (2660 <USB_Handler+0x234>)
    2634:	4798      	blx	r3
    2636:	e7c0      	b.n	25ba <USB_Handler+0x18e>
		_usb_d_dev_out_next(ept, true);
    2638:	2101      	movs	r1, #1
    263a:	4b0d      	ldr	r3, [pc, #52]	; (2670 <USB_Handler+0x244>)
    263c:	4798      	blx	r3
    263e:	e7bc      	b.n	25ba <USB_Handler+0x18e>
			_usb_d_dev_handle_trfail(ept, 1);
    2640:	2101      	movs	r1, #1
    2642:	4b07      	ldr	r3, [pc, #28]	; (2660 <USB_Handler+0x234>)
    2644:	4798      	blx	r3
    2646:	e7b8      	b.n	25ba <USB_Handler+0x18e>
    2648:	200000a0 	.word	0x200000a0
    264c:	00000201 	.word	0x00000201
    2650:	40000c00 	.word	0x40000c00
    2654:	00001b11 	.word	0x00001b11
    2658:	0000194d 	.word	0x0000194d
    265c:	000018c1 	.word	0x000018c1
    2660:	00001a11 	.word	0x00001a11
    2664:	00001b55 	.word	0x00001b55
    2668:	41000100 	.word	0x41000100
    266c:	41000109 	.word	0x41000109
    2670:	00001cfd 	.word	0x00001cfd

00002674 <main>:
#include <atmel_start.h>

int main(void)
{
    2674:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2676:	4b02      	ldr	r3, [pc, #8]	; (2680 <main+0xc>)
    2678:	4798      	blx	r3
{
	
}

void loop(){
	DAC_0_example(); //PA02 (?)
    267a:	4c02      	ldr	r4, [pc, #8]	; (2684 <main+0x10>)
    267c:	47a0      	blx	r4
    267e:	e7fd      	b.n	267c <main+0x8>
    2680:	00000115 	.word	0x00000115
    2684:	00000551 	.word	0x00000551

00002688 <__libc_init_array>:
    2688:	b570      	push	{r4, r5, r6, lr}
    268a:	2600      	movs	r6, #0
    268c:	4d0c      	ldr	r5, [pc, #48]	; (26c0 <__libc_init_array+0x38>)
    268e:	4c0d      	ldr	r4, [pc, #52]	; (26c4 <__libc_init_array+0x3c>)
    2690:	1b64      	subs	r4, r4, r5
    2692:	10a4      	asrs	r4, r4, #2
    2694:	42a6      	cmp	r6, r4
    2696:	d109      	bne.n	26ac <__libc_init_array+0x24>
    2698:	2600      	movs	r6, #0
    269a:	f000 f8bf 	bl	281c <_init>
    269e:	4d0a      	ldr	r5, [pc, #40]	; (26c8 <__libc_init_array+0x40>)
    26a0:	4c0a      	ldr	r4, [pc, #40]	; (26cc <__libc_init_array+0x44>)
    26a2:	1b64      	subs	r4, r4, r5
    26a4:	10a4      	asrs	r4, r4, #2
    26a6:	42a6      	cmp	r6, r4
    26a8:	d105      	bne.n	26b6 <__libc_init_array+0x2e>
    26aa:	bd70      	pop	{r4, r5, r6, pc}
    26ac:	00b3      	lsls	r3, r6, #2
    26ae:	58eb      	ldr	r3, [r5, r3]
    26b0:	4798      	blx	r3
    26b2:	3601      	adds	r6, #1
    26b4:	e7ee      	b.n	2694 <__libc_init_array+0xc>
    26b6:	00b3      	lsls	r3, r6, #2
    26b8:	58eb      	ldr	r3, [r5, r3]
    26ba:	4798      	blx	r3
    26bc:	3601      	adds	r6, #1
    26be:	e7f2      	b.n	26a6 <__libc_init_array+0x1e>
    26c0:	00002828 	.word	0x00002828
    26c4:	00002828 	.word	0x00002828
    26c8:	00002828 	.word	0x00002828
    26cc:	0000282c 	.word	0x0000282c

000026d0 <memcpy>:
    26d0:	2300      	movs	r3, #0
    26d2:	b510      	push	{r4, lr}
    26d4:	429a      	cmp	r2, r3
    26d6:	d100      	bne.n	26da <memcpy+0xa>
    26d8:	bd10      	pop	{r4, pc}
    26da:	5ccc      	ldrb	r4, [r1, r3]
    26dc:	54c4      	strb	r4, [r0, r3]
    26de:	3301      	adds	r3, #1
    26e0:	e7f8      	b.n	26d4 <memcpy+0x4>

000026e2 <memset>:
    26e2:	0003      	movs	r3, r0
    26e4:	1882      	adds	r2, r0, r2
    26e6:	4293      	cmp	r3, r2
    26e8:	d100      	bne.n	26ec <memset+0xa>
    26ea:	4770      	bx	lr
    26ec:	7019      	strb	r1, [r3, #0]
    26ee:	3301      	adds	r3, #1
    26f0:	e7f9      	b.n	26e6 <memset+0x4>
    26f2:	0000      	movs	r0, r0
    26f4:	682f2e2e 	.word	0x682f2e2e
    26f8:	732f6c61 	.word	0x732f6c61
    26fc:	682f6372 	.word	0x682f6372
    2700:	615f6c61 	.word	0x615f6c61
    2704:	735f6364 	.word	0x735f6364
    2708:	2e636e79 	.word	0x2e636e79
    270c:	00000063 	.word	0x00000063
    2710:	682f2e2e 	.word	0x682f2e2e
    2714:	732f6c61 	.word	0x732f6c61
    2718:	682f6372 	.word	0x682f6372
    271c:	635f6c61 	.word	0x635f6c61
    2720:	6e656c61 	.word	0x6e656c61
    2724:	2e726164 	.word	0x2e726164
    2728:	00000063 	.word	0x00000063
    272c:	682f2e2e 	.word	0x682f2e2e
    2730:	732f6c61 	.word	0x732f6c61
    2734:	682f6372 	.word	0x682f6372
    2738:	645f6c61 	.word	0x645f6c61
    273c:	735f6361 	.word	0x735f6361
    2740:	2e636e79 	.word	0x2e636e79
    2744:	00000063 	.word	0x00000063
    2748:	682f2e2e 	.word	0x682f2e2e
    274c:	732f6c61 	.word	0x732f6c61
    2750:	682f6372 	.word	0x682f6372
    2754:	695f6c61 	.word	0x695f6c61
    2758:	6d5f6332 	.word	0x6d5f6332
    275c:	6e79735f 	.word	0x6e79735f
    2760:	00632e63 	.word	0x00632e63
    2764:	682f2e2e 	.word	0x682f2e2e
    2768:	732f6c61 	.word	0x732f6c61
    276c:	682f6372 	.word	0x682f6372
    2770:	735f6c61 	.word	0x735f6c61
    2774:	6d5f6970 	.word	0x6d5f6970
    2778:	6e79735f 	.word	0x6e79735f
    277c:	00632e63 	.word	0x00632e63

00002780 <_adcs>:
	...
    279c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    27ac:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    27bc:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....
    27cc:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    27dc:	632e6374 00000000                       tc.c....

000027e4 <_i2cms>:
    27e4:	00000005 00200014 00000100 00000f0e     ...... .........
    27f4:	00d70000 003d0900 682f2e2e 732f6c70     ......=.../hpl/s
    2804:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2814:	0000632e 00002000                       .c... ..

0000281c <_init>:
    281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2822:	bc08      	pop	{r3}
    2824:	469e      	mov	lr, r3
    2826:	4770      	bx	lr

00002828 <__init_array_start>:
    2828:	000000dd 	.word	0x000000dd

0000282c <_fini>:
    282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2832:	bc08      	pop	{r3}
    2834:	469e      	mov	lr, r3
    2836:	4770      	bx	lr

00002838 <__fini_array_start>:
    2838:	000000b5 	.word	0x000000b5
